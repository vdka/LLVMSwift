{"Structs/X86MMXType.html#/s:4LLVM10X86MMXTypeV7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this type.</p>","parent_name":"X86MMXType"},"Structs/X86MMXType.html#/s:4LLVM10X86MMXTypeVAcA7ContextC2in_tcfc":{"name":"init(in:)","abstract":"<p>Creates an <code>X86MMXType</code>.</p>","parent_name":"X86MMXType"},"Structs/X86MMXType.html#/s:4LLVM10X86MMXTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"X86MMXType"},"Structs/VoidType.html#/s:4LLVM8VoidTypeV7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this type.</p>","parent_name":"VoidType"},"Structs/VoidType.html#/s:4LLVM8VoidTypeVAcA7ContextC2in_tcfc":{"name":"init(in:)","abstract":"<p>Creates an instance of the <code>Void</code> type.</p>","parent_name":"VoidType"},"Structs/VoidType.html#/s:4LLVM8VoidTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"VoidType"},"Structs/VectorType.html#/s:4LLVM10VectorTypeV07elementC0AA6IRType_pv":{"name":"elementType","abstract":"<p>Returns the type of elements in the vector.</p>","parent_name":"VectorType"},"Structs/VectorType.html#/s:4LLVM10VectorTypeV5countSiv":{"name":"count","abstract":"<p>Returns the number of elements in the vector.</p>","parent_name":"VectorType"},"Structs/VectorType.html#/s:4LLVM10VectorTypeVAcA6IRType_p07elementC0_Si5counttcfc":{"name":"init(elementType:count:)","abstract":"<p>Creates a vector type of the given element type and size.</p>","parent_name":"VectorType"},"Structs/VectorType.html#/s:4LLVM10VectorTypeV8constantAA8ConstantVyAA0B0OGSayAA7IRValue_pGF":{"name":"constant(_:)","abstract":"<p>Creates a constant value of this vector type initialized with the given","parent_name":"VectorType"},"Structs/VectorType.html#/s:4LLVM10VectorTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"VectorType"},"Structs/Use.html#/s:4LLVM3UseV4nextACSgyF":{"name":"next()","abstract":"<p>Retrieves the next use of a value.</p>","parent_name":"Use"},"Structs/Use.html#/s:4LLVM3UseV4userAA7IRValue_pSgyF":{"name":"user()","abstract":"<p>Obtain the user value for this <code>Use</code> object.</p>","parent_name":"Use"},"Structs/Use.html#/s:4LLVM3UseV9usedValueAA7IRValue_pSgyF":{"name":"usedValue()","abstract":"<p>Obtain the value this <code>Use</code> object corresponds to.</p>","parent_name":"Use"},"Structs/TokenType.html#/s:4LLVM9TokenTypeV7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this type.</p>","parent_name":"TokenType"},"Structs/TokenType.html#/s:4LLVM9TokenTypeVAcA7ContextC2in_tcfc":{"name":"init(in:)","abstract":"<p>Initializes a token type from the given LLVM type object.</p>","parent_name":"TokenType"},"Structs/TokenType.html#/s:4LLVM9TokenTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"TokenType"},"Structs/Switch.html#/s:4LLVM6SwitchV7addCaseyAA7IRValue_p_AA10BasicBlockVtF":{"name":"addCase(_:_:)","abstract":"<p>Inserts a case with the given value and destination basic block in the","parent_name":"Switch"},"Structs/Switch.html#/s:4LLVM6SwitchV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Switch"},"Structs/StructType.html#/s:4LLVM10StructTypeVACs13OpaquePointerV4llvm_tcfc":{"name":"init(llvm:)","abstract":"<p>Initializes a structure type from the given LLVM type object.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:4LLVM10StructTypeVACSayAA6IRType_pG12elementTypes_Sb8isPackedAA7ContextC2intcfc":{"name":"init(elementTypes:isPacked:in:)","abstract":"<p>Creates a structure type from an array of component element types.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:4LLVM10StructTypeV7setBodyySayAA6IRType_pG_Sb8isPackedtF":{"name":"setBody(_:isPacked:)","abstract":"<p>Invalidates and resets the member types of this structure.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:4LLVM10StructTypeV8constantAA8ConstantVyAA0B0OGSayAA7IRValue_pG6values_tF":{"name":"constant(values:)","abstract":"<p>Creates a constant value of this structure type initialized with the given","parent_name":"StructType"},"Structs/StructType.html#/s:4LLVM10StructTypeV8constantAA8ConstantVyAA0B0OGSayAA7IRValue_pG6values_Sb8isPackedtFZ":{"name":"constant(values:isPacked:)","abstract":"<p>Creates an constant struct value initialized with the given list of values.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:4LLVM10StructTypeV4nameSSv":{"name":"name","abstract":"<p>Retrieves the name associated with this structure type, or the empty","parent_name":"StructType"},"Structs/StructType.html#/s:4LLVM10StructTypeV12elementTypesSayAA6IRType_pGv":{"name":"elementTypes","abstract":"<p>Retrieves the element types associated with this structure type.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:4LLVM10StructTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"StructType"},"Structs/PointerType.html#/s:4LLVM11PointerTypeV7pointeeAA6IRType_pv":{"name":"pointee","abstract":"<p>Retrieves the type of the value being pointed to.</p>","parent_name":"PointerType"},"Structs/PointerType.html#/s:4LLVM11PointerTypeV12addressSpaceSiv":{"name":"addressSpace","abstract":"<p>Retrieves the address space where the pointed-to object resides.</p>","parent_name":"PointerType"},"Structs/PointerType.html#/s:4LLVM11PointerTypeVAcA6IRType_p7pointee_Si12addressSpacetcfc":{"name":"init(pointee:addressSpace:)","abstract":"<p>Creates a <code>PointerType</code> from a pointee type and an optional address space.</p>","parent_name":"PointerType"},"Structs/PointerType.html#/s:4LLVM11PointerTypeV6toVoidACvZ":{"name":"toVoid","abstract":"<p>/ Creates a type that simulates a pointer to void <code>(void*)</code>.</p>","parent_name":"PointerType"},"Structs/PointerType.html#/s:4LLVM11PointerTypeV02asA0s06OpaqueB0VyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"PointerType"},"Structs/PhiNode.html#/s:4LLVM7PhiNodeV11addIncomingySayAA7IRValue_p_AA10BasicBlockVtGF":{"name":"addIncoming(_:)","abstract":"<p>Adds a list of incoming value and their associated basic blocks to the end","parent_name":"PhiNode"},"Structs/PhiNode.html#/s:4LLVM7PhiNodeV8incomingSayAA7IRValue_p_AA10BasicBlockVtGv":{"name":"incoming","abstract":"<p>Obtain the incoming values and their associated basic blocks for this PHI","parent_name":"PhiNode"},"Structs/PhiNode.html#/s:4LLVM7PhiNodeV13incomingValueAA7IRValue_pSgSi2at_tF":{"name":"incomingValue(at:)","abstract":"<p>Retrieves the incoming value for the given index for this PHI node, if it","parent_name":"PhiNode"},"Structs/PhiNode.html#/s:4LLVM7PhiNodeV13incomingBlockAA05BasicE0VSgSi2at_tF":{"name":"incomingBlock(at:)","abstract":"<p>Retrieves the incoming basic block for the given index for this PHI node,","parent_name":"PhiNode"},"Structs/PhiNode.html#/s:4LLVM7PhiNodeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"PhiNode"},"Structs/Relocation.html#/s:4LLVM10RelocationV4typeSiv":{"name":"type","abstract":"<p>Retrieves the type of this relocation.</p>","parent_name":"Relocation"},"Structs/Relocation.html#/s:4LLVM10RelocationV6offsetSiv":{"name":"offset","abstract":"<p>The offset the relocated symbol resides at.</p>","parent_name":"Relocation"},"Structs/Relocation.html#/s:4LLVM10RelocationV6symbolAA6SymbolVv":{"name":"symbol","abstract":"<p>The symbol that is the subject of the relocation.</p>","parent_name":"Relocation"},"Structs/Relocation.html#/s:4LLVM10RelocationV8typeNameSSv":{"name":"typeName","abstract":"<p>Get a string that represents the type of this relocation for display","parent_name":"Relocation"},"Structs/Symbol.html#/s:4LLVM6SymbolV4nameSSv":{"name":"name","abstract":"<p>The symbol name.</p>","parent_name":"Symbol"},"Structs/Symbol.html#/s:4LLVM6SymbolV4sizeSiv":{"name":"size","abstract":"<p>The size of the data in the symbol.</p>","parent_name":"Symbol"},"Structs/Symbol.html#/s:4LLVM6SymbolV7addressSiv":{"name":"address","abstract":"<p>The address of the symbol in the object file.</p>","parent_name":"Symbol"},"Structs/Section.html#/s:4LLVM7SectionV4nameSSv":{"name":"name","abstract":"<p>The section&rsquo;s declared name.</p>","parent_name":"Section"},"Structs/Section.html#/s:4LLVM7SectionV4sizeSiv":{"name":"size","abstract":"<p>The size of the contents of the section.</p>","parent_name":"Section"},"Structs/Section.html#/s:4LLVM7SectionV8contentsSSv":{"name":"contents","abstract":"<p>The raw contents of the section.</p>","parent_name":"Section"},"Structs/Section.html#/s:4LLVM7SectionV7addressSiv":{"name":"address","abstract":"<p>The address of the section in the object file.</p>","parent_name":"Section"},"Structs/Section.html#/s:4LLVM7SectionV11relocationsAA18RelocationSequenceCv":{"name":"relocations","abstract":"<p>Returns a sequence of all the relocations in this object file.</p>","parent_name":"Section"},"Structs/Section.html#/s:4LLVM7SectionV8containsSbAA6SymbolV6symbol_tF":{"name":"contains(symbol:)","abstract":"<p>Returns whether a symbol matching the given <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Symbol.html\">Symbol</a></code> can be found in","parent_name":"Section"},"Structs/MetadataType.html#/s:4LLVM12MetadataTypeV7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this type.</p>","parent_name":"MetadataType"},"Structs/MetadataType.html#/s:4LLVM12MetadataTypeVAcA7ContextC2in_tcfc":{"name":"init(in:)","abstract":"<p>Creates an embedded metadata type for the given LLVM type object.</p>","parent_name":"MetadataType"},"Structs/MetadataType.html#/s:4LLVM12MetadataTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"MetadataType"},"Structs/LabelType.html#/s:4LLVM9LabelTypeV7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this type.</p>","parent_name":"LabelType"},"Structs/LabelType.html#/s:4LLVM9LabelTypeVAcA7ContextC2in_tcfc":{"name":"init(in:)","abstract":"<p>Creates a code label.</p>","parent_name":"LabelType"},"Structs/LabelType.html#/s:4LLVM9LabelTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"LabelType"},"Structs/IntType.html#/s:4LLVM7IntTypeV5widthSiv":{"name":"width","abstract":"<p>Retrieves the bit width of this integer type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeVACSi5width_AA7ContextC2intcfc":{"name":"init(width:in:)","abstract":"<p>Creates an integer type with the specified bit width.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV4int1ACvZ":{"name":"int1","abstract":"<p>Retrieves the <code>i1</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV4int8ACvZ":{"name":"int8","abstract":"<p>Retrieves the <code>i8</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV5int16ACvZ":{"name":"int16","abstract":"<p>Retrieves the <code>i16</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV5int32ACvZ":{"name":"int32","abstract":"<p>Retrieves the <code>i32</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV5int64ACvZ":{"name":"int64","abstract":"<p>Retrieves the <code>i64</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV6int128ACvZ":{"name":"int128","abstract":"<p>Retrieves the <code>i128</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV4zeroAA7IRValue_pyF":{"name":"zero()","abstract":"<p>Retrieves an integer value of this type&rsquo;s bit width consisting of all","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV8constantAA8ConstantVyAA8UnsignedOGx_Sb10signExtendts0F7IntegerRzlF":{"name":"constant(_:signExtend:)","abstract":"<p>Creates an unsigned integer constant value with the given Swift integer value.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV8constantAA8ConstantVyAA6SignedOGx_Sb10signExtendts0F7IntegerRzlF":{"name":"constant(_:signExtend:)","abstract":"<p>Creates a signed integer constant value with the given Swift integer value.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV8constantAA8ConstantVyAA6SignedOGSS_Si5radixtF":{"name":"constant(_:radix:)","abstract":"<p>Creates a constant integer value of this type parsed from a string.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV7allOnesAA7IRValue_pyF":{"name":"allOnes()","abstract":"<p>Retrieves an integer value of this type&rsquo;s bit width consisting of all","parent_name":"IntType"},"Structs/IntType.html#/s:4LLVM7IntTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"IntType"},"Structs/TerminatorInstruction.html#/s:4LLVM21TerminatorInstructionVACs13OpaquePointerV4llvm_tcfc":{"name":"init(llvm:)","abstract":"<p>Creates a <code>TerminatorInstruction</code> from an <code>LLVMValueRef</code> object.</p>","parent_name":"TerminatorInstruction"},"Structs/TerminatorInstruction.html#/s:4LLVM21TerminatorInstructionV14successorCountSiv":{"name":"successorCount","abstract":"<p>Retrieves the number of successors of this terminator instruction.</p>","parent_name":"TerminatorInstruction"},"Structs/TerminatorInstruction.html#/s:4LLVM21TerminatorInstructionV12getSuccessorAA10BasicBlockVSgSi2at_tF":{"name":"getSuccessor(at:)","abstract":"<p>Returns the successor block at the specified index, if it exists.</p>","parent_name":"TerminatorInstruction"},"Structs/TerminatorInstruction.html#/s:4LLVM21TerminatorInstructionV12setSuccessorySi2at_AA10BasicBlockV2totF":{"name":"setSuccessor(at:to:)","abstract":"<p>Updates the successor block at the specified index.</p>","parent_name":"TerminatorInstruction"},"Structs/Instruction.html#/s:4LLVM11InstructionVACs13OpaquePointerV4llvm_tcfc":{"name":"init(llvm:)","abstract":"<p>Creates an <code>Intruction</code> from an <code>LLVMValueRef</code> object.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:4LLVM11InstructionV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:4LLVM11InstructionV6opCodeAA02OpD0Ov":{"name":"opCode","abstract":"<p>Retrieves the opcode associated with this <code>Instruction</code>.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:4LLVM11InstructionV8previousACSgyF":{"name":"previous()","abstract":"<p>Obtain the instruction that occurs before this one, if it exists.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:4LLVM11InstructionV4nextACSgyF":{"name":"next()","abstract":"<p>Obtain the instruction that occurs after this one, if it exists.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:4LLVM11InstructionV11parentBlockAA05BasicD0VSgv":{"name":"parentBlock","abstract":"<p>Retrieves the parent basic block that contains this instruction, if it","parent_name":"Instruction"},"Structs/Instruction.html#/s:4LLVM11InstructionV8firstUseAA0D0VSgv":{"name":"firstUse","abstract":"<p>Retrieves the first use of this instruction.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:4LLVM11InstructionV4usess11AnySequenceVyAA3UseVGv":{"name":"uses","abstract":"<p>Retrieves the sequence of instructions that use the value from this","parent_name":"Instruction"},"Structs/Global.html#/s:4LLVM6GlobalV23isExternallyInitializedSbv":{"name":"isExternallyInitialized","abstract":"<p>Returns whether this global variable has no initializer because it makes","parent_name":"Global"},"Structs/Global.html#/s:4LLVM6GlobalV11initializerAA7IRValue_pSgv":{"name":"initializer","abstract":"<p>Retrieves the initializer for this global variable, if it exists.</p>","parent_name":"Global"},"Structs/Global.html#/s:4LLVM6GlobalV02isB8ConstantSbv":{"name":"isGlobalConstant","abstract":"<p>Returns whether this global variable is a constant, whether or not the","parent_name":"Global"},"Structs/Global.html#/s:4LLVM6GlobalV13isThreadLocalSbv":{"name":"isThreadLocal","abstract":"<p>Returns whether this global variable is thread-local.  That is, returns","parent_name":"Global"},"Structs/Global.html#/s:4LLVM6GlobalV16threadLocalModelAA06ThreaddE0Ov":{"name":"threadLocalModel","abstract":"<p>Accesses the model of reference for this global variable if it is","parent_name":"Global"},"Structs/Global.html#/s:4LLVM6GlobalV8previousACSgyF":{"name":"previous()","abstract":"<p>Retrieves the previous global in the module, if there is one.</p>","parent_name":"Global"},"Structs/Global.html#/s:4LLVM6GlobalV4nextACSgyF":{"name":"next()","abstract":"<p>Retrieves the next global in the module, if there is one.</p>","parent_name":"Global"},"Structs/Global.html#/s:4LLVM6GlobalV6deleteyyF":{"name":"delete()","abstract":"<p>Deletes the global variable from its containing module.</p>","parent_name":"Global"},"Structs/Global.html#/s:4LLVM6GlobalV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Global"},"Structs/FunctionType.html#/s:4LLVM12FunctionTypeV8argTypesSayAA6IRType_pGv":{"name":"argTypes","abstract":"<p>The list of argument types.</p>","parent_name":"FunctionType"},"Structs/FunctionType.html#/s:4LLVM12FunctionTypeV06returnC0AA6IRType_pv":{"name":"returnType","abstract":"<p>The return type of this function type.</p>","parent_name":"FunctionType"},"Structs/FunctionType.html#/s:4LLVM12FunctionTypeV8isVarArgSbv":{"name":"isVarArg","abstract":"<p>Returns whether this function is variadic.</p>","parent_name":"FunctionType"},"Structs/FunctionType.html#/s:4LLVM12FunctionTypeVACSayAA6IRType_pG8argTypes_AaD_p06returnC0Sb8isVarArgtcfc":{"name":"init(argTypes:returnType:isVarArg:)","abstract":"<p>Creates a function type with the given argument types and return type.</p>","parent_name":"FunctionType"},"Structs/FunctionType.html#/s:4LLVM12FunctionTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"FunctionType"},"Structs/Parameter.html#/s:4LLVM9ParameterV4nextACSgyF":{"name":"next()","abstract":"<p>Retrieves the next parameter, if it exists.</p>","parent_name":"Parameter"},"Structs/Parameter.html#/s:4LLVM9ParameterV8previousACSgyF":{"name":"previous()","abstract":"<p>Retrieves the previous parameter, if it exists.</p>","parent_name":"Parameter"},"Structs/Parameter.html#/s:4LLVM9ParameterV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Parameter"},"Structs/FloatType/Kind.html#/s:4LLVM9FloatTypeV4KindO4halfA2EmF":{"name":"half","abstract":"<p>16-bit floating point value</p>","parent_name":"Kind"},"Structs/FloatType/Kind.html#/s:4LLVM9FloatTypeV4KindO5floatA2EmF":{"name":"float","abstract":"<p>32-bit floating point value</p>","parent_name":"Kind"},"Structs/FloatType/Kind.html#/s:4LLVM9FloatTypeV4KindO6doubleA2EmF":{"name":"double","abstract":"<p>64-bit floating point value</p>","parent_name":"Kind"},"Structs/FloatType/Kind.html#/s:4LLVM9FloatTypeV4KindO7x86FP80A2EmF":{"name":"x86FP80","abstract":"<p>80-bit floating point value (X87)</p>","parent_name":"Kind"},"Structs/FloatType/Kind.html#/s:4LLVM9FloatTypeV4KindO5fp128A2EmF":{"name":"fp128","abstract":"<p>128-bit floating point value (112-bit mantissa)</p>","parent_name":"Kind"},"Structs/FloatType/Kind.html#/s:4LLVM9FloatTypeV4KindO8ppcFP128A2EmF":{"name":"ppcFP128","abstract":"<p>128-bit floating point value (two 64-bits)</p>","parent_name":"Kind"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV4kindAC4KindOv":{"name":"kind","abstract":"<p>The kind of floating point type this is</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this type.</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeVA2C4KindO4kind_AA7ContextC2intcfc":{"name":"init(kind:in:)","abstract":"<p>Creates a float type of a particular kind</p>","parent_name":"FloatType"},"Structs/FloatType/Kind.html":{"name":"Kind","abstract":"<p>Enumerates the bitwidth and kind of supported floating point types.</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV4halfACvZ":{"name":"half","abstract":"<p>16-bit floating point value in the global context</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV5floatACvZ":{"name":"float","abstract":"<p>32-bit floating point value in the global context</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV6doubleACvZ":{"name":"double","abstract":"<p>64-bit floating point value in the global context</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV7x86FP80ACvZ":{"name":"x86FP80","abstract":"<p>80-bit floating point value (X87) in the global context</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV5fp128ACvZ":{"name":"fp128","abstract":"<p>128-bit floating point value (112-bit mantissa) in the global context</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV8ppcFP128ACvZ":{"name":"ppcFP128","abstract":"<p>128-bit floating point value (two 64-bits) in the global context</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV8constantAA8ConstantVyAA8FloatingOGSdF":{"name":"constant(_:)","abstract":"<p>Creates a constant floating value of this type from a Swift <code>Double</code> value.</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV8constantAA8ConstantVyAA8FloatingOGSSF":{"name":"constant(_:)","abstract":"<p>Creates a constant floating value of this type parsed from a string.</p>","parent_name":"FloatType"},"Structs/FloatType.html#/s:4LLVM9FloatTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"FloatType"},"Structs/Constant.html#/s:4LLVM8ConstantV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM constant object.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A08IntegralB14RepresentationRzlE4castACyAA6SignedOGAA7IntTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A08IntegralB14RepresentationRzlE4castACyAA8UnsignedOGAA7IntTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE4castACyAA8FloatingOGAA9FloatTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given floating type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE4castACyAEGAA7IntTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE4castACyAA8UnsignedOGAA7IntTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE4castACyAA8FloatingOGAA9FloatTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given floating type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE4castACyAA6SignedOGAA7IntTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE4castACyAA8UnsignedOGAA7IntTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE4castACyAEGAA9FloatTypeV2to_tF":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given floating type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE8truncateACyAEGAA7IntTypeV2to_tF":{"name":"truncate(to:)","abstract":"<p>Creates a constant truncated to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE8truncateACyAEGAA7IntTypeV2to_tF":{"name":"truncate(to:)","abstract":"<p>Creates a constant truncated to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE8truncateACyAEGAA9FloatTypeV2to_tF":{"name":"truncate(to:)","abstract":"<p>Creates a constant truncated to a given floating type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV6negateACyAA6SignedOGAG_AA16OverflowBehaviorO08overflowF0tFZ":{"name":"negate(_:overflowBehavior:)","abstract":"<p>Creates a constant negate operation to negate a value.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV6negateACyAA8FloatingOGAGFZ":{"name":"negate(_:)","abstract":"<p>Creates a constant negate operation to negate a value.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE6negateACyAEGyF":{"name":"negate()","abstract":"<p>Creates a constant negate operation to negate a value.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE6negateACyAEGyF":{"name":"negate()","abstract":"<p>Creates a constant negate operation to negate a value.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV3addACyAA8UnsignedOGAG_AgA16OverflowBehaviorO08overflowF0tFZ":{"name":"add(_:_:overflowBehavior:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV3addACyAA6SignedOGAG_AgA16OverflowBehaviorO08overflowF0tFZ":{"name":"add(_:_:overflowBehavior:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV3addACyAA8FloatingOGAG_AGtFZ":{"name":"add(_:_:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE6addingACyAEGAG_AA16OverflowBehaviorO08overflowF0tF":{"name":"adding(_:overflowBehavior:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE6addingACyAEGAG_AA16OverflowBehaviorO08overflowF0tF":{"name":"adding(_:overflowBehavior:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE6addingACyAEGAGF":{"name":"adding(_:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV8subtractACyAA8UnsignedOGAG_AgA16OverflowBehaviorO08overflowF0tFZ":{"name":"subtract(_:_:overflowBehavior:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV8subtractACyAA6SignedOGAG_AgA16OverflowBehaviorO08overflowF0tFZ":{"name":"subtract(_:_:overflowBehavior:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV8subtractACyAA8FloatingOGAG_AGtFZ":{"name":"subtract(_:_:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE11subtractingACyAEGAG_AA16OverflowBehaviorO08overflowF0tF":{"name":"subtracting(_:overflowBehavior:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE11subtractingACyAEGAG_AA16OverflowBehaviorO08overflowF0tF":{"name":"subtracting(_:overflowBehavior:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE11subtractingACyAEGAGF":{"name":"subtracting(_:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV8multiplyACyAA8UnsignedOGAG_AgA16OverflowBehaviorO08overflowF0tFZ":{"name":"multiply(_:_:overflowBehavior:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV8multiplyACyAA6SignedOGAG_AgA16OverflowBehaviorO08overflowF0tFZ":{"name":"multiply(_:_:overflowBehavior:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV8multiplyACyAA8FloatingOGAG_AGtFZ":{"name":"multiply(_:_:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE11multiplyingACyAEGAG_AA16OverflowBehaviorO08overflowF0tF":{"name":"multiplying(_:overflowBehavior:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE11multiplyingACyAEGAG_AA16OverflowBehaviorO08overflowF0tF":{"name":"multiplying(_:overflowBehavior:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE11multiplyingACyAEGAGF":{"name":"multiplying(_:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV6divideACyAA8UnsignedOGAG_AGtFZ":{"name":"divide(_:_:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV6divideACyAA6SignedOGAG_AGtFZ":{"name":"divide(_:_:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV6divideACyAA8FloatingOGAG_AGtFZ":{"name":"divide(_:_:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE8dividingACyAEGAG2by_tF":{"name":"dividing(by:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE8dividingACyAEGAG2by_tF":{"name":"dividing(by:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE8dividingACyAEGAG2by_tF":{"name":"dividing(by:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV9remainderACyAA8UnsignedOGAG_AGtFZ":{"name":"remainder(_:_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV9remainderACyAA6SignedOGAG_AGtFZ":{"name":"remainder(_:_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV9remainderACyAA8FloatingOGAG_AGtFZ":{"name":"remainder(_:_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE9remainderACyAEGAGF":{"name":"remainder(_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE9remainderACyAEGAGF":{"name":"remainder(_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE9remainderACyAEGAGF":{"name":"remainder(_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A08IntegralB14RepresentationRzlE6equalsACyAA6SignedOGACyxG_AItFZ":{"name":"equals(_:_:)","abstract":"<p>A constant equality comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE8lessThanACyAEGAG_AGtFZ":{"name":"lessThan(_:_:)","abstract":"<p>A constant less-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE11greaterThanACyAEGAG_AGtFZ":{"name":"greaterThan(_:_:)","abstract":"<p>A constant greater-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE15lessThanOrEqualACyAEGAG_AGtFZ":{"name":"lessThanOrEqual(_:_:)","abstract":"<p>A constant less-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE18greaterThanOrEqualACyAEGAG_AGtFZ":{"name":"greaterThanOrEqual(_:_:)","abstract":"<p>A constant greater-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE8lessThanACyAA6SignedOGACyAEG_AJtFZ":{"name":"lessThan(_:_:)","abstract":"<p>A constant less-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE11greaterThanACyAA6SignedOGACyAEG_AJtFZ":{"name":"greaterThan(_:_:)","abstract":"<p>A constant greater-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE15lessThanOrEqualACyAA6SignedOGACyAEG_AJtFZ":{"name":"lessThanOrEqual(_:_:)","abstract":"<p>A constant less-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE18greaterThanOrEqualACyAA6SignedOGACyAEG_AJtFZ":{"name":"greaterThanOrEqual(_:_:)","abstract":"<p>A constant greater-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE6equalsACyAA6SignedOGACyAEG_AJtFZ":{"name":"equals(_:_:)","abstract":"<p>A constant equality comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE8lessThanACyAA6SignedOGACyAEG_AJtFZ":{"name":"lessThan(_:_:)","abstract":"<p>A constant less-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE11greaterThanACyAA6SignedOGACyAEG_AJtFZ":{"name":"greaterThan(_:_:)","abstract":"<p>A constant greater-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE15lessThanOrEqualACyAA6SignedOGACyAEG_AJtFZ":{"name":"lessThanOrEqual(_:_:)","abstract":"<p>A constant less-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE18greaterThanOrEqualACyAA6SignedOGACyAEG_AJtFZ":{"name":"greaterThanOrEqual(_:_:)","abstract":"<p>A constant greater-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV3notACyqd__GAeA08IntegralB14RepresentationRd__lFZ":{"name":"not(_:)","abstract":"<p>A constant bitwise logical not with the given integral value as an operand.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV3andACyqd__GAE_AEtAA08IntegralB14RepresentationRd__lFZ":{"name":"and(_:_:)","abstract":"<p>A constant bitwise logical AND with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV2orACyqd__GAE_AEtAA08IntegralB14RepresentationRd__lFZ":{"name":"or(_:_:)","abstract":"<p>A constant bitwise logical OR with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV3xorACyqd__GAE_AEtAA08IntegralB14RepresentationRd__lFZ":{"name":"xor(_:_:)","abstract":"<p>A constant bitwise logical exclusive OR with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV9leftShiftACyqd__GAE_AEtAA08IntegralB14RepresentationRd__lFZ":{"name":"leftShift(_:_:)","abstract":"<p>A constant left-shift of the first value by the second amount.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV10rightShiftACyqd__GAE_AESb10arithmetictAA08IntegralB14RepresentationRd__lFZ":{"name":"rightShift(_:_:arithmetic:)","abstract":"<p>A constant right-shift of the first value by the second amount.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantV6selectACyqd_0_GACyqd__G_AE4thenAE4elsetAA08IntegralB14RepresentationRd__AA0bG0Rd_0_r0_lFZ":{"name":"select(_:then:else:)","abstract":"<p>A constant select using the given condition to select among two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A08IntegralB14RepresentationRzlE12pointerToIntACyxGAA8IRGlobal_p_AA0G4TypeVtFZ":{"name":"pointerToInt(_:_:)","abstract":"<p>Creates a constant pointer-to-integer operation to convert the given constant","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6StructORszlE10getElementAA7IRValue_pSaySiG7indices_tF":{"name":"getElement(indices:)","abstract":"<p>Creates a constant operation retrieving the element at the index.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6VectorORszlE012buildShuffleC0ACyAEGAG_AG3andAG4masktFZ":{"name":"buildShuffleVector(_:and:mask:)","abstract":"<p>Builds a constant operation to construct a permutation of elements","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE1poiACyAEGAG_AGtFZ":{"name":"+(_:_:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE1soiACyAEGAG_AGtFZ":{"name":"-(_:_:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE1moiACyAEGAG_AGtFZ":{"name":"*(_:_:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE1doiACyAEGAG_AGtFZ":{"name":"/(_:_:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE1roiACyAEGAG_AGtFZ":{"name":"%(_:_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE2eeoiACyAA6SignedOGACyAEG_AJtFZ":{"name":"==(_:_:)","abstract":"<p>A constant equality comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE1loiACyAA6SignedOGACyAEG_AJtFZ":{"name":"<(_:_:)","abstract":"<p>A constant less-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE1goiACyAA6SignedOGACyAEG_AJtFZ":{"name":">(_:_:)","abstract":"<p>A constant greater-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE2leoiACyAA6SignedOGACyAEG_AJtFZ":{"name":"<=(_:_:)","abstract":"<p>A constant less-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE2geoiACyAA6SignedOGACyAEG_AJtFZ":{"name":">=(_:_:)","abstract":"<p>A constant greater-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1poiACyAEGAG_AGtFZ":{"name":"+(_:_:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1soiACyAEGAG_AGtFZ":{"name":"-(_:_:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1moiACyAEGAG_AGtFZ":{"name":"*(_:_:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1doiACyAEGAG_AGtFZ":{"name":"/(_:_:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1roiACyAEGAG_AGtFZ":{"name":"%(_:_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE2eeoiACyAEGAG_AGtFZ":{"name":"==(_:_:)","abstract":"<p>A constant equality comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1loiACyAEGAG_AGtFZ":{"name":"<(_:_:)","abstract":"<p>A constant less-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1goiACyAEGAG_AGtFZ":{"name":">(_:_:)","abstract":"<p>A constant greater-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE2leoiACyAEGAG_AGtFZ":{"name":"<=(_:_:)","abstract":"<p>A constant less-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE2geoiACyAEGAG_AGtFZ":{"name":">=(_:_:)","abstract":"<p>A constant greater-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1ooiACyAEGAG_AGtFZ":{"name":"|(_:_:)","abstract":"<p>A constant bitwise logical OR with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE1aoiACyAEGAG_AGtFZ":{"name":"&(_:_:)","abstract":"<p>A constant bitwise logical AND with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE2lloiACyAEGAG_AGtFZ":{"name":"<<(_:_:)","abstract":"<p>A constant left-shift of the first value by the second amount.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6SignedORszlE2ggoiACyAEGAG_AGtFZ":{"name":">>(_:_:)","abstract":"<p>A constant right-shift of the first value by the second amount.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1poiACyAEGAG_AGtFZ":{"name":"+(_:_:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1soiACyAEGAG_AGtFZ":{"name":"-(_:_:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1moiACyAEGAG_AGtFZ":{"name":"*(_:_:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1doiACyAEGAG_AGtFZ":{"name":"/(_:_:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1roiACyAEGAG_AGtFZ":{"name":"%(_:_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE2eeoiACyAA6SignedOGACyAEG_AJtFZ":{"name":"==(_:_:)","abstract":"<p>A constant equality comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1loiACyAA6SignedOGACyAEG_AJtFZ":{"name":"<(_:_:)","abstract":"<p>A constant less-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1goiACyAA6SignedOGACyAEG_AJtFZ":{"name":">(_:_:)","abstract":"<p>A constant greater-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE2leoiACyAA6SignedOGACyAEG_AJtFZ":{"name":"<=(_:_:)","abstract":"<p>A constant less-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE2geoiACyAA6SignedOGACyAEG_AJtFZ":{"name":">=(_:_:)","abstract":"<p>A constant greater-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1ooiACyAEGAG_AGtFZ":{"name":"|(_:_:)","abstract":"<p>A constant bitwise logical OR with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE1aoiACyAEGAG_AGtFZ":{"name":"&(_:_:)","abstract":"<p>A constant bitwise logical AND with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE2lloiACyAEGAG_AGtFZ":{"name":"<<(_:_:)","abstract":"<p>A constant left-shift of the first value by the second amount.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8UnsignedORszlE2ggoiACyAEGAG_AGtFZ":{"name":">>(_:_:)","abstract":"<p>A constant right-shift of the first value by the second amount.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A08IntegralB14RepresentationRzlE1nopACyxGAFFZ":{"name":"!(_:)","abstract":"<p>A constant bitwise logical not with the given integral value as an operand.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A08IntegralB14RepresentationRzlE5undefACyxGAA7IntTypeVFZ":{"name":"undef(_:)","abstract":"<p>Returns the special LLVM <code>undef</code> value for this type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A8FloatingORszlE5undefACyAEGAA9FloatTypeVFZ":{"name":"undef(_:)","abstract":"<p>Returns the special LLVM <code>undef</code> value for this type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6StructORszlE5undefACyAEGAA0C4TypeVFZ":{"name":"undef(_:)","abstract":"<p>Returns the special LLVM <code>undef</code> value for this type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:4LLVM8ConstantVA2A6VectorORszlE5undefACyAEGAA0C4TypeVFZ":{"name":"undef(_:)","abstract":"<p>Returns the special LLVM <code>undef</code> value for this type.</p>","parent_name":"Constant"},"Structs/Invoke.html#/s:4LLVM6InvokeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Invoke"},"Structs/Invoke.html#/s:4LLVM6InvokeV17normalDestinationAA10BasicBlockVv":{"name":"normalDestination","abstract":"<p>Accesses the destination block the flow of control will transfer to if an","parent_name":"Invoke"},"Structs/Invoke.html#/s:4LLVM6InvokeV17unwindDestinationAA10BasicBlockVv":{"name":"unwindDestination","abstract":"<p>Accesses the destination block that exception unwinding will jump to.</p>","parent_name":"Invoke"},"Structs/Call.html#/s:4LLVM4CallV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Call"},"Structs/Call.html#/s:4LLVM4CallV13argumentCountSiv":{"name":"argumentCount","abstract":"<p>Retrieves the number of argument operands passed by this call.</p>","parent_name":"Call"},"Structs/Call.html#/s:4LLVM4CallV17callingConventionAA07CallingD0Ov":{"name":"callingConvention","abstract":"<p>Accesses the calling convention for this function call.</p>","parent_name":"Call"},"Structs/Call.html#/s:4LLVM4CallV06isTailB0Sbv":{"name":"isTailCall","abstract":"<p>Returns whether this function call is a tail call.  That is, if the callee","parent_name":"Call"},"Structs/Call.html#/s:4LLVM4CallV21setParameterAlignmentySi2at_Si2totF":{"name":"setParameterAlignment(at:to:)","abstract":"<p>Retrieves the alignment of the parameter at the given index.</p>","parent_name":"Call"},"Structs/BasicBlock/Address.html#/s:4LLVM10BasicBlockV7AddressV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Address"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockVACs13OpaquePointerV4llvm_tcfc":{"name":"init(llvm:)","abstract":"<p>Creates a <code>BasicBlock</code> from an <code>LLVMBasicBlockRef</code> object.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV16firstInstructionAA0E0VSgv":{"name":"firstInstruction","abstract":"<p>Returns the first instruction in the basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV15lastInstructionAA0E0VSgv":{"name":"lastInstruction","abstract":"<p>Returns the first instruction in the basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV10terminatorAA21TerminatorInstructionVSgv":{"name":"terminator","abstract":"<p>Returns the terminator instruction if this basic block is well formed or","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV6parentAA8FunctionCSgv":{"name":"parent","abstract":"<p>Returns the parent function of this basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV4nextACSgyF":{"name":"next()","abstract":"<p>Returns the basic block following this basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV8previousACSgyF":{"name":"previous()","abstract":"<p>Returns the basic block before this basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV12instructionss11AnySequenceVyAA11InstructionVGv":{"name":"instructions","abstract":"<p>Returns a sequence of the Instructions that make up this basic block.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV16removeFromParentyyF":{"name":"removeFromParent()","abstract":"<p>Removes this basic block from a function but keeps it alive.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV10moveBeforeyACF":{"name":"moveBefore(_:)","abstract":"<p>Moves this basic block before the given basic block.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV9moveAfteryACF":{"name":"moveAfter(_:)","abstract":"<p>Moves this basic block after the given basic block.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:4LLVM10BasicBlockV6deleteyyF":{"name":"delete()","abstract":"<p>Deletes the basic block from its containing function.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock/Address.html":{"name":"Address","abstract":"<p>An <code>Address</code> represents a function-relative address of a basic block for","parent_name":"BasicBlock"},"Structs/ArrayType.html#/s:4LLVM9ArrayTypeV07elementC0AA6IRType_pv":{"name":"elementType","abstract":"<p>The type of elements in this array.</p>","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:4LLVM9ArrayTypeV5countSiv":{"name":"count","abstract":"<p>The number of elements in this array.</p>","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:4LLVM9ArrayTypeVAcA6IRType_p07elementC0_Si5counttcfc":{"name":"init(elementType:count:)","abstract":"<p>Creates an array type from an underlying element type and count.</p>","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:4LLVM9ArrayTypeV8constantAA7IRValue_pSayAaE_pG_AA6IRType_p4typetFZ":{"name":"constant(_:type:)","abstract":"<p>Creates a constant array value from a list of IR values of a common type.</p>","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:4LLVM9ArrayTypeV8constantAA7IRValue_pSS6string_AA7ContextC2intFZ":{"name":"constant(string:in:)","abstract":"<p>Creates a constant, null terminated array value of UTF-8 bytes from","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:4LLVM9ArrayTypeV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"ArrayType"},"Structs/Alias.html#/s:4LLVM5AliasV02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Alias"},"Structs/Alias.html":{"name":"Alias","abstract":"<p>An <code>Alias</code> represents a global alias in an LLVM module - a new symbol and"},"Structs/ArrayType.html":{"name":"ArrayType","abstract":"<p><code>ArrayType</code> is a very simple derived type that arranges elements"},"Structs/BasicBlock.html":{"name":"BasicBlock","abstract":"<p>A <code>BasicBlock</code> represents a basic block in an LLVM IR program.  A basic"},"Structs/Call.html":{"name":"Call","abstract":"<p>Represents a simple function call.</p>"},"Structs/Invoke.html":{"name":"Invoke","abstract":"<p>Represents a function call that may transfer control to an exception handler.</p>"},"Structs/Constant.html":{"name":"Constant","abstract":"<p>A <code>Constant</code> represents a value initialized to a constant.  Constant values"},"Structs/FloatType.html":{"name":"FloatType","abstract":"<p><code>FloatType</code> enumerates representations of a floating value of a particular"},"Structs/Parameter.html":{"name":"Parameter","abstract":"<p>A <code>Parameter</code> represents an index into the parameters of a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Function.html\">Function</a></code>.</p>"},"Structs/FunctionType.html":{"name":"FunctionType","abstract":"<p><code>FunctionType</code> represents a function&rsquo;s type signature.  It consists of a"},"Structs/Global.html":{"name":"Global","abstract":"<p>A <code>Global</code> represents a region of memory allocated at compile time instead"},"Structs/Instruction.html":{"name":"Instruction","abstract":"<p>An <code>Instruction</code> represents an instruction residing in a basic block.</p>"},"Structs/TerminatorInstruction.html":{"name":"TerminatorInstruction","abstract":"<p>A <code>TerminatorInstruction</code> represents an instruction that terminates a"},"Structs/IntType.html":{"name":"IntType","abstract":"<p>The <code>IntType</code> represents an integral value of a specified bit width.</p>"},"Structs/LabelType.html":{"name":"LabelType","abstract":"<p><code>LabelType</code> represents code labels.</p>"},"Structs/MetadataType.html":{"name":"MetadataType","abstract":"<p>The <code>MetadataType</code> type represents embedded metadata. No derived types may"},"Structs/Section.html":{"name":"Section","abstract":"<p>A Section represents one of the binary sections in an object file.</p>"},"Structs/Symbol.html":{"name":"Symbol","abstract":"<p>A symbol is a top-level addressable entity in an object file.</p>"},"Structs/Relocation.html":{"name":"Relocation","abstract":"<p>A Relocation represents the contents of a relocated symbol in the dynamic"},"Structs/PhiNode.html":{"name":"PhiNode","abstract":"<p>A <code>PhiNode</code> object represents a PHI node.</p>"},"Structs/PointerType.html":{"name":"PointerType","abstract":"<p><code>PointerType</code> is used to specify memory locations. Pointers are commonly"},"Structs/StructType.html":{"name":"StructType","abstract":"<p><code>StructType</code> is used to represent a collection of data members together in"},"Structs/Switch.html":{"name":"Switch","abstract":"<p>A <code>Switch</code> represents a <code>switch</code> instruction.  A <code>switch</code> instruction"},"Structs/TokenType.html":{"name":"TokenType","abstract":"<p><code>TokenType</code> is used when a value is associated with an instruction but all"},"Structs/Use.html":{"name":"Use","abstract":"<p><code>Use</code> represents an iterator over the uses and users of a particular value"},"Structs/VectorType.html":{"name":"VectorType","abstract":"<p>A <code>VectorType</code> is a simple derived type that represents a vector of"},"Structs/VoidType.html":{"name":"VoidType","abstract":"<p>The <code>Void</code> type represents any value and has no size.</p>"},"Structs/X86MMXType.html":{"name":"X86MMXType","abstract":"<p><code>X86MMXType</code> represents a value held in an MMX register on an x86 machine.</p>"},"Protocols/IRValue.html#/s:4LLVM7IRValueP02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isAArgumentSbv":{"name":"isAArgument","abstract":"<p>Whether or not the underlying LLVM value is an <code>Argument</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isABasicBlockSbv":{"name":"isABasicBlock","abstract":"<p>Whether or not the underlying LLVM value is a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BasicBlock.html\">BasicBlock</a></code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE12isAInlineAsmSbv":{"name":"isAInlineAsm","abstract":"<p>Whether or not the underlying LLVM value is <code>InlineAsm</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE7isAUserSbv":{"name":"isAUser","abstract":"<p>Whether or not the underlying LLVM value is a <code>User</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isAConstantSbv":{"name":"isAConstant","abstract":"<p>Whether or not the underlying LLVM value is a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Constant.html\">Constant</a></code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE15isABlockAddressSbv":{"name":"isABlockAddress","abstract":"<p>Whether or not the underlying LLVM value is a <code>BlockAddress</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE24isAConstantAggregateZeroSbv":{"name":"isAConstantAggregateZero","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantAggregateZero</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE16isAConstantArraySbv":{"name":"isAConstantArray","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantArray</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE25isAConstantDataSequentialSbv":{"name":"isAConstantDataSequential","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantDataSequential</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE20isAConstantDataArraySbv":{"name":"isAConstantDataArray","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantDataArray</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE21isAConstantDataVectorSbv":{"name":"isAConstantDataVector","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantDataVector</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE15isAConstantExprSbv":{"name":"isAConstantExpr","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantExpr</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAConstantFPSbv":{"name":"isAConstantFP","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantFP</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE14isAConstantIntSbv":{"name":"isAConstantInt","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantInt</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE22isAConstantPointerNullSbv":{"name":"isAConstantPointerNull","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantPointerNull</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isAConstantStructSbv":{"name":"isAConstantStruct","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantStruct</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE20isAConstantTokenNoneSbv":{"name":"isAConstantTokenNone","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantTokenNone</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isAConstantVectorSbv":{"name":"isAConstantVector","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantVector</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE14isAGlobalValueSbv":{"name":"isAGlobalValue","abstract":"<p>Whether or not the underlying LLVM value is a <code>GlobalValue</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE14isAGlobalAliasSbv":{"name":"isAGlobalAlias","abstract":"<p>Whether or not the underlying LLVM value is a <code>GlobalAlias</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE15isAGlobalObjectSbv":{"name":"isAGlobalObject","abstract":"<p>Whether or not the underlying LLVM value is a <code>GlobalObject</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isAFunctionSbv":{"name":"isAFunction","abstract":"<p>Whether or not the underlying LLVM value is a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Function.html\">Function</a></code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isAGlobalVariableSbv":{"name":"isAGlobalVariable","abstract":"<p>Whether or not the underlying LLVM value is a <code>GlobalVariable</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAUndefValueSbv":{"name":"isAUndefValue","abstract":"<p>Whether or not the underlying LLVM value is an <code>UndefValue</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE14isAInstructionSbv":{"name":"isAInstruction","abstract":"<p>Whether or not the underlying LLVM value is an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Instruction.html\">Instruction</a></code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isABinaryOperatorSbv":{"name":"isABinaryOperator","abstract":"<p>Whether or not the underlying LLVM value is a <code>BinaryOperator</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isACallInstSbv":{"name":"isACallInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CallInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE16isAIntrinsicInstSbv":{"name":"isAIntrinsicInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>IntrinsicInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE19isADbgInfoIntrinsicSbv":{"name":"isADbgInfoIntrinsic","abstract":"<p>Whether or not the underlying LLVM value is a <code>DbgInfoIntrinsic</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isADbgDeclareInstSbv":{"name":"isADbgDeclareInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>DbgDeclareInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE15isAMemIntrinsicSbv":{"name":"isAMemIntrinsic","abstract":"<p>Whether or not the underlying LLVM value is a <code>MemIntrinsic</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAMemCpyInstSbv":{"name":"isAMemCpyInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>MemCpyInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE14isAMemMoveInstSbv":{"name":"isAMemMoveInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>MemMoveInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAMemSetInstSbv":{"name":"isAMemSetInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>MemSetInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE10isACmpInstSbv":{"name":"isACmpInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CmpInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isAFCmpInstSbv":{"name":"isAFCmpInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FCmpInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isAICmpInstSbv":{"name":"isAICmpInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>ICmpInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE21isAExtractElementInstSbv":{"name":"isAExtractElementInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>ExtractElementInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE20isAGetElementPtrInstSbv":{"name":"isAGetElementPtrInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>GetElementPtrInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE20isAInsertElementInstSbv":{"name":"isAInsertElementInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>InsertElementInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE18isAInsertValueInstSbv":{"name":"isAInsertValueInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>InsertValueInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isALandingPadInstSbv":{"name":"isALandingPadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>LandingPadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE10isAPHINodeSbv":{"name":"isAPHINode","abstract":"<p>Whether or not the underlying LLVM value is a <code>PHINode</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isASelectInstSbv":{"name":"isASelectInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>SelectInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE20isAShuffleVectorInstSbv":{"name":"isAShuffleVectorInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ShuffleVectorInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE12isAStoreInstSbv":{"name":"isAStoreInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>StoreInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isATerminatorInstSbv":{"name":"isATerminatorInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>TerminatorInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isABranchInstSbv":{"name":"isABranchInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>BranchInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isAIndirectBrInstSbv":{"name":"isAIndirectBrInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>IndirectBrInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAInvokeInstSbv":{"name":"isAInvokeInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>InvokeInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAReturnInstSbv":{"name":"isAReturnInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ReturnInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isASwitchInstSbv":{"name":"isASwitchInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>SwitchInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE18isAUnreachableInstSbv":{"name":"isAUnreachableInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>UnreachableInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAResumeInstSbv":{"name":"isAResumeInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ResumeInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE20isACleanupReturnInstSbv":{"name":"isACleanupReturnInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CleanupReturnInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE18isACatchReturnInstSbv":{"name":"isACatchReturnInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CatchReturnInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isAFuncletPadInstSbv":{"name":"isAFuncletPadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FuncletPadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE15isACatchPadInstSbv":{"name":"isACatchPadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CatchPadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE17isACleanupPadInstSbv":{"name":"isACleanupPadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CleanupPadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE19isAUnaryInstructionSbv":{"name":"isAUnaryInstruction","abstract":"<p>Whether or not the underlying LLVM value is a <code>UnaryInstruction</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAAllocaInstSbv":{"name":"isAAllocaInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>AllocaInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isACastInstSbv":{"name":"isACastInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CastInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE20isAAddrSpaceCastInstSbv":{"name":"isAAddrSpaceCastInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>AddrSpaceCastInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE14isABitCastInstSbv":{"name":"isABitCastInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>BitCastInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE12isAFPExtInstSbv":{"name":"isAFPExtInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FPExtInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAFPToSIInstSbv":{"name":"isAFPToSIInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FPToSIInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAFPToUIInstSbv":{"name":"isAFPToUIInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FPToUIInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE14isAFPTruncInstSbv":{"name":"isAFPTruncInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FPTruncInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE15isAIntToPtrInstSbv":{"name":"isAIntToPtrInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>IntToPtrInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE15isAPtrToIntInstSbv":{"name":"isAPtrToIntInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>PtrToIntInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isASExtInstSbv":{"name":"isASExtInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>SExtInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isASIToFPInstSbv":{"name":"isASIToFPInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>SIToFPInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE12isATruncInstSbv":{"name":"isATruncInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>TruncInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE13isAUIToFPInstSbv":{"name":"isAUIToFPInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>UIToFPInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isAZExtInstSbv":{"name":"isAZExtInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ZExtInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE19isAExtractValueInstSbv":{"name":"isAExtractValueInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ExtractValueInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE11isALoadInstSbv":{"name":"isALoadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>LoadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE12isAVAArgInstSbv":{"name":"isAVAArgInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>VAArgInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE4typeAA6IRType_pv":{"name":"type","abstract":"<p>Retrieves the type of this value.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE10isConstantSbv":{"name":"isConstant","abstract":"<p>Returns whether this value is a constant.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE7isUndefSbv":{"name":"isUndef","abstract":"<p>Returns whether this value has been initialized with the special <code>undef</code>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE4nameSSv":{"name":"name","abstract":"<p>Gets and sets the name for this value.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE8constGEPAaB_pSayAaB_pG7indices_tF":{"name":"constGEP(indices:)","abstract":"<p>Perform a GEP (Get Element Pointer) with this value as the base.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE14replaceAllUsesyAaB_p4with_tF":{"name":"replaceAllUses(with:)","abstract":"<p>Replaces all uses of this value with the specified value.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:4LLVM7IRValuePAAE4dumpyyF":{"name":"dump()","abstract":"<p>Dumps a representation of this value to stderr.</p>","parent_name":"IRValue"},"Protocols/IRType.html#/s:4LLVM6IRTypeP02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"IRType"},"Protocols/IRType.html#/s:4LLVM6IRTypePAAE4nullAA7IRValue_pyF":{"name":"null()","abstract":"<p>Returns the special <code>null</code> value for this type.</p>","parent_name":"IRType"},"Protocols/IRType.html#/s:4LLVM6IRTypePAAE5undefAA7IRValue_pyF":{"name":"undef()","abstract":"<p>Returns the special LLVM <code>undef</code> value for this type.</p>","parent_name":"IRType"},"Protocols/IRType.html#/s:4LLVM6IRTypePAAE16constPointerNullAA7IRValue_pyF":{"name":"constPointerNull()","abstract":"<p>Returns the special LLVM constant <code>null</code> pointer value for this type","parent_name":"IRType"},"Protocols/IRType.html#/s:4LLVM6IRTypePAAE7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this type</p>","parent_name":"IRType"},"Protocols/IRGlobal.html#/s:4LLVM8IRGlobalPAAE9alignmentSiv":{"name":"alignment","abstract":"<p>Retrieves the alignment of this value.</p>","parent_name":"IRGlobal"},"Protocols/IRGlobal.html#/s:4LLVM8IRGlobalPAAE7linkageAA7LinkageOv":{"name":"linkage","abstract":"<p>Retrieves the linkage information for this global.</p>","parent_name":"IRGlobal"},"Protocols/IRGlobal.html#/s:4LLVM8IRGlobalPAAE10visibilityAA10VisibilityOv":{"name":"visibility","abstract":"<p>Retrieves the visibility style for this global.</p>","parent_name":"IRGlobal"},"Protocols/IRGlobal.html#/s:4LLVM8IRGlobalPAAE12storageClassAA07StorageD0Ov":{"name":"storageClass","abstract":"<p>Retrieves the storage class for this global declaration.  For use with","parent_name":"IRGlobal"},"Protocols/IRGlobal.html#/s:4LLVM8IRGlobalPAAE18unnamedAddressKindAA07UnnameddE0Ov":{"name":"unnamedAddressKind","abstract":"<p>Retrieves an indicator for the significance of a global value&rsquo;s address.</p>","parent_name":"IRGlobal"},"Protocols/IRGlobal.html#/s:4LLVM8IRGlobalPAAE7sectionSSv":{"name":"section","abstract":"<p>Retrieves the section associated with the symbol that will eventually be","parent_name":"IRGlobal"},"Protocols.html#/s:4LLVM22ConstantRepresentationP":{"name":"ConstantRepresentation","abstract":"<p>A protocol to which the phantom types for a constant&rsquo;s representation conform.</p>"},"Protocols.html#/s:4LLVM31NumericalConstantRepresentationP":{"name":"NumericalConstantRepresentation","abstract":"<p>A protocol to which the phantom types for all numerical constants conform.</p>"},"Protocols.html#/s:4LLVM30IntegralConstantRepresentationP":{"name":"IntegralConstantRepresentation","abstract":"<p>A protocol to which the phantom types for integral constants conform.</p>"},"Protocols/IRGlobal.html":{"name":"IRGlobal","abstract":"<p>An <code>IRGlobal</code> is a value, alias, or function that exists at the top level of"},"Protocols/IRType.html":{"name":"IRType","abstract":"<p>An <code>IRType</code> is a type that is capable of lowering itself to an <code>LLVMTypeRef</code>"},"Protocols/IRValue.html":{"name":"IRValue","abstract":"<p>An <code>IRValue</code> is a type that is capable of lowering itself to an"},"Functions.html#/s:4LLVM010initializeA0yyF":{"name":"initializeLLVM()","abstract":"<p>initializer that calls LLVM initialization functions only once.</p>"},"Extensions/String.html#/s:SS4LLVME02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"String"},"Extensions/Bool.html#/s:Sb4LLVME02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Bool"},"Extensions/UInt64.html#/s:s6UInt64V4LLVME02asB0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt64"},"Extensions/UInt32.html#/s:s6UInt32V4LLVME02asB0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt32"},"Extensions/UInt16.html#/s:s6UInt16V4LLVME02asB0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt16"},"Extensions/UInt8.html#/s:s5UInt8V4LLVME02asB0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt8"},"Extensions/UInt.html#/s:Su4LLVME02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt"},"Extensions/Int64.html#/s:s5Int64V4LLVME02asB0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int64"},"Extensions/Int32.html#/s:s5Int32V4LLVME02asB0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int32"},"Extensions/Int16.html#/s:s5Int16V4LLVME02asB0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int16"},"Extensions/Int8.html#/s:s4Int8V4LLVME02asB0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int8"},"Extensions/Int.html#/s:Si4LLVME02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int"},"Extensions/LLVMValueRef.html#/s:s13OpaquePointerV4LLVME02asC0AByF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"LLVMValueRef"},"Extensions/LLVMValueRef.html":{"name":"LLVMValueRef"},"Extensions/Int.html":{"name":"Int"},"Extensions/Int8.html":{"name":"Int8"},"Extensions/Int16.html":{"name":"Int16"},"Extensions/Int32.html":{"name":"Int32"},"Extensions/Int64.html":{"name":"Int64"},"Extensions/UInt.html":{"name":"UInt"},"Extensions/UInt8.html":{"name":"UInt8"},"Extensions/UInt16.html":{"name":"UInt16"},"Extensions/UInt32.html":{"name":"UInt32"},"Extensions/UInt64.html":{"name":"UInt64"},"Extensions/Bool.html":{"name":"Bool"},"Extensions/String.html":{"name":"String"},"Enums/TargetMachineError.html#/s:4LLVM18TargetMachineErrorO12couldNotEmitACSS_AA15CodegenFileTypeOtcACmF":{"name":"couldNotEmit","abstract":"<p>The target machine failed to emit the specified file type.","parent_name":"TargetMachineError"},"Enums/TargetMachineError.html#/s:4LLVM18TargetMachineErrorO19couldNotEmitBitCodeA2CmF":{"name":"couldNotEmitBitCode","abstract":"<p>The target machine failed to emit the bitcode for this module.</p>","parent_name":"TargetMachineError"},"Enums/TargetMachineError.html#/s:4LLVM18TargetMachineErrorO13invalidTripleACSScACmF":{"name":"invalidTriple","abstract":"<p>The specified target triple was invalid.</p>","parent_name":"TargetMachineError"},"Enums/TargetMachineError.html#/s:4LLVM18TargetMachineErrorO014couldNotCreateB0ACSS_SStcACmF":{"name":"couldNotCreateTarget","abstract":"<p>The Target is could not be created.","parent_name":"TargetMachineError"},"Enums/TargetMachineError.html#/s:s23CustomStringConvertibleP11descriptionSSv":{"name":"description","parent_name":"TargetMachineError"},"Enums/CodegenFileType.html#/s:4LLVM15CodegenFileTypeO6objectA2CmF":{"name":"object","abstract":"<p>An object file (.o).</p>","parent_name":"CodegenFileType"},"Enums/CodegenFileType.html#/s:4LLVM15CodegenFileTypeO8assemblyA2CmF":{"name":"assembly","abstract":"<p>An assembly file (.asm).</p>","parent_name":"CodegenFileType"},"Enums/CodegenFileType.html#/s:4LLVM15CodegenFileTypeO7bitCodeA2CmF":{"name":"bitCode","abstract":"<p>An LLVM Bitcode file (.bc).</p>","parent_name":"CodegenFileType"},"Enums/CodegenFileType.html#/s:4LLVM15CodegenFileTypeO02asA0SC011LLVMCodeGencD0VyF":{"name":"asLLVM()","abstract":"<p>Returns the underlying <code>LLVMCodeGenFileType</code> associated with this file","parent_name":"CodegenFileType"},"Enums/CodeModel.html#/s:4LLVM9CodeModelO7defaultA2CmF":{"name":"default","abstract":"<p>Generated code will assume the default for a particular target architecture.</p>","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:4LLVM9CodeModelO10jitDefaultA2CmF":{"name":"jitDefault","abstract":"<p>Generated code will assume the default for JITed code on a particular","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:4LLVM9CodeModelO5smallA2CmF":{"name":"small","abstract":"<p>The virtual address of code executed is known at link time. Additionally","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:4LLVM9CodeModelO6kernelA2CmF":{"name":"kernel","abstract":"<p>The kernel of an operating system is usually rather small but runs in the","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:4LLVM9CodeModelO6mediumA2CmF":{"name":"medium","abstract":"<p>In the medium model, the data section is split into two parts — the data","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:4LLVM9CodeModelO5largeA2CmF":{"name":"large","abstract":"<p>The large code model makes no assumptions about addresses and sizes of","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:4LLVM9CodeModelO02asA0SC08LLVMCodeC0VyF":{"name":"asLLVM()","abstract":"<p>Returns the underlying <code>LLVMCodeModel</code> associated with this","parent_name":"CodeModel"},"Enums/RelocMode.html#/s:4LLVM9RelocModeO7defaultA2CmF":{"name":"default","abstract":"<p>Generated code will assume the default for a particular target architecture.</p>","parent_name":"RelocMode"},"Enums/RelocMode.html#/s:4LLVM9RelocModeO6staticA2CmF":{"name":"static","abstract":"<p>Generated code will exist at static offsets.</p>","parent_name":"RelocMode"},"Enums/RelocMode.html#/s:4LLVM9RelocModeO3picA2CmF":{"name":"pic","abstract":"<p>Generated code will be Position-Independent.</p>","parent_name":"RelocMode"},"Enums/RelocMode.html#/s:4LLVM9RelocModeO12dynamicNoPICA2CmF":{"name":"dynamicNoPIC","abstract":"<p>Generated code will not be Position-Independent and may be used in static","parent_name":"RelocMode"},"Enums/RelocMode.html#/s:4LLVM9RelocModeO02asA0SC09LLVMRelocC0VyF":{"name":"asLLVM()","abstract":"<p>Returns the underlying <code>LLVMRelocMode</code> associated with this","parent_name":"RelocMode"},"Enums/CodeGenOptLevel.html#/s:4LLVM15CodeGenOptLevelO4noneA2CmF":{"name":"none","abstract":"<p>Disable as many optimizations as possible. This doesn&rsquo;t completely","parent_name":"CodeGenOptLevel"},"Enums/CodeGenOptLevel.html#/s:4LLVM15CodeGenOptLevelO4lessA2CmF":{"name":"less","abstract":"<p>Optimize quickly without destroying debuggability.</p>","parent_name":"CodeGenOptLevel"},"Enums/CodeGenOptLevel.html#/s:4LLVM15CodeGenOptLevelO7defaultA2CmF":{"name":"default","abstract":"<p>Optimize for fast execution as much as possible without triggering","parent_name":"CodeGenOptLevel"},"Enums/CodeGenOptLevel.html#/s:4LLVM15CodeGenOptLevelO10aggressiveA2CmF":{"name":"aggressive","abstract":"<p>Optimize for fast execution as much as possible.</p>","parent_name":"CodeGenOptLevel"},"Enums/CodeGenOptLevel.html#/s:4LLVM15CodeGenOptLevelO02asA0SC08LLVMCodecdE0VyF":{"name":"asLLVM()","abstract":"<p>Returns the underlying <code>LLVMCodeGenOptLevel</code> associated with this","parent_name":"CodeGenOptLevel"},"Enums/ByteOrder.html#/s:4LLVM9ByteOrderO12littleEndianA2CmF":{"name":"littleEndian","abstract":"<p>Little-endian byte order. In a little-endian platform, the <em>least</em>","parent_name":"ByteOrder"},"Enums/ByteOrder.html#/s:4LLVM9ByteOrderO9bigEndianA2CmF":{"name":"bigEndian","abstract":"<p>Big-endian byte order. In a big-endian platform, the <em>most</em>","parent_name":"ByteOrder"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO13aggressiveDCEA2CmF":{"name":"aggressiveDCE","abstract":"<p>This pass uses the SSA based Aggressive DCE algorithm.  This algorithm","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO14bitTrackingDCEA2CmF":{"name":"bitTrackingDCE","abstract":"<p>This pass uses a bit-tracking DCE algorithm in order to remove","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO24alignmentFromAssumptionsA2CmF":{"name":"alignmentFromAssumptions","abstract":"<p>Use assume intrinsics to set load/store alignments.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO17cfgSimplificationA2CmF":{"name":"cfgSimplification","abstract":"<p>Merge basic blocks, eliminate unreachable blocks, simplify terminator","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO20deadStoreEliminationA2CmF":{"name":"deadStoreElimination","abstract":"<p>This pass deletes stores that are post-dominated by must-aliased stores","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO10scalarizerA2CmF":{"name":"scalarizer","abstract":"<p>Converts vector operations into scalar operations.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO21mergedLoadStoreMotionA2CmF":{"name":"mergedLoadStoreMotion","abstract":"<p>This pass merges loads and stores in diamonds. Loads are hoisted into the","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO3gvnA2CmF":{"name":"gvn","abstract":"<p>This pass performs global value numbering and redundant load elimination","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO14indVarSimplifyA2CmF":{"name":"indVarSimplify","abstract":"<p>Transform induction variables in a program to all use a single canonical","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO20instructionCombiningA2CmF":{"name":"instructionCombining","abstract":"<p>Combine instructions to form fewer, simple instructions. This pass does","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO13jumpThreadingA2CmF":{"name":"jumpThreading","abstract":"<p>Thread control through mult-pred/multi-succ blocks where some preds","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO4licmA2CmF":{"name":"licm","abstract":"<p>This pass is a loop invariant code motion and memory promotion pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO12loopDeletionA2CmF":{"name":"loopDeletion","abstract":"<p>This pass performs DCE of non-infinite loops that it can prove are dead.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO9loopIdiomA2CmF":{"name":"loopIdiom","abstract":"<p>This pass recognizes and replaces idioms in loops.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO10loopRotateA2CmF":{"name":"loopRotate","abstract":"<p>This pass is a simple loop rotating pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO10loopRerollA2CmF":{"name":"loopReroll","abstract":"<p>This pass is a simple loop rerolling pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO10loopUnrollA2CmF":{"name":"loopUnroll","abstract":"<p>This pass is a simple loop unrolling pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO12loopUnswitchA2CmF":{"name":"loopUnswitch","abstract":"<p>This pass is a simple loop unswitching pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO9memCpyOptA2CmF":{"name":"memCpyOpt","abstract":"<p>This pass performs optimizations related to eliminating <code>memcpy</code> calls","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO23partiallyInlineLibCallsA2CmF":{"name":"partiallyInlineLibCalls","abstract":"<p>Tries to inline the fast path of library calls such as sqrt.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO11lowerSwitchA2CmF":{"name":"lowerSwitch","abstract":"<p>This pass converts SwitchInst instructions into a sequence of chained","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO23promoteMemoryToRegisterA2CmF":{"name":"promoteMemoryToRegister","abstract":"<p>This pass is used to promote memory references to","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO11reassociateA2CmF":{"name":"reassociate","abstract":"<p>This pass reassociates commutative expressions in an order that","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO4sccpA2CmF":{"name":"sccp","abstract":"<p>Sparse conditional constant propagation.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO20scalarReplAggregatesA2CmF":{"name":"scalarReplAggregates","abstract":"<p>Replace aggregates or pieces of aggregates with scalar SSA values.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO23scalarReplAggregatesSSAA2CmF":{"name":"scalarReplAggregatesSSA","abstract":"<p>Replace aggregates or pieces of aggregates with scalar SSA values.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO16simplifyLibCallsA2CmF":{"name":"simplifyLibCalls","abstract":"<p>Tries to inline the fast path of library calls such as sqrt.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO19tailCallEliminationA2CmF":{"name":"tailCallElimination","abstract":"<p>This pass eliminates call instructions to the current function which occur","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO19constantPropagationA2CmF":{"name":"constantPropagation","abstract":"<p>A worklist driven constant propagation pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO22demoteMemoryToRegisterA2CmF":{"name":"demoteMemoryToRegister","abstract":"<p>This pass is used to demote registers to memory references. It basically","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO26correlatedValuePropagationA2CmF":{"name":"correlatedValuePropagation","abstract":"<p>Propagate CFG-derived value information</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO8earlyCSEA2CmF":{"name":"earlyCSE","abstract":"<p>This pass performs a simple and fast CSE pass over the dominator tree.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO20lowerExpectIntrinsicA2CmF":{"name":"lowerExpectIntrinsic","abstract":"<p>Removes <code>llvm.expect</code> intrinsics and creates <q>block_weights</q> metadata.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO22typeBasedAliasAnalysisA2CmF":{"name":"typeBasedAliasAnalysis","abstract":"<p>Adds metadata to LLVM IR types and performs metadata-based TBAA.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO15scopedNoAliasAAA2CmF":{"name":"scopedNoAliasAA","abstract":"<p>Adds metadata to LLVM IR types and performs metadata-based scoped no-alias","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO18basicAliasAnalysisA2CmF":{"name":"basicAliasAnalysis","abstract":"<p>LLVM&rsquo;s primary stateless and local alias analysis.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO8verifierA2CmF":{"name":"verifier","abstract":"<p>Runs the LLVM IR Verifier to sanity check the results of passes.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO13alwaysInlinerA2CmF":{"name":"alwaysInliner","abstract":"<p>A pass to inline and remove functions marked as <q>always_inline</q>.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO17argumentPromotionA2CmF":{"name":"argumentPromotion","abstract":"<p>This pass promotes <q>by reference</q> arguments to be passed by value if the","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO13constantMergeA2CmF":{"name":"constantMerge","abstract":"<p>This function returns a new pass that merges duplicate global constants","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO18deadArgEliminationA2CmF":{"name":"deadArgElimination","abstract":"<p>This pass removes arguments from functions which are not used by the body","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO13functionAttrsA2CmF":{"name":"functionAttrs","abstract":"<p>This pass walks SCCs of the call graph in RPO to deduce and propagate","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO16functionInliningA2CmF":{"name":"functionInlining","abstract":"<p>Uses a heuristic to inline direct function calls to small functions.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO9globalDCEA2CmF":{"name":"globalDCE","abstract":"<p>This transform is designed to eliminate unreachable internal globals","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO15globalOptimizerA2CmF":{"name":"globalOptimizer","abstract":"<p>This function returns a new pass that optimizes non-address taken internal","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO21ipConstantPropagationA2CmF":{"name":"ipConstantPropagation","abstract":"<p>This pass propagates constants from call sites into the bodies of","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO5ipsccA2CmF":{"name":"ipscc","abstract":"<p>This pass propagates constants from call sites into the bodies of","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO7pruneEHA2CmF":{"name":"pruneEH","abstract":"<p>Return a new pass object which transforms invoke instructions into calls,","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO19stripDeadPrototypesA2CmF":{"name":"stripDeadPrototypes","abstract":"<p>This pass removes any function declarations (prototypes) that are not used.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO12stripSymbolsA2CmF":{"name":"stripSymbols","abstract":"<p>These functions removes symbols from functions and modules without","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO13loopVectorizeA2CmF":{"name":"loopVectorize","abstract":"<p>Performs a loop vectorization pass to widen instructions in loops to","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:4LLVM12FunctionPassO12slpVectorizeA2CmF":{"name":"slpVectorize","abstract":"<p>This pass performs a superword-level parallelism pass to combine","parent_name":"FunctionPass"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO5truncA2EmF":{"name":"trunc","abstract":"<p>The <code>trunc</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO4zextA2EmF":{"name":"zext","abstract":"<p>The <code>zext</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO4sextA2EmF":{"name":"sext","abstract":"<p>The <code>sext</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO6fpToUIA2EmF":{"name":"fpToUI","abstract":"<p>The <code>fpToUI</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO6fpToSIA2EmF":{"name":"fpToSI","abstract":"<p>The <code>fpToSI</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO6uiToFPA2EmF":{"name":"uiToFP","abstract":"<p>The <code>uiToFP</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO6siToFPA2EmF":{"name":"siToFP","abstract":"<p>The <code>siToFP</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO7fpTruncA2EmF":{"name":"fpTrunc","abstract":"<p>The <code>fpTrunc</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO5fpextA2EmF":{"name":"fpext","abstract":"<p>The <code>fpext</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO8ptrToIntA2EmF":{"name":"ptrToInt","abstract":"<p>The <code>ptrToInt</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO8intToPtrA2EmF":{"name":"intToPtr","abstract":"<p>The <code>intToPtr</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO03bitD0A2EmF":{"name":"bitCast","abstract":"<p>The <code>bitCast</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO09addrSpaceD0A2EmF":{"name":"addrSpaceCast","abstract":"<p>The <code>addrSpaceCast</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:4LLVM6OpCodeO4CastO4llvmSC10LLVMOpcodeVv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMOpcode</code>.</p>","parent_name":"Cast"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO3addA2EmF":{"name":"add","abstract":"<p>The <code>add</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4faddA2EmF":{"name":"fadd","abstract":"<p>The <code>fadd</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO3subA2EmF":{"name":"sub","abstract":"<p>The <code>sub</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4fsubA2EmF":{"name":"fsub","abstract":"<p>The <code>fsub</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO3mulA2EmF":{"name":"mul","abstract":"<p>The <code>mul</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4fmulA2EmF":{"name":"fmul","abstract":"<p>The <code>fmul</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4udivA2EmF":{"name":"udiv","abstract":"<p>The <code>udiv</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4sdivA2EmF":{"name":"sdiv","abstract":"<p>The <code>sdiv</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4fdivA2EmF":{"name":"fdiv","abstract":"<p>The <code>fdiv</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4uremA2EmF":{"name":"urem","abstract":"<p>The <code>urem</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4sremA2EmF":{"name":"srem","abstract":"<p>The <code>srem</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4fremA2EmF":{"name":"frem","abstract":"<p>The <code>frem</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO3shlA2EmF":{"name":"shl","abstract":"<p>The <code>shl</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4lshrA2EmF":{"name":"lshr","abstract":"<p>The <code>lshr</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4ashrA2EmF":{"name":"ashr","abstract":"<p>The <code>ashr</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO3andA2EmF":{"name":"and","abstract":"<p>The <code>and</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO2orA2EmF":{"name":"or","abstract":"<p>The <code>or</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO3xorA2EmF":{"name":"xor","abstract":"<p>The <code>xor</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:4LLVM6OpCodeO6BinaryO4llvmSC10LLVMOpcodeVv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMOpcode</code>.</p>","parent_name":"Binary"},"Enums/OpCode.html#/s:4LLVM6OpCodeO3retA2CmF":{"name":"ret","abstract":"<p>The opcode for the <code>ret</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO2brA2CmF":{"name":"br","abstract":"<p>The opcode for the <code>br</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6switchA2CmF":{"name":"switch","abstract":"<p>The opcode for the <code>switch</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO10indirectBrA2CmF":{"name":"indirectBr","abstract":"<p>The opcode for the <code>indirectBr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6invokeA2CmF":{"name":"invoke","abstract":"<p>The opcode for the <code>invoke</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO11unreachableA2CmF":{"name":"unreachable","abstract":"<p>The opcode for the <code>unreachable</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO3addA2CmF":{"name":"add","abstract":"<p>The opcode for the <code>add</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4faddA2CmF":{"name":"fadd","abstract":"<p>The opcode for the <code>fadd</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO3subA2CmF":{"name":"sub","abstract":"<p>The opcode for the <code>sub</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4fsubA2CmF":{"name":"fsub","abstract":"<p>The opcode for the <code>fsub</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO3mulA2CmF":{"name":"mul","abstract":"<p>The opcode for the <code>mul</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4fmulA2CmF":{"name":"fmul","abstract":"<p>The opcode for the <code>fmul</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4udivA2CmF":{"name":"udiv","abstract":"<p>The opcode for the <code>udiv</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4sdivA2CmF":{"name":"sdiv","abstract":"<p>The opcode for the <code>sdiv</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4fdivA2CmF":{"name":"fdiv","abstract":"<p>The opcode for the <code>fdiv</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4uremA2CmF":{"name":"urem","abstract":"<p>The opcode for the <code>urem</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4sremA2CmF":{"name":"srem","abstract":"<p>The opcode for the <code>srem</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4fremA2CmF":{"name":"frem","abstract":"<p>The opcode for the <code>frem</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO3shlA2CmF":{"name":"shl","abstract":"<p>The opcode for the <code>shl</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4lshrA2CmF":{"name":"lshr","abstract":"<p>The opcode for the <code>lshr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4ashrA2CmF":{"name":"ashr","abstract":"<p>The opcode for the <code>ashr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO3andA2CmF":{"name":"and","abstract":"<p>The opcode for the <code>and</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO2orA2CmF":{"name":"or","abstract":"<p>The opcode for the <code>or</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO3xorA2CmF":{"name":"xor","abstract":"<p>The opcode for the <code>xor</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6allocaA2CmF":{"name":"alloca","abstract":"<p>The opcode for the <code>alloca</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4loadA2CmF":{"name":"load","abstract":"<p>The opcode for the <code>load</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO5storeA2CmF":{"name":"store","abstract":"<p>The opcode for the <code>store</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO13getElementPtrA2CmF":{"name":"getElementPtr","abstract":"<p>The opcode for the <code>getElementPtr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO5truncA2CmF":{"name":"trunc","abstract":"<p>The opcode for the <code>trunc</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4zextA2CmF":{"name":"zext","abstract":"<p>The opcode for the <code>zext</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4sextA2CmF":{"name":"sext","abstract":"<p>The opcode for the <code>sext</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6fpToUIA2CmF":{"name":"fpToUI","abstract":"<p>The opcode for the <code>fpToUI</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6fpToSIA2CmF":{"name":"fpToSI","abstract":"<p>The opcode for the <code>fpToSI</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6uiToFPA2CmF":{"name":"uiToFP","abstract":"<p>The opcode for the <code>uiToFP</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6siToFPA2CmF":{"name":"siToFP","abstract":"<p>The opcode for the <code>siToFP</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO7fpTruncA2CmF":{"name":"fpTrunc","abstract":"<p>The opcode for the <code>fpTrunc</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO5fpExtA2CmF":{"name":"fpExt","abstract":"<p>The opcode for the <code>fpExt</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO8ptrToIntA2CmF":{"name":"ptrToInt","abstract":"<p>The opcode for the <code>ptrToInt</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO8intToPtrA2CmF":{"name":"intToPtr","abstract":"<p>The opcode for the <code>intToPtr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO7bitCastA2CmF":{"name":"bitCast","abstract":"<p>The opcode for the <code>bitCast</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO13addrSpaceCastA2CmF":{"name":"addrSpaceCast","abstract":"<p>The opcode for the <code>addrSpaceCast</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4icmpA2CmF":{"name":"icmp","abstract":"<p>The opcode for the <code>icmp</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4fcmpA2CmF":{"name":"fcmp","abstract":"<p>The opcode for the <code>fcmp</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO3phiA2CmF":{"name":"phi","abstract":"<p>The opcode for the <code>PHI</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO4callA2CmF":{"name":"call","abstract":"<p>The opcode for the <code>call</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6selectA2CmF":{"name":"select","abstract":"<p>The opcode for the <code>select</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO7userOp1A2CmF":{"name":"userOp1","abstract":"<p>The opcode for the <code>userOp1</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO7userOp2A2CmF":{"name":"userOp2","abstract":"<p>The opcode for the <code>userOp2</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO5vaArgA2CmF":{"name":"vaArg","abstract":"<p>The opcode for the <code>vaArg</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO14extractElementA2CmF":{"name":"extractElement","abstract":"<p>The opcode for the <code>extractElement</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO13insertElementA2CmF":{"name":"insertElement","abstract":"<p>The opcode for the <code>insertElement</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO13shuffleVectorA2CmF":{"name":"shuffleVector","abstract":"<p>The opcode for the <code>shuffleVector</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO12extractValueA2CmF":{"name":"extractValue","abstract":"<p>The opcode for the <code>extractValue</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO11insertValueA2CmF":{"name":"insertValue","abstract":"<p>The opcode for the <code>insertValue</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO5fenceA2CmF":{"name":"fence","abstract":"<p>The opcode for the <code>fence</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO13atomicCmpXchgA2CmF":{"name":"atomicCmpXchg","abstract":"<p>The opcode for the <code>atomicCmpXchg</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO9atomicRMWA2CmF":{"name":"atomicRMW","abstract":"<p>The opcode for the <code>atomicRMW</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO6resumeA2CmF":{"name":"resume","abstract":"<p>The opcode for the <code>resume</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO10landingPadA2CmF":{"name":"landingPad","abstract":"<p>The opcode for the <code>landingPad</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO10cleanupRetA2CmF":{"name":"cleanupRet","abstract":"<p>The opcode for the <code>cleanupRet</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO8catchRetA2CmF":{"name":"catchRet","abstract":"<p>The opcode for the <code>catchRet</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO8catchPadA2CmF":{"name":"catchPad","abstract":"<p>The opcode for the <code>catchPad</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO10cleanupPadA2CmF":{"name":"cleanupPad","abstract":"<p>The opcode for the <code>cleanupPad</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:4LLVM6OpCodeO11catchSwitchA2CmF":{"name":"catchSwitch","abstract":"<p>The opcode for the <code>catchSwitch</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode/Binary.html":{"name":"Binary","abstract":"<p><code>BinaryOperation</code> enumerates the subset of opcodes that are binary operations.</p>","parent_name":"OpCode"},"Enums/OpCode/Cast.html":{"name":"Cast","abstract":"<p><code>CastOperation</code> enumerates the subset of opcodes that are cast operations.</p>","parent_name":"OpCode"},"Enums/ModuleError.html#/s:4LLVM11ModuleErrorO22didNotPassVerificationACSScACmF":{"name":"didNotPassVerification","abstract":"<p>Thrown when a module does not pass the module verification process.","parent_name":"ModuleError"},"Enums/ModuleError.html#/s:4LLVM11ModuleErrorO13couldNotPrintACSS4path_SS5errortcACmF":{"name":"couldNotPrint","abstract":"<p>Thrown when a module cannot be printed at a given path.  Provides the","parent_name":"ModuleError"},"Enums/ModuleError.html#/s:4LLVM11ModuleErrorO19couldNotEmitBitCodeACSS4path_tcACmF":{"name":"couldNotEmitBitCode","abstract":"<p>Thrown when a module cannot emit bitcode because it contains erroneous","parent_name":"ModuleError"},"Enums/ModuleError.html#/s:s23CustomStringConvertibleP11descriptionSSv":{"name":"description","parent_name":"ModuleError"},"Enums/MemoryBufferError.html#/s:4LLVM17MemoryBufferErrorO14couldNotCreateACSScACmF":{"name":"couldNotCreate","abstract":"<p>The MemoryBuffer failed to be initialized for a specific reason.</p>","parent_name":"MemoryBufferError"},"Enums/UnnamedAddressKind.html#/s:4LLVM18UnnamedAddressKindO4noneA2CmF":{"name":"none","abstract":"<p>Indicates that the address of this global value is significant","parent_name":"UnnamedAddressKind"},"Enums/UnnamedAddressKind.html#/s:4LLVM18UnnamedAddressKindO6globalA2CmF":{"name":"global","abstract":"<p>Indicates that the address of this global value is not significant to the","parent_name":"UnnamedAddressKind"},"Enums/StorageClass.html#/s:4LLVM12StorageClassO7defaultA2CmF":{"name":"default","abstract":"<p>The default storage class for declarations is neither imported nor","parent_name":"StorageClass"},"Enums/StorageClass.html#/s:4LLVM12StorageClassO9dllImportA2CmF":{"name":"dllImport","abstract":"<p>The storage class that guarantees the existence of a function in a DLL.  </p>","parent_name":"StorageClass"},"Enums/StorageClass.html#/s:4LLVM12StorageClassO9dllExportA2CmF":{"name":"dllExport","abstract":"<p>The storage class for symbols that should be exposed outside of this DLL.</p>","parent_name":"StorageClass"},"Enums/StorageClass.html#/s:4LLVM12StorageClassO4llvmSC014LLVMDLLStorageC0Vv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMDLLStorageClass</code>.</p>","parent_name":"StorageClass"},"Enums/Linkage.html#/s:4LLVM7LinkageO8externalA2CmF":{"name":"external","abstract":"<p>Externally visible function.  This is the default linkage.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO19availableExternallyA2CmF":{"name":"availableExternally","abstract":"<p>Available for inspection, not emission.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO11linkOnceAnyA2CmF":{"name":"linkOnceAny","abstract":"<p>Keep one copy of function when linking.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO11linkOnceODRA2CmF":{"name":"linkOnceODR","abstract":"<p>Keep one copy of function when linking but enable inlining and","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO7weakAnyA2CmF":{"name":"weakAny","abstract":"<p>Keep one copy of function when linking (weak).</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO7weakODRA2CmF":{"name":"weakODR","abstract":"<p>Keep one copy of function when linking but apply <q>One Definition Rule</q>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO9appendingA2CmF":{"name":"appending","abstract":"<p>Special purpose, only applies to global arrays.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO8internalA2CmF":{"name":"internal","abstract":"<p>Rename collisions when linking (static functions).</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO7privateA2CmF":{"name":"private","abstract":"<p>Like <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Linkage.html#/s:4LLVM7LinkageO8internalA2CmF\">.internal</a></code>, but omit from symbol table.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO12externalWeakA2CmF":{"name":"externalWeak","abstract":"<p>Keep one copy of the function when linking, but apply ELF semantics.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO6commonA2CmF":{"name":"common","abstract":"<p>Tentative definitions.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:4LLVM7LinkageO4llvmSC11LLVMLinkageVv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMLinkage</code>.</p>","parent_name":"Linkage"},"Enums/Visibility.html#/s:4LLVM10VisibilityO7defaultA2CmF":{"name":"default","abstract":"<p>On targets that use the ELF object file format, default visibility means","parent_name":"Visibility"},"Enums/Visibility.html#/s:4LLVM10VisibilityO6hiddenA2CmF":{"name":"hidden","abstract":"<p>Two declarations of an object with hidden visibility refer to the same","parent_name":"Visibility"},"Enums/Visibility.html#/s:4LLVM10VisibilityO9protectedA2CmF":{"name":"protected","abstract":"<p>On ELF, protected visibility indicates that the symbol will be placed in","parent_name":"Visibility"},"Enums/Visibility.html#/s:4LLVM10VisibilityO4llvmSC14LLVMVisibilityVv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMLinkage</code>.</p>","parent_name":"Visibility"},"Enums/JITError.html#/s:4LLVM8JITErrorO18couldNotInitializeACSScACmF":{"name":"couldNotInitialize","abstract":"<p>The JIT was unable to be initialized. A message is provided explaining","parent_name":"JITError"},"Enums/JITError.html#/s:4LLVM8JITErrorO20couldNotRemoveModuleAcA0F0C_SStcACmF":{"name":"couldNotRemoveModule","abstract":"<p>The JIT was unable to remove the provided module. A message is provided","parent_name":"JITError"},"Enums/JITError.html#/s:4LLVM8JITErrorO11descriptionSSv":{"name":"description","abstract":"<p>A human-readable description of the error.</p>","parent_name":"JITError"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO4xchgA2CmF":{"name":"xchg","abstract":"<p>Set the new value and return the one old</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO3addA2CmF":{"name":"add","abstract":"<p>Add a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO3subA2CmF":{"name":"sub","abstract":"<p>Subtract a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO3andA2CmF":{"name":"and","abstract":"<p>And a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO4nandA2CmF":{"name":"nand","abstract":"<p>Not-And a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO2orA2CmF":{"name":"or","abstract":"<p>OR a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO3xorA2CmF":{"name":"xor","abstract":"<p>Xor a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO3maxA2CmF":{"name":"max","abstract":"<p>Sets the value if it&rsquo;s greater than the original using a signed comparison","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO3minA2CmF":{"name":"min","abstract":"<p>Sets the value if it&rsquo;s Smaller than the original using a signed comparison","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO4umaxA2CmF":{"name":"umax","abstract":"<p>Sets the value if it&rsquo;s greater than the original using an unsigned","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO4uminA2CmF":{"name":"umin","abstract":"<p>Sets the value if it&rsquo;s greater than the original using an unsigned","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:4LLVM30AtomicReadModifyWriteOperationO4llvmSC18LLVMAtomicRMWBinOpVv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMAtomicRMWBinOp</code>.</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO03notB0A2CmF":{"name":"notAtomic","abstract":"<p>A load or store which is not atomic</p>","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO9unorderedA2CmF":{"name":"unordered","abstract":"<p>Lowest level of atomicity, guarantees somewhat sane results, lock free.</p>","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO9monotonicA2CmF":{"name":"monotonic","abstract":"<p>Guarantees that if you take all the operations affecting a specific","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO7acquireA2CmF":{"name":"acquire","abstract":"<p>Acquire provides a barrier of the sort necessary to acquire a lock to","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO7releaseA2CmF":{"name":"release","abstract":"<p>Release is similar to Acquire, but with a barrier of the sort necessary to","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO14acquireReleaseA2CmF":{"name":"acquireRelease","abstract":"<p>provides both an Acquire and a Release barrier (for fences and operations","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO22sequentiallyConsistentA2CmF":{"name":"sequentiallyConsistent","abstract":"<p>Provides Acquire semantics for loads and Release semantics for stores.</p>","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO1loiSbAC_ACtFZ":{"name":"<(_:_:)","abstract":"<p>Returns whether the left atomic ordering is strictly weaker than the","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:4LLVM14AtomicOrderingO4llvmSC010LLVMAtomicC0Vv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMAtomicOrdering</code>.</p>","parent_name":"AtomicOrdering"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO5falseA2CmF":{"name":"false","abstract":"<p>No comparison, always returns <code>false</code>.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO12orderedEqualA2CmF":{"name":"orderedEqual","abstract":"<p>Ordered and equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO18orderedGreaterThanA2CmF":{"name":"orderedGreaterThan","abstract":"<p>Ordered greater than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO25orderedGreaterThanOrEqualA2CmF":{"name":"orderedGreaterThanOrEqual","abstract":"<p>Ordered greater than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO15orderedLessThanA2CmF":{"name":"orderedLessThan","abstract":"<p>Ordered less than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO22orderedLessThanOrEqualA2CmF":{"name":"orderedLessThanOrEqual","abstract":"<p>Ordered less than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO15orderedNotEqualA2CmF":{"name":"orderedNotEqual","abstract":"<p>Ordered and not equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO7orderedA2CmF":{"name":"ordered","abstract":"<p>Ordered (no nans).</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO9unorderedA2CmF":{"name":"unordered","abstract":"<p>Unordered (either nans).</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO14unorderedEqualA2CmF":{"name":"unorderedEqual","abstract":"<p>Unordered or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO20unorderedGreaterThanA2CmF":{"name":"unorderedGreaterThan","abstract":"<p>Unordered or greater than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO27unorderedGreaterThanOrEqualA2CmF":{"name":"unorderedGreaterThanOrEqual","abstract":"<p>Unordered or greater than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO17unorderedLessThanA2CmF":{"name":"unorderedLessThan","abstract":"<p>Unordered or less than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO24unorderedLessThanOrEqualA2CmF":{"name":"unorderedLessThanOrEqual","abstract":"<p>Unordered or less than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO17unorderedNotEqualA2CmF":{"name":"unorderedNotEqual","abstract":"<p>Unordered or not equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO4trueA2CmF":{"name":"true","abstract":"<p>No comparison, always returns <code>true</code>.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:4LLVM13RealPredicateO4llvmSC08LLVMRealC0Vv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMRealPredicate</code>.</p>","parent_name":"RealPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO5equalA2CmF":{"name":"equal","abstract":"<p>Yields <code>true</code> if the operands are equal, false otherwise without sign","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO8notEqualA2CmF":{"name":"notEqual","abstract":"<p>Yields <code>true</code> if the operands are unequal, false otherwise without sign","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO19unsignedGreaterThanA2CmF":{"name":"unsignedGreaterThan","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO26unsignedGreaterThanOrEqualA2CmF":{"name":"unsignedGreaterThanOrEqual","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO16unsignedLessThanA2CmF":{"name":"unsignedLessThan","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO23unsignedLessThanOrEqualA2CmF":{"name":"unsignedLessThanOrEqual","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO17signedGreaterThanA2CmF":{"name":"signedGreaterThan","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO24signedGreaterThanOrEqualA2CmF":{"name":"signedGreaterThanOrEqual","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO14signedLessThanA2CmF":{"name":"signedLessThan","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO21signedLessThanOrEqualA2CmF":{"name":"signedLessThanOrEqual","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:4LLVM12IntPredicateO4llvmSC07LLVMIntC0Vv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMIntPredicate</code>.</p>","parent_name":"IntPredicate"},"Enums/OverflowBehavior.html#/s:4LLVM16OverflowBehaviorO7defaultA2CmF":{"name":"default","abstract":"<p>The result value of the operator is the mathematical result modulo <code>2^n</code>,","parent_name":"OverflowBehavior"},"Enums/OverflowBehavior.html#/s:4LLVM16OverflowBehaviorO12noSignedWrapA2CmF":{"name":"noSignedWrap","abstract":"<p>The result value of the operator is a poison value if signed overflow","parent_name":"OverflowBehavior"},"Enums/OverflowBehavior.html#/s:4LLVM16OverflowBehaviorO14noUnsignedWrapA2CmF":{"name":"noUnsignedWrap","abstract":"<p>The result value of the operator is a poison value if unsigned overflow","parent_name":"OverflowBehavior"},"Enums/ThreadLocalModel.html#/s:4LLVM16ThreadLocalModelO03notbC0A2CmF":{"name":"notThreadLocal","abstract":"<p>The variable is not thread local and hence has no associated model.</p>","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:4LLVM16ThreadLocalModelO14generalDynamicA2CmF":{"name":"generalDynamic","abstract":"<p>Allows reference of all thread-local variables, from either a shared","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:4LLVM16ThreadLocalModelO12localDynamicA2CmF":{"name":"localDynamic","abstract":"<p>This model is an optimization of the General Dynamic model. The compiler","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:4LLVM16ThreadLocalModelO11initialExecA2CmF":{"name":"initialExec","abstract":"<p>This model can only reference thread-local variables which are available","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:4LLVM16ThreadLocalModelO9localExecA2CmF":{"name":"localExec","abstract":"<p>This model can only reference thread-local variables which are part of the","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:4LLVM16ThreadLocalModelO4llvmSC010LLVMThreadC4ModeVv":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMThreadLocalMode</code>.</p>","parent_name":"ThreadLocalModel"},"Enums/CallingConvention.html#/s:4LLVM17CallingConventionO1cA2CmF":{"name":"c","abstract":"<p>The default LLVM calling convention, compatible with C.</p>","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:4LLVM17CallingConventionO4fastA2CmF":{"name":"fast","abstract":"<p>This calling convention attempts to make calls as fast as possible","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:4LLVM17CallingConventionO4coldA2CmF":{"name":"cold","abstract":"<p>This calling convention attempts to make code in the caller as efficient","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:4LLVM17CallingConventionO8webKitJSA2CmF":{"name":"webKitJS","abstract":"<p>Calling convention for stack based JavaScript calls.</p>","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:4LLVM17CallingConventionO6anyRegA2CmF":{"name":"anyReg","abstract":"<p>Calling convention for dynamic register based calls","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:4LLVM17CallingConventionO10x86StdcallA2CmF":{"name":"x86Stdcall","abstract":"<p>The calling conventions mostly used by the Win32 API.</p>","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:4LLVM17CallingConventionO11x86FastcallA2CmF":{"name":"x86Fastcall","abstract":"<p><q>Fast</q> analog of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/CallingConvention.html#/s:4LLVM17CallingConventionO10x86StdcallA2CmF\">x86Stdcall</a></code>.</p>","parent_name":"CallingConvention"},"Enums/LandingPadClause.html#/s:4LLVM16LandingPadClauseO5catchAcA8IRGlobal_pcACmF":{"name":"catch","abstract":"<p>This clause means that the landingpad block should be entered if the","parent_name":"LandingPadClause"},"Enums/LandingPadClause.html#/s:4LLVM16LandingPadClauseO6filterAcA6IRType_p_SayAA8IRGlobal_pGtcACmF":{"name":"filter","abstract":"<p>This clause means that the landing pad should be entered if the exception","parent_name":"LandingPadClause"},"Enums/LandingPadClause.html#/s:4LLVM7IRValueP02asA0s13OpaquePointerVyF":{"name":"asLLVM()","parent_name":"LandingPadClause"},"Enums/LandingPadClause.html":{"name":"LandingPadClause","abstract":"<p>Enumerates the supported kind of clauses.</p>"},"Enums.html#/s:4LLVM8UnsignedO":{"name":"Unsigned","abstract":"<p>Represents unsigned integral types and operations.</p>"},"Enums.html#/s:4LLVM6SignedO":{"name":"Signed","abstract":"<p>Represents signed integral types and operations.</p>"},"Enums.html#/s:4LLVM8FloatingO":{"name":"Floating","abstract":"<p>Represents floating types and operations.</p>"},"Enums.html#/s:4LLVM6StructO":{"name":"Struct","abstract":"<p>Represents struct types and operations.</p>"},"Enums.html#/s:4LLVM6VectorO":{"name":"Vector","abstract":"<p>Represents vector types and operations.</p>"},"Enums/CallingConvention.html":{"name":"CallingConvention","abstract":"<p>Enumerates the calling conventions supported by LLVM.</p>"},"Enums/ThreadLocalModel.html":{"name":"ThreadLocalModel","abstract":"<p>Enumerates the supported models of reference of thread-local variables. </p>"},"Enums/OverflowBehavior.html":{"name":"OverflowBehavior","abstract":"<p>Species the behavior that should occur on overflow during mathematical"},"Enums/IntPredicate.html":{"name":"IntPredicate","abstract":"<p>The condition codes available for integer comparison instructions.</p>"},"Enums/RealPredicate.html":{"name":"RealPredicate","abstract":"<p>The condition codes available for floating comparison instructions.</p>"},"Enums/AtomicOrdering.html":{"name":"AtomicOrdering","abstract":"<p><code>AtomicOrdering</code> enumerates available memory ordering semantics.</p>"},"Enums/AtomicReadModifyWriteOperation.html":{"name":"AtomicReadModifyWriteOperation","abstract":"<p><code>AtomicReadModifyWriteOperation</code> enumerates the kinds of supported atomic"},"Enums/JITError.html":{"name":"JITError","abstract":"<p>JITError represents the different kinds of errors the JIT compiler can"},"Enums/Visibility.html":{"name":"Visibility","abstract":"<p><code>Visibility</code> enumerates available visibility styles.</p>"},"Enums/Linkage.html":{"name":"Linkage","abstract":"<p><code>Linkage</code> enumerates the supported kinds of linkage for global values.  All"},"Enums/StorageClass.html":{"name":"StorageClass","abstract":"<p><code>StorageClass</code> enumerates the storage classes for globals in a Portable"},"Enums/UnnamedAddressKind.html":{"name":"UnnamedAddressKind","abstract":"<p>Enumerates values representing whether or not this global value&rsquo;s address"},"Enums/MemoryBufferError.html":{"name":"MemoryBufferError","abstract":"<p>Enumerates the possible failures that can be thrown initializing"},"Enums/ModuleError.html":{"name":"ModuleError","abstract":"<p>Represents the possible errors that can be thrown while interacting with a"},"Enums/OpCode.html":{"name":"OpCode","abstract":"<p>Enumerates the opcodes of instructions available in the LLVM IR language.</p>"},"Enums/FunctionPass.html":{"name":"FunctionPass","abstract":"<p>A subset of supported LLVM IR optimizer passes.</p>"},"Enums/ByteOrder.html":{"name":"ByteOrder","abstract":"<p><code>ByteOrder</code> enumerates the ordering semantics of sequences of bytes on a"},"Enums/CodeGenOptLevel.html":{"name":"CodeGenOptLevel","abstract":"<p>LLVM-provided high-level optimization levels.</p>"},"Enums/RelocMode.html":{"name":"RelocMode","abstract":"<p>The relocation model types supported by LLVM.</p>"},"Enums/CodeModel.html":{"name":"CodeModel","abstract":"<p>The model that generated code should follow.  Code Models enables particular"},"Enums/CodegenFileType.html":{"name":"CodegenFileType","abstract":"<p>The supported types of files codegen can produce.</p>"},"Enums/TargetMachineError.html":{"name":"TargetMachineError","abstract":"<p>Represents one of a few errors that can be thrown by a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TargetMachine.html\">TargetMachine</a></code></p>"},"Classes/TargetMachine.html#/s:4LLVM13TargetMachineC6targetAA0B0Cv":{"name":"target","abstract":"<p>The target information associated with this target machine.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:4LLVM13TargetMachineC10dataLayoutAA0B4DataCv":{"name":"dataLayout","abstract":"<p>The data layout semantics associated with this target machine.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:4LLVM13TargetMachineC6tripleSSv":{"name":"triple","abstract":"<p>A string representing the target triple for this target machine.  In the","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:4LLVM13TargetMachineC3cpuSSv":{"name":"cpu","abstract":"<p>The CPU associated with this target machine.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:4LLVM13TargetMachineC8featuresSSv":{"name":"features","abstract":"<p>The feature string associated with this target machine.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:4LLVM13TargetMachineCACSSSg6triple_SS3cpuSS8featuresAA15CodeGenOptLevelO03optJ0AA9RelocModeO05relocM0AA0G5ModelO04codeO0tKcfc":{"name":"init(triple:cpu:features:optLevel:relocMode:codeModel:)","abstract":"<p>Creates a Target Machine with information about its target environment.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:4LLVM13TargetMachineC10emitToFileyAA6ModuleC6module_AA07CodegenF4TypeO4typeSS4pathtKF":{"name":"emitToFile(module:type:path:)","abstract":"<p>Emits an LLVM Bitcode, ASM, or object file for the given module to the","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:4LLVM13TargetMachineC18emitToMemoryBufferAA0fG0CAA6ModuleC6module_AA15CodegenFileTypeO4typetKF":{"name":"emitToMemoryBuffer(module:type:)","abstract":"<p>Emits an LLVM Bitcode, ASM, or object file for the given module to a new","parent_name":"TargetMachine"},"Classes/Target.html#/s:4LLVM6TargetCACs13OpaquePointerV4llvm_tcfc":{"name":"init(llvm:)","abstract":"<p>Creates a <code>Target</code> object from an LLVM target object.</p>","parent_name":"Target"},"Classes/TargetData.html#/s:4LLVM10TargetDataCACs13OpaquePointerV4llvm_tcfc":{"name":"init(llvm:)","abstract":"<p>Creates a Target Data object from an <code>LLVMTargetDataRef</code> object.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC15offsetOfElementS2i2at_AA10StructTypeV4typetF":{"name":"offsetOfElement(at:type:)","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC15elementAtOffsetS2i_AA10StructTypeV4typetF":{"name":"elementAtOffset(_:type:)","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC16sizeOfTypeInBitsSiAA6IRType_pF":{"name":"sizeOfTypeInBits(_:)","abstract":"<p>Computes the number of bits necessary to hold a value of the given type","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC13abiSizeOfTypeSiAA6IRType_pF":{"name":"abiSizeOfType(_:)","abstract":"<p>Computes the minimum ABI-required number of bits necessary to hold a value","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC9byteOrderAA04ByteE0Ov":{"name":"byteOrder","abstract":"<p>The current platform byte order, either big or little endian.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC12layoutStringSSv":{"name":"layoutString","abstract":"<p>Creates a string representation of the target data.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC14intPointerTypeAA03IntF0VAA7ContextCSg7context_SiSg12addressSpacetF":{"name":"intPointerType(context:addressSpace:)","abstract":"<p>The integer type that is the same size as a pointer on this target.","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC18preferredAlignmentSiAA6GlobalV2of_tF":{"name":"preferredAlignment(of:)","abstract":"<p>Computes the preferred alignment of the given global for this target</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC18preferredAlignmentSiAA6IRType_p2of_tF":{"name":"preferredAlignment(of:)","abstract":"<p>Computes the preferred alignment of the given type for this target</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC12abiAlignmentSiAA6IRType_p2of_tF":{"name":"abiAlignment(of:)","abstract":"<p>Computes the minimum ABI-required alignment for the specified type.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC18callFrameAlignmentSiAA6IRType_p2of_tF":{"name":"callFrameAlignment(of:)","abstract":"<p>Computes the minimum ABI-required alignment for the specified type.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC7abiSizeSiAA6IRType_p2of_tF":{"name":"abiSize(of:)","abstract":"<p>Computes the ABI size of a type in bytes for a target.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC9storeSizeSiAA6IRType_p2of_tF":{"name":"storeSize(of:)","abstract":"<p>Computes the maximum number of bytes that may be overwritten by","parent_name":"TargetData"},"Classes/TargetData.html#/s:4LLVM10TargetDataC11pointerSizeS2iSg12addressSpace_tF":{"name":"pointerSize(addressSpace:)","abstract":"<p>Computes the pointer size for the platform, optionally in a given","parent_name":"TargetData"},"Classes/FunctionPassManager.html#/s:4LLVM19FunctionPassManagerCAcA6ModuleC6module_tcfc":{"name":"init(module:)","abstract":"<p>Creates a <code>FunctionPassManager</code> bound to the given module&rsquo;s IR.</p>","parent_name":"FunctionPassManager"},"Classes/FunctionPassManager.html#/s:4LLVM19FunctionPassManagerC3addySayAA0bC0OGd_tF":{"name":"add(_:)","abstract":"<p>Adds the given passes to the pass manager.</p>","parent_name":"FunctionPassManager"},"Classes/FunctionPassManager.html#/s:4LLVM19FunctionPassManagerC3runyAA0B0C2on_tF":{"name":"run(on:)","abstract":"<p>Runs all listed functions in the pass manager on the given function.</p>","parent_name":"FunctionPassManager"},"Classes/SymbolSequence.html#/s:4LLVM14SymbolSequenceC12makeIterators03AnyE0VyAA0B0VGyF":{"name":"makeIterator()","abstract":"<p>Creates an iterator that will iterate over all symbols in an object","parent_name":"SymbolSequence"},"Classes/RelocationSequence.html#/s:4LLVM18RelocationSequenceC12makeIterators03AnyE0VyAA0B0VGyF":{"name":"makeIterator()","abstract":"<p>Creates an iterator that will iterate over all relocations in an object","parent_name":"RelocationSequence"},"Classes/SectionSequence.html#/s:4LLVM15SectionSequenceC12makeIterators03AnyE0VyAA0B0VGyF":{"name":"makeIterator()","abstract":"<p>Makes an iterator that iterates over the sections in an object file.</p>","parent_name":"SectionSequence"},"Classes/ObjectFile.html#/s:4LLVM10ObjectFileCACSgAA12MemoryBufferC06memoryE0_tcfc":{"name":"init(memoryBuffer:)","abstract":"<p>Creates an <code>ObjectFile</code> with the contents of a provided memory buffer.</p>","parent_name":"ObjectFile"},"Classes/ObjectFile.html#/s:4LLVM10ObjectFileCACSgSS4path_tcfc":{"name":"init(path:)","abstract":"<p>Creates an <code>ObjectFile</code> with the contents of the object file at","parent_name":"ObjectFile"},"Classes/ObjectFile.html#/s:4LLVM10ObjectFileC8sectionsAA15SectionSequenceCv":{"name":"sections","abstract":"<p>Returns a sequence of all the sections in this object file.</p>","parent_name":"ObjectFile"},"Classes/ObjectFile.html#/s:4LLVM10ObjectFileC7symbolsAA14SymbolSequenceCv":{"name":"symbols","abstract":"<p>Returns a sequence of all the symbols in this object file.</p>","parent_name":"ObjectFile"},"Classes/Context.html#/s:4LLVM7ContextC6globalACvZ":{"name":"global","abstract":"<p>Retrieves the global context instance.</p>","parent_name":"Context"},"Classes/Context.html#/s:4LLVM7ContextCACycfc":{"name":"init()","abstract":"<p>Creates a <code>Context</code> object using <code>LLVMContextCreate</code></p>","parent_name":"Context"},"Classes/Context.html#/s:4LLVM7ContextCACs13OpaquePointerV4llvm_Sb04ownsB0tcfc":{"name":"init(llvm:ownsContext:)","abstract":"<p>Creates a <code>Context</code> object from an <code>LLVMContextRef</code> object.</p>","parent_name":"Context"},"Classes/MemoryBuffer.html#/s:4LLVM12MemoryBufferC9fromStdinACyKFZ":{"name":"fromStdin()","abstract":"<p>Creates a <code>MemoryBuffer</code> with the contents of <code>stdin</code>, stopping once","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:4LLVM12MemoryBufferCACSRys4Int8VG6buffer_SS4nameSb22requiresNullTerminatortcfc":{"name":"init(buffer:name:requiresNullTerminator:)","abstract":"<p>Creates a <code>MemoryBuffer</code> that points to a specified","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:4LLVM12MemoryBufferCACSRys4Int8VG07copyingC0_SS4nametcfc":{"name":"init(copyingBuffer:name:)","abstract":"<p>Creates a <code>MemoryBuffer</code> by copying the data within a specified","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:4LLVM12MemoryBufferCACSS10contentsOf_tKcfc":{"name":"init(contentsOf:)","abstract":"<p>Creates a <code>MemoryBuffer</code> with the contents of the file at the provided","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:4LLVM12MemoryBufferC5startSPys4Int8VGv":{"name":"start","abstract":"<p>Retrieves the start address of this buffer.</p>","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:4LLVM12MemoryBufferC4sizeSiv":{"name":"size","abstract":"<p>Retrieves the size in bytes of this buffer.</p>","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:4LLVM12MemoryBufferC12makeIterators06Unsafec7PointerE0Vys4Int8VGyF":{"name":"makeIterator()","abstract":"<p>Makes an iterator so this buffer can be traversed in a <code>for</code> loop.</p>","parent_name":"MemoryBuffer"},"Classes/JIT.html#/s:4LLVM3JITCAcA6ModuleC6module_AA13TargetMachineC7machinetKcfc":{"name":"init(module:machine:)","abstract":"<p>Creates a Just In Time compiler that will compile the code in the","parent_name":"JIT"},"Classes/JIT.html#/s:4LLVM3JITC17addressOfFunctions13OpaquePointerVSgSS4name_tF":{"name":"addressOfFunction(name:)","abstract":"<p>Retrieves a pointer to the function compiled by this JIT.</p>","parent_name":"JIT"},"Classes/JIT.html#/s:4LLVM3JITC9addModuleyAA0D0CF":{"name":"addModule(_:)","abstract":"<p>Adds the provided module, and all top-level declarations into this JIT.</p>","parent_name":"JIT"},"Classes/JIT.html#/s:4LLVM3JITC12removeModuleyAA0D0CKF":{"name":"removeModule(_:)","abstract":"<p>Removes the provided module, and all top-level declarations, from this","parent_name":"JIT"},"Classes/JIT.html#/s:4LLVM3JITC17runFunctionAsMainSiAA0D0C_SaySSG4argstF":{"name":"runFunctionAsMain(_:args:)","abstract":"<p>Runs the specified function as if it were the <code>main</code> function in an","parent_name":"JIT"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC6moduleAA6ModuleCv":{"name":"module","abstract":"<p>The module this <code>IRBuilder</code> is associated with.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderCAcA6ModuleC6module_tcfc":{"name":"init(module:)","abstract":"<p>Creates an <code>IRBuilder</code> object with the given module.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC13positionAtEndyAA10BasicBlockV2of_tF":{"name":"positionAtEnd(of:)","abstract":"<p>Repositions the IR Builder at the end of the given basic block.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC14positionBeforeyAA7IRValue_pF":{"name":"positionBefore(_:)","abstract":"<p>Repositions the IR Builder before the start of the given instruction.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8positionyAA7IRValue_p_AA10BasicBlockV5blocktF":{"name":"position(_:block:)","abstract":"<p>Repositions the IR Builder at the point specified by the given instruction","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC22clearInsertionPositionyyF":{"name":"clearInsertionPosition()","abstract":"<p>Clears the insertion point.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11insertBlockAA05BasicD0VSgv":{"name":"insertBlock","abstract":"<p>Gets the basic block built instructions will be inserted into.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC15currentFunctionAA0D0CSgv":{"name":"currentFunction","abstract":"<p>Gets the function this builder is building into.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC6insertyAA7IRValue_p_SSSg4nametF":{"name":"insert(_:name:)","abstract":"<p>Inserts the given instruction into the IR Builder.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC20buildBinaryOperationAA7IRValue_pAA6OpCodeO0D0O_AaE_pAaE_pSS4nametF":{"name":"buildBinaryOperation(_:_:_:name:)","abstract":"<p>Builds the specified binary operation instruction with the given arguments.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9buildCastAA7IRValue_pAA6OpCodeO0D0O_AaE_p5valueAA6IRType_p4typeSS4nametF":{"name":"buildCast(_:value:type:name:)","abstract":"<p>Builds the specified cast operation instruction with the given value and","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildNegAA7IRValue_pAaE_p_AA16OverflowBehaviorO08overflowG0SS4nametF":{"name":"buildNeg(_:overflowBehavior:name:)","abstract":"<p>Build a negation instruction with the given value as an operand.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildAddAA7IRValue_pAaE_p_AaE_pAA16OverflowBehaviorO08overflowG0SS4nametF":{"name":"buildAdd(_:_:overflowBehavior:name:)","abstract":"<p>Build an add instruction with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildSubAA7IRValue_pAaE_p_AaE_pAA16OverflowBehaviorO08overflowG0SS4nametF":{"name":"buildSub(_:_:overflowBehavior:name:)","abstract":"<p>Build a subtract instruction with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildMulAA7IRValue_pAaE_p_AaE_pAA16OverflowBehaviorO08overflowG0SS4nametF":{"name":"buildMul(_:_:overflowBehavior:name:)","abstract":"<p>Build a multiply instruction with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildRemAA7IRValue_pAaE_p_AaE_pSb6signedSS4nametF":{"name":"buildRem(_:_:signed:name:)","abstract":"<p>Build a remainder instruction that provides the remainder after divison of","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildDivAA7IRValue_pAaE_p_AaE_pSb6signedSb5exactSS4nametF":{"name":"buildDiv(_:_:signed:exact:name:)","abstract":"<p>Build a division instruction that divides the first value by the second","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9buildICmpAA7IRValue_pAaE_p_AaE_pAA12IntPredicateOSS4nametF":{"name":"buildICmp(_:_:_:name:)","abstract":"<p>Build an integer comparison between the two provided values using the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9buildFCmpAA7IRValue_pAaE_p_AaE_pAA13RealPredicateOSS4nametF":{"name":"buildFCmp(_:_:_:name:)","abstract":"<p>Build a floating comparison between the two provided values using the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildNotAA7IRValue_pAaE_p_SS4nametF":{"name":"buildNot(_:name:)","abstract":"<p>Build a bitwise logical not with the given value as an operand.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildXorAA7IRValue_pAaE_p_AaE_pSS4nametF":{"name":"buildXor(_:_:name:)","abstract":"<p>Build a bitwise logical exclusive OR with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC7buildOrAA7IRValue_pAaE_p_AaE_pSS4nametF":{"name":"buildOr(_:_:name:)","abstract":"<p>Build a bitwise logical OR with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildAndAA7IRValue_pAaE_p_AaE_pSS4nametF":{"name":"buildAnd(_:_:name:)","abstract":"<p>Build a bitwise logical AND with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildShlAA7IRValue_pAaE_p_AaE_pSS4nametF":{"name":"buildShl(_:_:name:)","abstract":"<p>Build a left-shift instruction of the first value by an amount in the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildShrAA7IRValue_pAaE_p_AaE_pSb12isArithmeticSS4nametF":{"name":"buildShr(_:_:isArithmetic:name:)","abstract":"<p>Build a right-shift instruction of the first value by an amount in the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildPhiAA0D4NodeVAA6IRType_p_SS4nametF":{"name":"buildPhi(_:name:)","abstract":"<p>Build a phi node with the given type acting as the result of any incoming","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildSelectAA7IRValue_pAaE_p_AaE_p4thenAaE_p4elseSS4nametF":{"name":"buildSelect(_:then:else:name:)","abstract":"<p>Build a select instruction to choose a value based on a condition without","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildSwitchAA0D0VAA7IRValue_p_AA10BasicBlockV4elseSi9caseCounttF":{"name":"buildSwitch(_:else:caseCount:)","abstract":"<p>Build a branch table that branches on the given value with the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11addFunctionAA0D0CSS_AA0D4TypeV4typetF":{"name":"addFunction(_:type:)","abstract":"<p>Build a named function body with the given type.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC12createStructAA0D4TypeVSS4name_SayAA6IRType_pGSg5typesSb8isPackedtF":{"name":"createStruct(name:types:isPacked:)","abstract":"<p>Build a named structure definition.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC7buildBrAA7IRValue_pAA10BasicBlockVF":{"name":"buildBr(_:)","abstract":"<p>Build an unconditional branch to the given basic block.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildCondBrAA7IRValue_pAaE_p9condition_AA10BasicBlockV4thenAH4elsetF":{"name":"buildCondBr(condition:then:else:)","abstract":"<p>Build a condition branch that branches to the first basic block if the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC15buildIndirectBrAA7IRValue_pAA10BasicBlockV7AddressV7address_SayAGG12destinationstF":{"name":"buildIndirectBr(address:destinations:)","abstract":"<p>Build an indirect branch to a label within the current function.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildRetAA7IRValue_pAaE_pF":{"name":"buildRet(_:)","abstract":"<p>Build a return from the current function back to the calling function","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC12buildRetVoidAA7IRValue_pyF":{"name":"buildRetVoid()","abstract":"<p>Build a void return from the current function.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC16buildUnreachableAA7IRValue_pyF":{"name":"buildUnreachable()","abstract":"<p>Build an unreachable instruction in the current function.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC17buildRetAggregateAA7IRValue_pSayAaE_pG2of_tF":{"name":"buildRetAggregate(of:)","abstract":"<p>Build a return from the current function back to the calling function with","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9buildCallAA0D0VAA7IRValue_p_SayAaG_pG4argsSS4nametF":{"name":"buildCall(_:args:name:)","abstract":"<p>Build a call to the given function with the given arguments to transfer","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildInvokeAA0D0VAA7IRValue_p_SayAaG_pG4argsAA10BasicBlockV4nextAK5catchSS4nametF":{"name":"buildInvoke(_:args:next:catch:name:)","abstract":"<p>Build a call to the given function with the given arguments with the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC15buildLandingPadAA7IRValue_pAA6IRType_p9returning_AA8FunctionCSg13personalityFnSayAA0dE6ClauseOG7clausesSb7cleanupSS4nametF":{"name":"buildLandingPad(returning:personalityFn:clauses:cleanup:name:)","abstract":"<p>Build a landing pad to specify that a basic block is where an exception","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildResumeAA7IRValue_pAaE_pF":{"name":"buildResume(_:)","abstract":"<p>Build a resume instruction to resume propagation of an existing","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC10buildVAArgAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildVAArg(_:type:name:)","abstract":"<p>Build a <code>va_arg</code> instruction to access arguments passed through the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildAllocaAA7IRValue_pAA6IRType_p4type_AaE_pSg5countSi9alignmentSS4nametF":{"name":"buildAlloca(type:count:alignment:name:)","abstract":"<p>Build an <code>alloca</code> to allocate stack memory to hold a value of the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC10buildStoreAA7IRValue_pAaE_p_AaE_p2toAA14AtomicOrderingO8orderingSb8volatileSi9alignmenttF":{"name":"buildStore(_:to:ordering:volatile:alignment:)","abstract":"<p>Build a store instruction that stores the first value into the location","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9buildLoadAA7IRValue_pAaE_p_AA14AtomicOrderingO8orderingSb8volatileSi9alignmentSS4nametF":{"name":"buildLoad(_:ordering:volatile:alignment:name:)","abstract":"<p>Build a load instruction that loads a value from the location in the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC16buildInBoundsGEPAA7IRValue_pAaE_p_SayAaE_pG7indicesSS4nametF":{"name":"buildInBoundsGEP(_:indices:name:)","abstract":"<p>Build a <code>GEP</code> (Get Element Pointer) instruction with a resultant value","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8buildGEPAA7IRValue_pAaE_p_SayAaE_pG7indicesSS4nametF":{"name":"buildGEP(_:indices:name:)","abstract":"<p>Build a GEP (Get Element Pointer) instruction.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC14buildStructGEPAA7IRValue_pAaE_p_Si5indexSS4nametF":{"name":"buildStructGEP(_:index:name:)","abstract":"<p>Build a GEP (Get Element Pointer) instruction suitable for indexing into","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC17buildExtractValueAA7IRValue_pAaE_p_Si5indexSS4nametF":{"name":"buildExtractValue(_:index:name:)","abstract":"<p>Build an ExtractValue instruction to retrieve an indexed value from a","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildIsNullAA7IRValue_pAaE_p_SS4nametF":{"name":"buildIsNull(_:name:)","abstract":"<p>Build a comparision instruction that returns whether the given operand is","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC14buildIsNotNullAA7IRValue_pAaE_p_SS4nametF":{"name":"buildIsNotNull(_:name:)","abstract":"<p>Build a comparision instruction that returns whether the given operand is","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC19buildTruncOrBitCastAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildTruncOrBitCast(_:type:name:)","abstract":"<p>Build an instruction that either performs a truncation or a bitcast of","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC18buildZExtOrBitCastAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildZExtOrBitCast(_:type:name:)","abstract":"<p>Build an instruction that either performs a zero extension or a bitcast of","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC12buildBitCastAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildBitCast(_:type:name:)","abstract":"<p>Build a bitcast instruction to convert the given value to a value of the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildFPCastAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildFPCast(_:type:name:)","abstract":"<p>Build a cast instruction to convert the given floating-point value to a","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC18buildAddrSpaceCastAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildAddrSpaceCast(_:type:name:)","abstract":"<p>Build an address space cast instruction that converts a pointer value","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC10buildTruncAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildTrunc(_:type:name:)","abstract":"<p>Build a truncate instruction to truncate the given value to the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9buildSExtAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildSExt(_:type:name:)","abstract":"<p>Build a sign extension instruction to sign extend the given value to","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9buildZExtAA7IRValue_pAaE_p_AA6IRType_p4typeSS4nametF":{"name":"buildZExt(_:type:name:)","abstract":"<p>Build a zero extension instruction to zero extend the given value to the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC13buildIntToPtrAA7IRValue_pAaE_p_AA11PointerTypeV4typeSS4nametF":{"name":"buildIntToPtr(_:type:name:)","abstract":"<p>Build an integer-to-pointer instruction to convert the given value to the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC13buildPtrToIntAA7IRValue_pAaE_p_AA0F4TypeV4typeSS4nametF":{"name":"buildPtrToInt(_:type:name:)","abstract":"<p>Build a pointer-to-integer instruction to convert the given pointer value","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC12buildIntToFPAA7IRValue_pAaE_p_AA9FloatTypeV4typeSb6signedSS4nametF":{"name":"buildIntToFP(_:type:signed:name:)","abstract":"<p>Build an integer-to-floating instruction to convert the given integer","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC12buildFPToIntAA7IRValue_pAaE_p_AA0E4TypeV4typeSb6signedSS4nametF":{"name":"buildFPToInt(_:type:signed:name:)","abstract":"<p>Build a floating-to-integer instruction to convert the given floating","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC12buildAlignOfAA7IRValue_pAA6IRType_pF":{"name":"buildAlignOf(_:)","abstract":"<p>Build a constant expression that returns the alignment of the given type","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildSizeOfAA7IRValue_pAA6IRType_pF":{"name":"buildSizeOf(_:)","abstract":"<p>Build a constant expression that returns the size of the given type in","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC22buildPointerDifferenceAA7IRValue_pAaE_p_AaE_pSS4nametF":{"name":"buildPointerDifference(_:_:name:)","abstract":"<p>Build an expression that returns the difference between two pointer","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC10buildFenceAA7IRValue_pAA14AtomicOrderingO8ordering_Sb14singleThreadedSS4nametF":{"name":"buildFence(ordering:singleThreaded:name:)","abstract":"<p>Build a fence instruction that introduces <q>happens-before</q> edges between","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC18buildAtomicCmpXchgAA7IRValue_pAaE_p3ptr_AaE_p2ofAaE_p2toAA0D8OrderingO07successK0AJ07failureK0Sb14singleThreadedtF":{"name":"buildAtomicCmpXchg(ptr:of:to:successOrdering:failureOrdering:singleThreaded:)","abstract":"<p>Build an atomic compare-and-exchange instruction to atomically modify","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC14buildAtomicRMWAA7IRValue_pAA0D24ReadModifyWriteOperationO8atomicOp_AaE_p3ptrAaE_p5valueAA0D8OrderingO8orderingSb14singleThreadedtF":{"name":"buildAtomicRMW(atomicOp:ptr:value:ordering:singleThreaded:)","abstract":"<p>Build an atomic read-modify-write instruction to atomically modify memory.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC11buildMallocAA7IRValue_pAA6IRType_p_AaE_pSg5countSS4nametF":{"name":"buildMalloc(_:count:name:)","abstract":"<p>Build a call to the C standard library <code>malloc</code> instruction.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9buildFreeAA7IRValue_pAaE_pF":{"name":"buildFree(_:)","abstract":"<p>Build a call to the C standard library <code>free</code> function, with the provided","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC16buildInsertValueAA7IRValue_pAaE_p9aggregate_AaE_p7elementSi5indexSS4nametF":{"name":"buildInsertValue(aggregate:element:index:name:)","abstract":"<p>Build an instruction to insert a value into a member field in an","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC18buildInsertElementAA7IRValue_pAaE_p6vector_AaE_p7elementAaE_p5indexSS4nametF":{"name":"buildInsertElement(vector:element:index:name:)","abstract":"<p>Build a vector insert instruction to nondestructively insert the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC19buildExtractElementAA7IRValue_pAaE_p6vector_AaE_p5indexSS4nametF":{"name":"buildExtractElement(vector:index:name:)","abstract":"<p>Build an instruction to extract a single scalar element from a vector at","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC18buildShuffleVectorAA7IRValue_pAaE_p_AaE_p3andAaE_p4maskSS4nametF":{"name":"buildShuffleVector(_:and:mask:name:)","abstract":"<p>Build a vector shuffle instruction to construct a permutation of elements","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9addGlobalAA0D0VSS_AA6IRType_p4typeSiSg12addressSpacetF":{"name":"addGlobal(_:type:addressSpace:)","abstract":"<p>Build a named global of the given type.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC9addGlobalAA0D0VSS_AA7IRValue_p11initializerSiSg12addressSpacetF":{"name":"addGlobal(_:initializer:addressSpace:)","abstract":"<p>Build a named global of the given type.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC15addGlobalStringAA0D0VSS4name_SS5valuetF":{"name":"addGlobalString(name:value:)","abstract":"<p>Build a named global string consisting of an array of <code>i8</code> type filled in","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC17buildGlobalStringAA0D0VSS_SS4nametF":{"name":"buildGlobalString(_:name:)","abstract":"<p>Build a named global variable containing the characters of the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC20buildGlobalStringPtrAA7IRValue_pSS_SS4nametF":{"name":"buildGlobalStringPtr(_:name:)","abstract":"<p>Build a named global variable containing a pointer to the contents of the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC8addAliasAA0D0VSS4name_AA8IRGlobal_p2toAA6IRType_p4typetF":{"name":"addAlias(name:to:type:)","abstract":"<p>Build a named alias to a global value or a constant expression.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:4LLVM9IRBuilderC19buildInlineAssemblyAA7IRValue_pSS_AA12FunctionTypeV4typeSS11constraintsSb14hasSideEffectsSb17needsAlignedStacktF":{"name":"buildInlineAssembly(_:type:constraints:hasSideEffects:needsAlignedStack:)","abstract":"<p>Build a value representing an inline assembly expression (as opposed to","parent_name":"IRBuilder"},"Classes/Module.html#/s:4LLVM6ModuleCACSS4name_AA7ContextCSg7contexttcfc":{"name":"init(name:context:)","abstract":"<p>Creates a <code>Module</code> with the given name.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC7contextAA7ContextCv":{"name":"context","abstract":"<p>Returns the context associated with this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC10dataLayoutAA10TargetDataCv":{"name":"dataLayout","abstract":"<p>Obtain the data layout for this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC4nameSSv":{"name":"name","abstract":"<p>The identifier of this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC5printySS2to_tKF":{"name":"print(to:)","abstract":"<p>Print a representation of a module to a file at the given path.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC11emitBitCodeySS2to_tKF":{"name":"emitBitCode(to:)","abstract":"<p>Writes the bitcode of elements in this module to a file at the given path.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC6verifyyyKF":{"name":"verify()","abstract":"<p>Verifies that this module is valid, taking the specified action if not.","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC4linkSbACF":{"name":"link(_:)","abstract":"<p>Links the given module with this module.  If the link succeeds, this","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC9functionss11AnySequenceVyAA8FunctionCGv":{"name":"functions","abstract":"<p>Retrieves the sequence of functions that make up this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC13firstFunctionAA0D0CSgv":{"name":"firstFunction","abstract":"<p>Retrieves the first function in this module, if there are any functions.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC12lastFunctionAA0D0CSgv":{"name":"lastFunction","abstract":"<p>Retrieves the last function in this module, if there are any functions.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC11firstGlobalAA0D0VSgv":{"name":"firstGlobal","abstract":"<p>Retrieves the first global in this module, if there are any globals.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC10lastGlobalAA0D0VSgv":{"name":"lastGlobal","abstract":"<p>Retrieves the last global in this module, if there are any globals.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC7globalss11AnySequenceVyAA6GlobalVGv":{"name":"globals","abstract":"<p>Retrieves the sequence of functions that make up this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC4dumpyyF":{"name":"dump()","abstract":"<p>Dump a representation of this module to stderr.</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC11descriptionSSv":{"name":"description","abstract":"<p>The full text IR of this module</p>","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC6globalAA6GlobalVSgSS5named_tF":{"name":"global(named:)","abstract":"<p>Searches for and retrieves a global variable with the given name in this","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC4typeAA6IRType_pSgSS5named_tF":{"name":"type(named:)","abstract":"<p>Searches for and retrieves a type with the given name in this module if","parent_name":"Module"},"Classes/Module.html#/s:4LLVM6ModuleC8functionAA8FunctionCSgSS5named_tF":{"name":"function(named:)","abstract":"<p>Searches for and retrieves a function with the given name in this module","parent_name":"Module"},"Classes/Function.html#/s:4LLVM8FunctionC17callingConventionAA07CallingD0Ov":{"name":"callingConvention","abstract":"<p>Accesses the calling convention for this function.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC10entryBlockAA05BasicD0VSgv":{"name":"entryBlock","abstract":"<p>Retrieves the entry block of this function.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC10firstBlockAA05BasicD0VSgv":{"name":"firstBlock","abstract":"<p>Retrieves the first basic block in this function&rsquo;s body.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC9lastBlockAA05BasicD0VSgv":{"name":"lastBlock","abstract":"<p>Retrieves the last basic block in this function&rsquo;s body.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC11basicBlockss11AnySequenceVyAA10BasicBlockVGv":{"name":"basicBlocks","abstract":"<p>Retrieves the sequence of basic blocks that make up this function&rsquo;s body.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC7addressAA10BasicBlockV7AddressVSgAF2of_tF":{"name":"address(of:)","abstract":"<p>Computes the address of the specified basic block in this function.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC8previousACSgyF":{"name":"previous()","abstract":"<p>Retrieves the previous function in the module, if there is one.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC4nextACSgyF":{"name":"next()","abstract":"<p>Retrieves the next function in the module, if there is one.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC9parameterAA9ParameterVSgSi2at_tF":{"name":"parameter(at:)","abstract":"<p>Retrieves a parameter at the given index, if it exists.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC14firstParameterAA0D0VSgv":{"name":"firstParameter","abstract":"<p>Retrieves a parameter at the first index, if it exists.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC13lastParameterAA0D0VSgv":{"name":"lastParameter","abstract":"<p>Retrieves a parameter at the last index, if it exists.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC10parametersSayAA7IRValue_pGv":{"name":"parameters","abstract":"<p>Retrieves the list of all parameters for this function, in order.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC16appendBasicBlockAA0dE0VSS5named_AA7ContextCSg2intF":{"name":"appendBasicBlock(named:in:)","abstract":"<p>Appends the named basic block to the body of this function.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC6deleteyyF":{"name":"delete()","abstract":"<p>Deletes the function from its containing module.</p>","parent_name":"Function"},"Classes/Function.html#/s:4LLVM8FunctionC02asA0s13OpaquePointerVyF":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Function"},"Classes/Function.html":{"name":"Function","abstract":"<p>A <code>Function</code> represents a named function body in LLVM IR source.  Functions"},"Classes/Module.html":{"name":"Module","abstract":"<p>A <code>Module</code> represents the top-level structure of an LLVM program. An LLVM"},"Classes/IRBuilder.html":{"name":"IRBuilder","abstract":"<p>An <code>IRBuilder</code> is a helper object that generates LLVM instructions.  IR"},"Classes/JIT.html":{"name":"JIT","abstract":"<p>A <code>JIT</code> is a Just-In-Time compiler that will compile and execute LLVM IR"},"Classes/MemoryBuffer.html":{"name":"MemoryBuffer","abstract":"<p><code>MemoryBuffer</code> provides simple read-only access to a block of memory, and"},"Classes/Context.html":{"name":"Context","abstract":"<p>A <code>Context</code> represents execution states for the core LLVM IR system.</p>"},"Classes/ObjectFile.html":{"name":"ObjectFile","abstract":"<p>An in-memory representation of a format-independent object file.</p>"},"Classes/SectionSequence.html":{"name":"SectionSequence","abstract":"<p>A sequence for iterating over the sections in an object file.</p>"},"Classes/RelocationSequence.html":{"name":"RelocationSequence","abstract":"<p>A sequence for iterating over the relocations in an object file.</p>"},"Classes/SymbolSequence.html":{"name":"SymbolSequence","abstract":"<p>A sequence for iterating over the symbols in an object file.</p>"},"Classes/FunctionPassManager.html":{"name":"FunctionPassManager","abstract":"<p>A <code>FunctionPassManager</code> is an object that collects a sequence of passes"},"Classes/TargetData.html":{"name":"TargetData","abstract":"<p>A <code>TargetData</code> encapsulates information about the data requirements of a"},"Classes/Target.html":{"name":"Target","abstract":"<p>A <code>Target</code> object represents an object that encapsulates information about"},"Classes/TargetMachine.html":{"name":"TargetMachine","abstract":"<p>A <code>TargetMachine</code> object represents an object that encapsulates information"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enumerations","abstract":"<p>The following enumerations are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structures","abstract":"<p>The following structures are available globally.</p>"}}