{"Structs/X86MMXType.html#/s:FV4LLVM10X86MMXTypecFT_S0_":{"name":"init()","abstract":"<p>Creates an <code>X86MMXType</code>.</p>","parent_name":"X86MMXType"},"Structs/X86MMXType.html#/s:FV4LLVM10X86MMXType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"X86MMXType"},"Structs/VoidType.html#/s:FV4LLVM8VoidTypecFT_S0_":{"name":"init()","abstract":"<p>Creates an instance of the <code>Void</code> type.</p>","parent_name":"VoidType"},"Structs/VoidType.html#/s:FV4LLVM8VoidType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"VoidType"},"Structs/VectorType.html#/s:vV4LLVM10VectorType11elementTypePS_6IRType_":{"name":"elementType","abstract":"<p>Returns the type of elements in the vector.</p>","parent_name":"VectorType"},"Structs/VectorType.html#/s:vV4LLVM10VectorType5countSi":{"name":"count","abstract":"<p>Returns the number of elements in the vector.</p>","parent_name":"VectorType"},"Structs/VectorType.html#/s:FV4LLVM10VectorTypecFT11elementTypePS_6IRType_5countSi_S0_":{"name":"init(elementType:count:)","abstract":"<p>Creates a vector type of the given element type and size.</p>","parent_name":"VectorType"},"Structs/VectorType.html#/s:FV4LLVM10VectorType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"VectorType"},"Structs/Use.html#/s:FV4LLVM3Use4nextFT_GSqS0__":{"name":"next()","abstract":"<p>Retrieves the next use of a value.</p>","parent_name":"Use"},"Structs/Use.html#/s:FV4LLVM3Use4userFT_GSqPS_7IRValue__":{"name":"user()","abstract":"<p>Obtain the user value for this <code>Use</code> object.</p>","parent_name":"Use"},"Structs/Use.html#/s:FV4LLVM3Use9usedValueFT_GSqPS_7IRValue__":{"name":"usedValue()","abstract":"<p>Obtain the value this <code>Use</code> object corresponds to.</p>","parent_name":"Use"},"Structs/TokenType.html#/s:FV4LLVM9TokenTypecFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Initializes a token type from the given LLVM type object.</p>","parent_name":"TokenType"},"Structs/TokenType.html#/s:FV4LLVM9TokenType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"TokenType"},"Structs/Switch.html#/s:FV4LLVM6Switch7addCaseFTPS_7IRValue_VS_10BasicBlock_T_":{"name":"addCase(_:_:)","abstract":"<p>Inserts a case with the given value and destination basic block in the","parent_name":"Switch"},"Structs/Switch.html#/s:FV4LLVM6Switch6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Switch"},"Structs/StructType.html#/s:FV4LLVM10StructTypecFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Initializes a structure type from the given LLVM type object.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:FV4LLVM10StructTypecFT12elementTypesGSaPS_6IRType__8isPackedSb_S0_":{"name":"init(elementTypes:isPacked:)","abstract":"<p>Creates a structure type from an array of component element types.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:FV4LLVM10StructType7setBodyFTGSaPS_6IRType__8isPackedSb_T_":{"name":"setBody(_:isPacked:)","abstract":"<p>Invalidates and resets the member types of this structure.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:ZFV4LLVM10StructType8constantFT6valuesGSaPS_7IRValue__8isPackedSb_PS1__":{"name":"constant(values:isPacked:)","abstract":"<p>Creates a constant value of this structure type initialized with the given","parent_name":"StructType"},"Structs/StructType.html#/s:vV4LLVM10StructType4nameSS":{"name":"name","abstract":"<p>Retrieves the name associated with this structure type, or the empty","parent_name":"StructType"},"Structs/StructType.html#/s:vV4LLVM10StructType12elementTypesGSaPS_6IRType__":{"name":"elementTypes","abstract":"<p>Retrieves the element types associated with this structure type.</p>","parent_name":"StructType"},"Structs/StructType.html#/s:FV4LLVM10StructType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"StructType"},"Structs/PointerType.html#/s:vV4LLVM11PointerType7pointeePS_6IRType_":{"name":"pointee","abstract":"<p>Retrieves the type of the value being pointed to.</p>","parent_name":"PointerType"},"Structs/PointerType.html#/s:vV4LLVM11PointerType12addressSpaceSi":{"name":"addressSpace","abstract":"<p>Retrieves the address space where the pointed-to object resides.</p>","parent_name":"PointerType"},"Structs/PointerType.html#/s:FV4LLVM11PointerTypecFT7pointeePS_6IRType_12addressSpaceSi_S0_":{"name":"init(pointee:addressSpace:)","abstract":"<p>Creates a <code>PointerType</code> from a pointee type and an optional address space.</p>","parent_name":"PointerType"},"Structs/PointerType.html#/s:ZvV4LLVM11PointerType6toVoidS0_":{"name":"toVoid","abstract":"<p>/ Creates a type that simulates a pointer to void <code>(void*)</code>.</p>","parent_name":"PointerType"},"Structs/PointerType.html#/s:FV4LLVM11PointerType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"PointerType"},"Structs/PhiNode.html#/s:FV4LLVM7PhiNode11addIncomingFGSaTPS_7IRValue_VS_10BasicBlock__T_":{"name":"addIncoming(_:)","abstract":"<p>Adds a list of incoming value and their associated basic blocks to the end","parent_name":"PhiNode"},"Structs/PhiNode.html#/s:vV4LLVM7PhiNode8incomingGSaTPS_7IRValue_VS_10BasicBlock__":{"name":"incoming","abstract":"<p>Obtain the incoming values and their associated basic blocks for this PHI","parent_name":"PhiNode"},"Structs/PhiNode.html#/s:FV4LLVM7PhiNode13incomingValueFT2atSi_GSqPS_7IRValue__":{"name":"incomingValue(at:)","abstract":"<p>Retrieves the incoming value for the given index for this PHI node, if it","parent_name":"PhiNode"},"Structs/PhiNode.html#/s:FV4LLVM7PhiNode13incomingBlockFT2atSi_GSqVS_10BasicBlock_":{"name":"incomingBlock(at:)","abstract":"<p>Retrieves the incoming basic block for the given index for this PHI node,","parent_name":"PhiNode"},"Structs/PhiNode.html#/s:FV4LLVM7PhiNode6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"PhiNode"},"Structs/Relocation.html#/s:vV4LLVM10Relocation4typeSi":{"name":"type","abstract":"<p>Retrieves the type of this relocation.</p>","parent_name":"Relocation"},"Structs/Relocation.html#/s:vV4LLVM10Relocation6offsetSi":{"name":"offset","abstract":"<p>The offset the relocated symbol resides at.</p>","parent_name":"Relocation"},"Structs/Relocation.html#/s:vV4LLVM10Relocation6symbolVS_6Symbol":{"name":"symbol","abstract":"<p>The symbol that is the subject of the relocation.</p>","parent_name":"Relocation"},"Structs/Relocation.html#/s:vV4LLVM10Relocation8typeNameSS":{"name":"typeName","abstract":"<p>Get a string that represents the type of this relocation for display","parent_name":"Relocation"},"Structs/Symbol.html#/s:vV4LLVM6Symbol4nameSS":{"name":"name","abstract":"<p>The symbol name.</p>","parent_name":"Symbol"},"Structs/Symbol.html#/s:vV4LLVM6Symbol4sizeSi":{"name":"size","abstract":"<p>The size of the data in the symbol.</p>","parent_name":"Symbol"},"Structs/Symbol.html#/s:vV4LLVM6Symbol7addressSi":{"name":"address","abstract":"<p>The address of the symbol in the object file.</p>","parent_name":"Symbol"},"Structs/Section.html#/s:vV4LLVM7Section4nameSS":{"name":"name","abstract":"<p>The section&rsquo;s declared name.</p>","parent_name":"Section"},"Structs/Section.html#/s:vV4LLVM7Section4sizeSi":{"name":"size","abstract":"<p>The size of the contents of the section.</p>","parent_name":"Section"},"Structs/Section.html#/s:vV4LLVM7Section8contentsSS":{"name":"contents","abstract":"<p>The raw contents of the section.</p>","parent_name":"Section"},"Structs/Section.html#/s:vV4LLVM7Section7addressSi":{"name":"address","abstract":"<p>The address of the section in the object file.</p>","parent_name":"Section"},"Structs/Section.html#/s:vV4LLVM7Section11relocationsCS_18RelocationSequence":{"name":"relocations","abstract":"<p>Returns a sequence of all the relocations in this object file.</p>","parent_name":"Section"},"Structs/MetadataType.html#/s:FV4LLVM12MetadataTypecFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Creates an embedded metadata type for the given LLVM type object.</p>","parent_name":"MetadataType"},"Structs/MetadataType.html#/s:FV4LLVM12MetadataType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"MetadataType"},"Structs/LabelType.html#/s:FV4LLVM9LabelTypecFT_S0_":{"name":"init()","abstract":"<p>Creates a code label.</p>","parent_name":"LabelType"},"Structs/LabelType.html#/s:FV4LLVM9LabelType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"LabelType"},"Structs/IntType.html#/s:vV4LLVM7IntType5widthSi":{"name":"width","abstract":"<p>Retrieves the bit width of this integer type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:FV4LLVM7IntTypecFT5widthSi_S0_":{"name":"init(width:)","abstract":"<p>Creates an integer type with the specified bit width.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:ZvV4LLVM7IntType4int1S0_":{"name":"int1","abstract":"<p>Retrieves the <code>i1</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:ZvV4LLVM7IntType4int8S0_":{"name":"int8","abstract":"<p>Retrieves the <code>i8</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:ZvV4LLVM7IntType5int16S0_":{"name":"int16","abstract":"<p>Retrieves the <code>i16</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:ZvV4LLVM7IntType5int32S0_":{"name":"int32","abstract":"<p>Retrieves the <code>i32</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:ZvV4LLVM7IntType5int64S0_":{"name":"int64","abstract":"<p>Retrieves the <code>i64</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:ZvV4LLVM7IntType6int128S0_":{"name":"int128","abstract":"<p>Retrieves the <code>i128</code> type.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:FV4LLVM7IntType4zeroFT_PS_7IRValue_":{"name":"zero()","abstract":"<p>Retrieves an integer value of this type&rsquo;s bit width consisting of all","parent_name":"IntType"},"Structs/IntType.html#/s:FV4LLVM7IntType8constantuRxs15UnsignedIntegerrFTx10signExtendSb_GVS_8ConstantOS_8Unsigned_":{"name":"constant(_:signExtend:)","abstract":"<p>Creates an unsigned integer constant value with the given Swift integer value.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:FV4LLVM7IntType8constantuRxs13SignedIntegerrFTx10signExtendSb_GVS_8ConstantOS_6Signed_":{"name":"constant(_:signExtend:)","abstract":"<p>Creates a signed integer constant value with the given Swift integer value.</p>","parent_name":"IntType"},"Structs/IntType.html#/s:FV4LLVM7IntType7allOnesFT_PS_7IRValue_":{"name":"allOnes()","abstract":"<p>Retrieves an integer value of this type&rsquo;s bit width consisting of all","parent_name":"IntType"},"Structs/IntType.html#/s:FV4LLVM7IntType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"IntType"},"Structs/TerminatorInstruction.html#/s:FV4LLVM21TerminatorInstructioncFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Creates a <code>TerminatorInstruction</code> from an <code>LLVMValueRef</code> object.</p>","parent_name":"TerminatorInstruction"},"Structs/TerminatorInstruction.html#/s:vV4LLVM21TerminatorInstruction14successorCountSi":{"name":"successorCount","abstract":"<p>Retrieves the number of successors of this terminator instruction.</p>","parent_name":"TerminatorInstruction"},"Structs/TerminatorInstruction.html#/s:FV4LLVM21TerminatorInstruction12getSuccessorFT2atSi_GSqVS_10BasicBlock_":{"name":"getSuccessor(at:)","abstract":"<p>Returns the successor block at the specified index, if it exists.</p>","parent_name":"TerminatorInstruction"},"Structs/TerminatorInstruction.html#/s:FV4LLVM21TerminatorInstruction12setSuccessorFT2atSi2toVS_10BasicBlock_T_":{"name":"setSuccessor(at:to:)","abstract":"<p>Updates the successor block at the specified index.</p>","parent_name":"TerminatorInstruction"},"Structs/Instruction.html#/s:FV4LLVM11InstructioncFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Creates an <code>Intruction</code> from an <code>LLVMValueRef</code> object.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:FV4LLVM11Instruction6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:vV4LLVM11Instruction6opCodeOS_6OpCode":{"name":"opCode","abstract":"<p>Retrieves the opcode associated with this <code>Instruction</code>.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:FV4LLVM11Instruction8previousFT_GSqS0__":{"name":"previous()","abstract":"<p>Obtain the instruction that occurs before this one, if it exists.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:FV4LLVM11Instruction4nextFT_GSqS0__":{"name":"next()","abstract":"<p>Obtain the instruction that occurs after this one, if it exists.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:vV4LLVM11Instruction11parentBlockGSqVS_10BasicBlock_":{"name":"parentBlock","abstract":"<p>Retrieves the parent basic block that contains this instruction, if it","parent_name":"Instruction"},"Structs/Instruction.html#/s:vV4LLVM11Instruction8firstUseGSqVS_3Use_":{"name":"firstUse","abstract":"<p>Retrieves the first use of this instruction.</p>","parent_name":"Instruction"},"Structs/Instruction.html#/s:vV4LLVM11Instruction4usesGVs11AnySequenceVS_3Use_":{"name":"uses","abstract":"<p>Retrieves the sequence of instructions that use the value from this","parent_name":"Instruction"},"Structs/Global.html#/s:vV4LLVM6Global23isExternallyInitializedSb":{"name":"isExternallyInitialized","abstract":"<p>Returns whether this global variable has no initializer because it makes","parent_name":"Global"},"Structs/Global.html#/s:vV4LLVM6Global11initializerGSqPS_7IRValue__":{"name":"initializer","abstract":"<p>Retrieves the initializer for this global variable, if it exists.</p>","parent_name":"Global"},"Structs/Global.html#/s:vV4LLVM6Global16isGlobalConstantSb":{"name":"isGlobalConstant","abstract":"<p>Returns whether this global variable is a constant, whether or not the","parent_name":"Global"},"Structs/Global.html#/s:vV4LLVM6Global13isThreadLocalSb":{"name":"isThreadLocal","abstract":"<p>Returns whether this global variable is thread-local.  That is, returns","parent_name":"Global"},"Structs/Global.html#/s:vV4LLVM6Global15threadLocalModeOS_16ThreadLocalModel":{"name":"threadLocalMode","abstract":"<p>Accesses the model of reference for this global variable if it is","parent_name":"Global"},"Structs/Global.html#/s:FV4LLVM6Global8previousFT_GSqS0__":{"name":"previous()","abstract":"<p>Retrieves the previous global in the module, if there is one.</p>","parent_name":"Global"},"Structs/Global.html#/s:FV4LLVM6Global4nextFT_GSqS0__":{"name":"next()","abstract":"<p>Retrieves the next global in the module, if there is one.</p>","parent_name":"Global"},"Structs/Global.html#/s:FV4LLVM6Global6deleteFT_T_":{"name":"delete()","abstract":"<p>Deletes the global variable from its containing module.</p>","parent_name":"Global"},"Structs/Global.html#/s:FV4LLVM6Global6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Global"},"Structs/FunctionType.html#/s:vV4LLVM12FunctionType8argTypesGSaPS_6IRType__":{"name":"argTypes","abstract":"<p>The list of argument types.</p>","parent_name":"FunctionType"},"Structs/FunctionType.html#/s:vV4LLVM12FunctionType10returnTypePS_6IRType_":{"name":"returnType","abstract":"<p>The return type of this function type.</p>","parent_name":"FunctionType"},"Structs/FunctionType.html#/s:vV4LLVM12FunctionType8isVarArgSb":{"name":"isVarArg","abstract":"<p>Returns whether this function is variadic.</p>","parent_name":"FunctionType"},"Structs/FunctionType.html#/s:FV4LLVM12FunctionTypecFT8argTypesGSaPS_6IRType__10returnTypePS1__8isVarArgSb_S0_":{"name":"init(argTypes:returnType:isVarArg:)","abstract":"<p>Creates a function type with the given argument types and return type.</p>","parent_name":"FunctionType"},"Structs/FunctionType.html#/s:FV4LLVM12FunctionType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"FunctionType"},"Structs/Parameter.html#/s:FV4LLVM9Parameter4nextFT_GSqS0__":{"name":"next()","abstract":"<p>Retrieves the next parameter, if it exists.</p>","parent_name":"Parameter"},"Structs/Parameter.html#/s:FV4LLVM9Parameter8previousFT_GSqS0__":{"name":"previous()","abstract":"<p>Retrieves the previous parameter, if it exists.</p>","parent_name":"Parameter"},"Structs/Parameter.html#/s:FV4LLVM9Parameter6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Parameter"},"Structs/Constant.html#/s:FV4LLVM8Constant6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM constant object.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:FV4LLVM8Constant4castuRd__S_30IntegralConstantRepresentationrFT2toVS_7IntType_GS0_qd___":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given integral type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:FV4LLVM8Constant4castFT2toOS_9FloatType_GS0_OS_8Floating_":{"name":"cast(to:)","abstract":"<p>Creates a constant cast to a given floating type.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constant6negateFTGS0_OS_6Signed_16overflowBehaviorOS_16OverflowBehavior_GS0_S1__":{"name":"negate(_:overflowBehavior:)","abstract":"<p>Creates a constant negate operation to negate a value.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constant3addFTGS0_x_GS0_x_16overflowBehaviorOS_16OverflowBehavior_GS0_x_":{"name":"add(_:_:overflowBehavior:)","abstract":"<p>Creates a constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi1pFTGS0_x_GS0_x__GS0_x_":{"name":"+(_:_:)","abstract":"<p>A constant add operation to add two homogenous constants together.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constant8subtractFTGS0_x_GS0_x_16overflowBehaviorOS_16OverflowBehavior_GS0_x_":{"name":"subtract(_:_:overflowBehavior:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi1sFTGS0_x_GS0_x__GS0_x_":{"name":"-(_:_:)","abstract":"<p>Creates a constant sub operation to subtract two homogenous constants.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constant8multiplyFTGS0_x_GS0_x_16overflowBehaviorOS_16OverflowBehavior_GS0_x_":{"name":"multiply(_:_:overflowBehavior:)","abstract":"<p>Creates a constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi1mFTGS0_x_GS0_x__GS0_x_":{"name":"*(_:_:)","abstract":"<p>A constant multiply operation with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi1dFTGS0_x_GS0_x__GS0_x_":{"name":"/(_:_:)","abstract":"<p>A constant divide operation that provides the remainder after divison of","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi1rFTGS0_x_GS0_x__GS0_x_":{"name":"%(_:_:)","abstract":"<p>A constant remainder operation that provides the remainder after divison","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi2eeFTGS0_x_GS0_x__GS0_OS_6Signed_":{"name":"==(_:_:)","abstract":"<p>A constant equality comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi1lFTGS0_x_GS0_x__GS0_OS_6Signed_":{"name":"<(_:_:)","abstract":"<p>A constant less-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi1gFTGS0_x_GS0_x__GS0_OS_6Signed_":{"name":">(_:_:)","abstract":"<p>A constant greater-than comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi2leFTGS0_x_GS0_x__GS0_OS_6Signed_":{"name":"<=(_:_:)","abstract":"<p>A constant less-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFV4LLVM8Constantoi2geFTGS0_x_GS0_x__GS0_OS_6Signed_":{"name":">=(_:_:)","abstract":"<p>A constant greater-than-or-equal comparison between two values.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFe4LLVMRxS_30IntegralConstantRepresentationrVS_8Constantop1nFGS1_x_GS1_x_":{"name":"!(_:)","abstract":"<p>A constant bitwise logical not with the given integral value as an operand.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFe4LLVMRxS_30IntegralConstantRepresentationrVS_8Constantoi1aFTGS1_x_GS1_x__GS1_x_":{"name":"&(_:_:)","abstract":"<p>A constant bitwise logical AND with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFe4LLVMRxS_30IntegralConstantRepresentationrVS_8Constantoi1oFTGS1_x_GS1_x__GS1_x_":{"name":"|(_:_:)","abstract":"<p>A constant bitwise logical OR with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFe4LLVMRxS_30IntegralConstantRepresentationrVS_8Constantoi1xFTGS1_x_GS1_x__GS1_x_":{"name":"^(_:_:)","abstract":"<p>A constant bitwise logical exclusive OR with the given values as operands.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFe4LLVMRxS_30IntegralConstantRepresentationrVS_8Constantoi2llFTGS1_x_GS1_x__GS1_x_":{"name":"<<(_:_:)","abstract":"<p>A constant left-shift of the first value by the second amount.</p>","parent_name":"Constant"},"Structs/Constant.html#/s:ZFe4LLVMRxS_30IntegralConstantRepresentationrVS_8Constant6selectuRd__S_22ConstantRepresentationrFTGS1_x_4thenGS1_qd___4elseGS1_qd____GS1_qd___":{"name":"select(_:then:else:)","abstract":"<p>A constant select using the given condition to select among two values.</p>","parent_name":"Constant"},"Structs/Invoke.html#/s:FV4LLVM6Invoke6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Invoke"},"Structs/Invoke.html#/s:vV4LLVM6Invoke17normalDestinationVS_10BasicBlock":{"name":"normalDestination","abstract":"<p>Accesses the destination block the flow of control will transfer to if an","parent_name":"Invoke"},"Structs/Invoke.html#/s:vV4LLVM6Invoke17unwindDestinationVS_10BasicBlock":{"name":"unwindDestination","abstract":"<p>Accesses the destination block that exception unwinding will jump to.</p>","parent_name":"Invoke"},"Structs/Call.html#/s:FV4LLVM4Call6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Call"},"Structs/Call.html#/s:vV4LLVM4Call13argumentCountSi":{"name":"argumentCount","abstract":"<p>Retrieves the number of argument operands passed by this call.</p>","parent_name":"Call"},"Structs/Call.html#/s:vV4LLVM4Call17callingConventionOS_17CallingConvention":{"name":"callingConvention","abstract":"<p>Accesses the calling convention for this function call.</p>","parent_name":"Call"},"Structs/Call.html#/s:vV4LLVM4Call10isTailCallSb":{"name":"isTailCall","abstract":"<p>Returns whether this function call is a tail call.  That is, if the callee","parent_name":"Call"},"Structs/Call.html#/s:FV4LLVM4Call21setParameterAlignmentFT2atSi2toSi_T_":{"name":"setParameterAlignment(at:to:)","abstract":"<p>Retrieves the alignment of the parameter at the given index.</p>","parent_name":"Call"},"Structs/BasicBlock/Address.html#/s:FVV4LLVM10BasicBlock7Address6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Address"},"Structs/BasicBlock.html#/s:FV4LLVM10BasicBlockcFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Creates a <code>BasicBlock</code> from an <code>LLVMBasicBlockRef</code> object.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:FV4LLVM10BasicBlock6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:vV4LLVM10BasicBlock16firstInstructionGSqVS_11Instruction_":{"name":"firstInstruction","abstract":"<p>Returns the first instruction in the basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:vV4LLVM10BasicBlock15lastInstructionGSqVS_11Instruction_":{"name":"lastInstruction","abstract":"<p>Returns the first instruction in the basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:vV4LLVM10BasicBlock10terminatorGSqVS_21TerminatorInstruction_":{"name":"terminator","abstract":"<p>Returns the terminator instruction if this basic block is well formed or","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:vV4LLVM10BasicBlock6parentGSqCS_8Function_":{"name":"parent","abstract":"<p>Returns the parent function of this basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:FV4LLVM10BasicBlock4nextFT_GSqS0__":{"name":"next()","abstract":"<p>Returns the basic block following this basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:FV4LLVM10BasicBlock8previousFT_GSqS0__":{"name":"previous()","abstract":"<p>Returns the basic block before this basic block, if it exists.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:vV4LLVM10BasicBlock12instructionsGVs11AnySequenceVS_11Instruction_":{"name":"instructions","abstract":"<p>Returns a sequence of the Instructions that make up this basic block.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:FV4LLVM10BasicBlock16removeFromParentFT_T_":{"name":"removeFromParent()","abstract":"<p>Removes this basic block from a function but keeps it alive.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:FV4LLVM10BasicBlock10moveBeforeFS0_T_":{"name":"moveBefore(_:)","abstract":"<p>Moves this basic block before the given basic block.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:FV4LLVM10BasicBlock9moveAfterFS0_T_":{"name":"moveAfter(_:)","abstract":"<p>Moves this basic block after the given basic block.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock.html#/s:FV4LLVM10BasicBlock6deleteFT_T_":{"name":"delete()","abstract":"<p>Deletes the basic block from its containing function.</p>","parent_name":"BasicBlock"},"Structs/BasicBlock/Address.html":{"name":"Address","abstract":"<p>An <code>Address</code> represents a function-relative address of a basic block for","parent_name":"BasicBlock"},"Structs/ArrayType.html#/s:vV4LLVM9ArrayType11elementTypePS_6IRType_":{"name":"elementType","abstract":"<p>The type of elements in this array.</p>","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:vV4LLVM9ArrayType5countSi":{"name":"count","abstract":"<p>The number of elements in this array.</p>","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:FV4LLVM9ArrayTypecFT11elementTypePS_6IRType_5countSi_S0_":{"name":"init(elementType:count:)","abstract":"<p>Creates an array type from an underlying element type and count.</p>","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:ZFV4LLVM9ArrayType8constantFTGSaPS_7IRValue__4typePS_6IRType__PS1__":{"name":"constant(_:type:)","abstract":"<p>Creates a constant array value from a list of IR values of a common type.</p>","parent_name":"ArrayType"},"Structs/ArrayType.html#/s:FV4LLVM9ArrayType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"ArrayType"},"Structs/Alias.html#/s:FV4LLVM5Alias6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Alias"},"Structs/Alias.html":{"name":"Alias","abstract":"<p>An <code>Alias</code> represents a global alias in an LLVM module - a new symbol and"},"Structs/ArrayType.html":{"name":"ArrayType","abstract":"<p><code>ArrayType</code> is a very simple derived type that arranges elements"},"Structs/BasicBlock.html":{"name":"BasicBlock","abstract":"<p>A <code>BasicBlock</code> represents a basic block in an LLVM IR program.  A basic"},"Structs/Call.html":{"name":"Call","abstract":"<p>Represents a simple function call.</p>"},"Structs/Invoke.html":{"name":"Invoke","abstract":"<p>Represents a function call that may transfer control to an exception handler.</p>"},"Structs/Constant.html":{"name":"Constant","abstract":"<p>A <code>Constant</code> represents a value initialized to a constant.  Constant values"},"Structs/Parameter.html":{"name":"Parameter","abstract":"<p>A <code>Parameter</code> represents an index into the parameters of a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Function.html\">Function</a></code>.</p>"},"Structs/FunctionType.html":{"name":"FunctionType","abstract":"<p><code>FunctionType</code> represents a function&rsquo;s type signature.  It consists of a"},"Structs/Global.html":{"name":"Global","abstract":"<p>A <code>Global</code> represents a region of memory allocated at compile time instead"},"Structs/Instruction.html":{"name":"Instruction","abstract":"<p>An <code>Instruction</code> represents an instruction residing in a basic block.</p>"},"Structs/TerminatorInstruction.html":{"name":"TerminatorInstruction","abstract":"<p>A <code>TerminatorInstruction</code> represents an instruction that terminates a"},"Structs/IntType.html":{"name":"IntType","abstract":"<p>The <code>IntType</code> represents an integral value of a specified bit width.</p>"},"Structs/LabelType.html":{"name":"LabelType","abstract":"<p><code>LabelType</code> represents code labels.</p>"},"Structs/MetadataType.html":{"name":"MetadataType","abstract":"<p>The <code>MetadataType</code> type represents embedded metadata. No derived types may"},"Structs/Section.html":{"name":"Section","abstract":"<p>A Section represents one of the binary sections in an object file.</p>"},"Structs/Symbol.html":{"name":"Symbol","abstract":"<p>A symbol is a top-level addressable entity in an object file.</p>"},"Structs/Relocation.html":{"name":"Relocation","abstract":"<p>A Relocation represents the contents of a relocated symbol in the dynamic"},"Structs/PhiNode.html":{"name":"PhiNode","abstract":"<p>A <code>PhiNode</code> object represents a PHI node.</p>"},"Structs/PointerType.html":{"name":"PointerType","abstract":"<p><code>PointerType</code> is used to specify memory locations. Pointers are commonly"},"Structs/StructType.html":{"name":"StructType","abstract":"<p><code>StructType</code> is used to represent a collection of data members together in"},"Structs/Switch.html":{"name":"Switch","abstract":"<p>A <code>Switch</code> represents a <code>switch</code> instruction.  A <code>switch</code> instruction"},"Structs/TokenType.html":{"name":"TokenType","abstract":"<p><code>TokenType</code> is used when a value is associated with an instruction but all"},"Structs/Use.html":{"name":"Use","abstract":"<p><code>Use</code> represents an iterator over the uses and users of a particular value"},"Structs/VectorType.html":{"name":"VectorType","abstract":"<p>A <code>VectorType</code> is a simple derived type that represents a vector of"},"Structs/VoidType.html":{"name":"VoidType","abstract":"<p>The <code>Void</code> type represents any value and has no size.</p>"},"Structs/X86MMXType.html":{"name":"X86MMXType","abstract":"<p><code>X86MMXType</code> represents a value held in an MMX register on an x86 machine.</p>"},"Protocols/IRValue.html#/s:FP4LLVM7IRValue6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isAArgumentSb":{"name":"isAArgument","abstract":"<p>Whether or not the underlying LLVM value is an <code>Argument</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isABasicBlockSb":{"name":"isABasicBlock","abstract":"<p>Whether or not the underlying LLVM value is a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/BasicBlock.html\">BasicBlock</a></code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue12isAInlineAsmSb":{"name":"isAInlineAsm","abstract":"<p>Whether or not the underlying LLVM value is <code>InlineAsm</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue7isAUserSb":{"name":"isAUser","abstract":"<p>Whether or not the underlying LLVM value is a <code>User</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isAConstantSb":{"name":"isAConstant","abstract":"<p>Whether or not the underlying LLVM value is a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Constant.html\">Constant</a></code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue15isABlockAddressSb":{"name":"isABlockAddress","abstract":"<p>Whether or not the underlying LLVM value is a <code>BlockAddress</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue24isAConstantAggregateZeroSb":{"name":"isAConstantAggregateZero","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantAggregateZero</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue16isAConstantArraySb":{"name":"isAConstantArray","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantArray</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue25isAConstantDataSequentialSb":{"name":"isAConstantDataSequential","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantDataSequential</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue20isAConstantDataArraySb":{"name":"isAConstantDataArray","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantDataArray</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue21isAConstantDataVectorSb":{"name":"isAConstantDataVector","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantDataVector</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue15isAConstantExprSb":{"name":"isAConstantExpr","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantExpr</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAConstantFPSb":{"name":"isAConstantFP","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantFP</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue14isAConstantIntSb":{"name":"isAConstantInt","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantInt</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue22isAConstantPointerNullSb":{"name":"isAConstantPointerNull","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantPointerNull</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isAConstantStructSb":{"name":"isAConstantStruct","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantStruct</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue20isAConstantTokenNoneSb":{"name":"isAConstantTokenNone","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantTokenNone</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isAConstantVectorSb":{"name":"isAConstantVector","abstract":"<p>Whether or not the underlying LLVM value is a <code>ConstantVector</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue14isAGlobalValueSb":{"name":"isAGlobalValue","abstract":"<p>Whether or not the underlying LLVM value is a <code>GlobalValue</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue14isAGlobalAliasSb":{"name":"isAGlobalAlias","abstract":"<p>Whether or not the underlying LLVM value is a <code>GlobalAlias</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue15isAGlobalObjectSb":{"name":"isAGlobalObject","abstract":"<p>Whether or not the underlying LLVM value is a <code>GlobalObject</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isAFunctionSb":{"name":"isAFunction","abstract":"<p>Whether or not the underlying LLVM value is a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/Function.html\">Function</a></code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isAGlobalVariableSb":{"name":"isAGlobalVariable","abstract":"<p>Whether or not the underlying LLVM value is a <code>GlobalVariable</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAUndefValueSb":{"name":"isAUndefValue","abstract":"<p>Whether or not the underlying LLVM value is an <code>UndefValue</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue14isAInstructionSb":{"name":"isAInstruction","abstract":"<p>Whether or not the underlying LLVM value is an <code><a href=\"36f8f5912051ae747ef441d6511ca4cbStructs/Instruction.html\">Instruction</a></code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isABinaryOperatorSb":{"name":"isABinaryOperator","abstract":"<p>Whether or not the underlying LLVM value is a <code>BinaryOperator</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isACallInstSb":{"name":"isACallInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CallInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue16isAIntrinsicInstSb":{"name":"isAIntrinsicInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>IntrinsicInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue19isADbgInfoIntrinsicSb":{"name":"isADbgInfoIntrinsic","abstract":"<p>Whether or not the underlying LLVM value is a <code>DbgInfoIntrinsic</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isADbgDeclareInstSb":{"name":"isADbgDeclareInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>DbgDeclareInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue15isAMemIntrinsicSb":{"name":"isAMemIntrinsic","abstract":"<p>Whether or not the underlying LLVM value is a <code>MemIntrinsic</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAMemCpyInstSb":{"name":"isAMemCpyInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>MemCpyInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue14isAMemMoveInstSb":{"name":"isAMemMoveInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>MemMoveInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAMemSetInstSb":{"name":"isAMemSetInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>MemSetInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue10isACmpInstSb":{"name":"isACmpInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CmpInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isAFCmpInstSb":{"name":"isAFCmpInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FCmpInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isAICmpInstSb":{"name":"isAICmpInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>ICmpInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue21isAExtractElementInstSb":{"name":"isAExtractElementInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>ExtractElementInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue20isAGetElementPtrInstSb":{"name":"isAGetElementPtrInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>GetElementPtrInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue20isAInsertElementInstSb":{"name":"isAInsertElementInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>InsertElementInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue18isAInsertValueInstSb":{"name":"isAInsertValueInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>InsertValueInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isALandingPadInstSb":{"name":"isALandingPadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>LandingPadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue10isAPHINodeSb":{"name":"isAPHINode","abstract":"<p>Whether or not the underlying LLVM value is a <code>PHINode</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isASelectInstSb":{"name":"isASelectInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>SelectInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue20isAShuffleVectorInstSb":{"name":"isAShuffleVectorInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ShuffleVectorInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue12isAStoreInstSb":{"name":"isAStoreInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>StoreInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isATerminatorInstSb":{"name":"isATerminatorInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>TerminatorInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isABranchInstSb":{"name":"isABranchInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>BranchInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isAIndirectBrInstSb":{"name":"isAIndirectBrInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>IndirectBrInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAInvokeInstSb":{"name":"isAInvokeInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>InvokeInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAReturnInstSb":{"name":"isAReturnInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ReturnInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isASwitchInstSb":{"name":"isASwitchInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>SwitchInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue18isAUnreachableInstSb":{"name":"isAUnreachableInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>UnreachableInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAResumeInstSb":{"name":"isAResumeInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ResumeInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue20isACleanupReturnInstSb":{"name":"isACleanupReturnInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CleanupReturnInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue18isACatchReturnInstSb":{"name":"isACatchReturnInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CatchReturnInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isAFuncletPadInstSb":{"name":"isAFuncletPadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FuncletPadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue15isACatchPadInstSb":{"name":"isACatchPadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CatchPadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue17isACleanupPadInstSb":{"name":"isACleanupPadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CleanupPadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue19isAUnaryInstructionSb":{"name":"isAUnaryInstruction","abstract":"<p>Whether or not the underlying LLVM value is a <code>UnaryInstruction</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAAllocaInstSb":{"name":"isAAllocaInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>AllocaInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isACastInstSb":{"name":"isACastInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>CastInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue20isAAddrSpaceCastInstSb":{"name":"isAAddrSpaceCastInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>AddrSpaceCastInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue14isABitCastInstSb":{"name":"isABitCastInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>BitCastInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue12isAFPExtInstSb":{"name":"isAFPExtInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FPExtInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAFPToSIInstSb":{"name":"isAFPToSIInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FPToSIInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAFPToUIInstSb":{"name":"isAFPToUIInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FPToUIInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue14isAFPTruncInstSb":{"name":"isAFPTruncInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>FPTruncInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue15isAIntToPtrInstSb":{"name":"isAIntToPtrInst","abstract":"<p>Whether or not the underlying LLVM value is an <code>IntToPtrInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue15isAPtrToIntInstSb":{"name":"isAPtrToIntInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>PtrToIntInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isASExtInstSb":{"name":"isASExtInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>SExtInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isASIToFPInstSb":{"name":"isASIToFPInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>SIToFPInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue12isATruncInstSb":{"name":"isATruncInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>TruncInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue13isAUIToFPInstSb":{"name":"isAUIToFPInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>UIToFPInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isAZExtInstSb":{"name":"isAZExtInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ZExtInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue19isAExtractValueInstSb":{"name":"isAExtractValueInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>ExtractValueInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue11isALoadInstSb":{"name":"isALoadInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>LoadInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue12isAVAArgInstSb":{"name":"isAVAArgInst","abstract":"<p>Whether or not the underlying LLVM value is a <code>VAArgInst</code></p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue4typePS_6IRType_":{"name":"type","abstract":"<p>Retrieves the type of this value.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue9alignmentSi":{"name":"alignment","abstract":"<p>Retrieves the alignment of this value.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue10isConstantSb":{"name":"isConstant","abstract":"<p>Returns whether this value is a constant.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue7isUndefSb":{"name":"isUndef","abstract":"<p>Returns whether this value has been initialized with the special <code>undef</code>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:vE4LLVMPS_7IRValue4nameSS":{"name":"name","abstract":"<p>Gets and sets the name for this value.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:FE4LLVMPS_7IRValue8constGEPFT7indicesGSaPS0____PS0__":{"name":"constGEP(indices:)","abstract":"<p>Perform a GEP (Get Element Pointer) with this value as the base.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:FE4LLVMPS_7IRValue14replaceAllUsesFT4withPS0___T_":{"name":"replaceAllUses(with:)","abstract":"<p>Replaces all uses of this value with the specified value.</p>","parent_name":"IRValue"},"Protocols/IRValue.html#/s:FE4LLVMPS_7IRValue4dumpFT_T_":{"name":"dump()","abstract":"<p>Dumps a representation of this value to stderr.</p>","parent_name":"IRValue"},"Protocols/IRType.html#/s:FP4LLVM6IRType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"IRType"},"Protocols/IRType.html#/s:FE4LLVMPS_6IRType4nullFT_PS_7IRValue_":{"name":"null()","abstract":"<p>Returns the special <code>null</code> value for this type.</p>","parent_name":"IRType"},"Protocols/IRType.html#/s:FE4LLVMPS_6IRType5undefFT_PS_7IRValue_":{"name":"undef()","abstract":"<p>Returns the special LLVM <code>undef</code> value for this type.</p>","parent_name":"IRType"},"Protocols/IRType.html#/s:FE4LLVMPS_6IRType16constPointerNullFT_PS_7IRValue_":{"name":"constPointerNull()","abstract":"<p>Returns the special LLVM constant <code>null</code> pointer value for this type","parent_name":"IRType"},"Protocols/IRType.html#/s:FE4LLVMPS_6IRType4dumpFT_T_":{"name":"dump()","abstract":"<p>Dumps a representation of this type to stderr.</p>","parent_name":"IRType"},"Protocols/IRGlobal.html#/s:vE4LLVMPS_8IRGlobal7linkageOS_7Linkage":{"name":"linkage","abstract":"<p>Retrieves the linkage information for this global.</p>","parent_name":"IRGlobal"},"Protocols/IRGlobal.html#/s:vE4LLVMPS_8IRGlobal10visibilityOS_10Visibility":{"name":"visibility","abstract":"<p>Retrieves the visibility style for this global.</p>","parent_name":"IRGlobal"},"Protocols/IRGlobal.html#/s:vE4LLVMPS_8IRGlobal12storageClassOS_12StorageClass":{"name":"storageClass","abstract":"<p>Retrieves the storage class for this global declaration.  For use with","parent_name":"IRGlobal"},"Protocols.html#/s:P4LLVM22ConstantRepresentation":{"name":"ConstantRepresentation","abstract":"<p>A protocol to which the phantom types for a constant&rsquo;s representation conform.</p>"},"Protocols.html#/s:P4LLVM30IntegralConstantRepresentation":{"name":"IntegralConstantRepresentation","abstract":"<p>A protocol to which the phantom types for integral constants conform.</p>"},"Protocols/IRGlobal.html":{"name":"IRGlobal","abstract":"<p>An <code>IRGlobal</code> is a value, alias, or function that exists at the top level of"},"Protocols/IRType.html":{"name":"IRType","abstract":"<p>An <code>IRType</code> is a type that is capable of lowering itself to an <code>LLVMTypeRef</code>"},"Protocols/IRValue.html":{"name":"IRValue","abstract":"<p>An <code>IRValue</code> is a type that is capable of lowering itself to an"},"Functions.html#/s:F4LLVMop1sFGVS_8ConstantOS_6Signed_GS0_S1__":{"name":"-(_:)","abstract":"<p>Creates a constant negate operation to negate an integral value.</p>"},"Functions.html#/s:F4LLVMop1sFGVS_8ConstantOS_8Floating_GS0_S1__":{"name":"-(_:)","abstract":"<p>Creates a constant negate operation to negate a floating value.</p>"},"Functions.html#/s:F4LLVM14initializeLLVMFT_T_":{"name":"initializeLLVM()","abstract":"<p>initializer that calls LLVM initialization functions only once.</p>"},"Extensions/String.html#/s:FE4LLVMSS6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"String"},"Extensions/Bool.html#/s:FE4LLVMSb6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Bool"},"Extensions/UInt64.html#/s:FE4LLVMVs6UInt646asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt64"},"Extensions/UInt32.html#/s:FE4LLVMVs6UInt326asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt32"},"Extensions/UInt16.html#/s:FE4LLVMVs6UInt166asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt16"},"Extensions/UInt8.html#/s:FE4LLVMVs5UInt86asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt8"},"Extensions/UInt.html#/s:FE4LLVMSu6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"UInt"},"Extensions/Int64.html#/s:FE4LLVMVs5Int646asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int64"},"Extensions/Int32.html#/s:FE4LLVMVs5Int326asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int32"},"Extensions/Int16.html#/s:FE4LLVMVs5Int166asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int16"},"Extensions/Int8.html#/s:FE4LLVMVs4Int86asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int8"},"Extensions/Int.html#/s:FE4LLVMSi6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Int"},"Extensions/LLVMValueRef.html#/s:FE4LLVMVs13OpaquePointer6asLLVMFT_S0_":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"LLVMValueRef"},"Extensions/LLVMValueRef.html":{"name":"LLVMValueRef"},"Extensions/Int.html":{"name":"Int"},"Extensions/Int8.html":{"name":"Int8"},"Extensions/Int16.html":{"name":"Int16"},"Extensions/Int32.html":{"name":"Int32"},"Extensions/Int64.html":{"name":"Int64"},"Extensions/UInt.html":{"name":"UInt"},"Extensions/UInt8.html":{"name":"UInt8"},"Extensions/UInt16.html":{"name":"UInt16"},"Extensions/UInt32.html":{"name":"UInt32"},"Extensions/UInt64.html":{"name":"UInt64"},"Extensions/Bool.html":{"name":"Bool"},"Extensions/String.html":{"name":"String"},"Enums/TargetMachineError.html#/s:FO4LLVM18TargetMachineError12couldNotEmitFMS0_FTSSOS_15CodegenFileType_S0_":{"name":"couldNotEmit","abstract":"<p>The target machine failed to emit the specified file type.","parent_name":"TargetMachineError"},"Enums/TargetMachineError.html#/s:FO4LLVM18TargetMachineError19couldNotEmitBitCodeFMS0_S0_":{"name":"couldNotEmitBitCode","abstract":"<p>The target machine failed to emit the bitcode for this module.</p>","parent_name":"TargetMachineError"},"Enums/TargetMachineError.html#/s:FO4LLVM18TargetMachineError13invalidTripleFMS0_FSSS0_":{"name":"invalidTriple","abstract":"<p>The specified target triple was invalid.</p>","parent_name":"TargetMachineError"},"Enums/TargetMachineError.html#/s:FO4LLVM18TargetMachineError20couldNotCreateTargetFMS0_FTSSSS_S0_":{"name":"couldNotCreateTarget","abstract":"<p>The Target is could not be created.","parent_name":"TargetMachineError"},"Enums/TargetMachineError.html#/s:vPs23CustomStringConvertible11descriptionSS":{"name":"description","parent_name":"TargetMachineError"},"Enums/CodegenFileType.html#/s:FO4LLVM15CodegenFileType6objectFMS0_S0_":{"name":"object","abstract":"<p>An object file (.o).</p>","parent_name":"CodegenFileType"},"Enums/CodegenFileType.html#/s:FO4LLVM15CodegenFileType8assemblyFMS0_S0_":{"name":"assembly","abstract":"<p>An assembly file (.asm).</p>","parent_name":"CodegenFileType"},"Enums/CodegenFileType.html#/s:FO4LLVM15CodegenFileType7bitCodeFMS0_S0_":{"name":"bitCode","abstract":"<p>An LLVM Bitcode file (.bc).</p>","parent_name":"CodegenFileType"},"Enums/CodegenFileType.html#/s:FO4LLVM15CodegenFileType6asLLVMFT_VSC19LLVMCodeGenFileType":{"name":"asLLVM()","abstract":"<p>Returns the underlying <code>LLVMCodeGenFileType</code> associated with this file","parent_name":"CodegenFileType"},"Enums/CodeModel.html#/s:FO4LLVM9CodeModel7defaultFMS0_S0_":{"name":"default","abstract":"<p>Generated code will assume the default for a particular target architecture.</p>","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:FO4LLVM9CodeModel10jitDefaultFMS0_S0_":{"name":"jitDefault","abstract":"<p>Generated code will assume the default for JITed code on a particular","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:FO4LLVM9CodeModel5smallFMS0_S0_":{"name":"small","abstract":"<p>The virtual address of code executed is known at link time. Additionally","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:FO4LLVM9CodeModel6kernelFMS0_S0_":{"name":"kernel","abstract":"<p>The kernel of an operating system is usually rather small but runs in the","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:FO4LLVM9CodeModel6mediumFMS0_S0_":{"name":"medium","abstract":"<p>In the medium model, the data section is split into two parts — the data","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:FO4LLVM9CodeModel5largeFMS0_S0_":{"name":"large","abstract":"<p>The large code model makes no assumptions about addresses and sizes of","parent_name":"CodeModel"},"Enums/CodeModel.html#/s:FO4LLVM9CodeModel6asLLVMFT_VSC13LLVMCodeModel":{"name":"asLLVM()","abstract":"<p>Returns the underlying <code>LLVMCodeModel</code> associated with this","parent_name":"CodeModel"},"Enums/RelocMode.html#/s:FO4LLVM9RelocMode7defaultFMS0_S0_":{"name":"default","abstract":"<p>Generated code will assume the default for a particular target architecture.</p>","parent_name":"RelocMode"},"Enums/RelocMode.html#/s:FO4LLVM9RelocMode6staticFMS0_S0_":{"name":"static","abstract":"<p>Generated code will exist at static offsets.</p>","parent_name":"RelocMode"},"Enums/RelocMode.html#/s:FO4LLVM9RelocMode3picFMS0_S0_":{"name":"pic","abstract":"<p>Generated code will be Position-Independent.</p>","parent_name":"RelocMode"},"Enums/RelocMode.html#/s:FO4LLVM9RelocMode12dynamicNoPICFMS0_S0_":{"name":"dynamicNoPIC","abstract":"<p>Generated code will not be Position-Independent and may be used in static","parent_name":"RelocMode"},"Enums/RelocMode.html#/s:FO4LLVM9RelocMode6asLLVMFT_VSC13LLVMRelocMode":{"name":"asLLVM()","abstract":"<p>Returns the underlying <code>LLVMRelocMode</code> associated with this","parent_name":"RelocMode"},"Enums/CodeGenOptLevel.html#/s:FO4LLVM15CodeGenOptLevel4noneFMS0_S0_":{"name":"none","abstract":"<p>Disable as many optimizations as possible. This doesn&rsquo;t completely","parent_name":"CodeGenOptLevel"},"Enums/CodeGenOptLevel.html#/s:FO4LLVM15CodeGenOptLevel4lessFMS0_S0_":{"name":"less","abstract":"<p>Optimize quickly without destroying debuggability.</p>","parent_name":"CodeGenOptLevel"},"Enums/CodeGenOptLevel.html#/s:FO4LLVM15CodeGenOptLevel7defaultFMS0_S0_":{"name":"default","abstract":"<p>Optimize for fast execution as much as possible without triggering","parent_name":"CodeGenOptLevel"},"Enums/CodeGenOptLevel.html#/s:FO4LLVM15CodeGenOptLevel10aggressiveFMS0_S0_":{"name":"aggressive","abstract":"<p>Optimize for fast execution as much as possible.</p>","parent_name":"CodeGenOptLevel"},"Enums/CodeGenOptLevel.html#/s:FO4LLVM15CodeGenOptLevel6asLLVMFT_VSC19LLVMCodeGenOptLevel":{"name":"asLLVM()","abstract":"<p>Returns the underlying <code>LLVMCodeGenOptLevel</code> associated with this","parent_name":"CodeGenOptLevel"},"Enums/ByteOrder.html#/s:FO4LLVM9ByteOrder12littleEndianFMS0_S0_":{"name":"littleEndian","abstract":"<p>Little-endian byte order. In a little-endian platform, the <em>least</em>","parent_name":"ByteOrder"},"Enums/ByteOrder.html#/s:FO4LLVM9ByteOrder9bigEndianFMS0_S0_":{"name":"bigEndian","abstract":"<p>Big-endian byte order. In a big-endian platform, the <em>most</em>","parent_name":"ByteOrder"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass13aggressiveDCEFMS0_S0_":{"name":"aggressiveDCE","abstract":"<p>This pass uses the SSA based Aggressive DCE algorithm.  This algorithm","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass14bitTrackingDCEFMS0_S0_":{"name":"bitTrackingDCE","abstract":"<p>This pass uses a bit-tracking DCE algorithm in order to remove","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass24alignmentFromAssumptionsFMS0_S0_":{"name":"alignmentFromAssumptions","abstract":"<p>Use assume intrinsics to set load/store alignments.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass17cfgSimplificationFMS0_S0_":{"name":"cfgSimplification","abstract":"<p>Merge basic blocks, eliminate unreachable blocks, simplify terminator","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass20deadStoreEliminationFMS0_S0_":{"name":"deadStoreElimination","abstract":"<p>This pass deletes stores that are post-dominated by must-aliased stores","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass10scalarizerFMS0_S0_":{"name":"scalarizer","abstract":"<p>Converts vector operations into scalar operations.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass21mergedLoadStoreMotionFMS0_S0_":{"name":"mergedLoadStoreMotion","abstract":"<p>This pass merges loads and stores in diamonds. Loads are hoisted into the","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass3gvnFMS0_S0_":{"name":"gvn","abstract":"<p>This pass performs global value numbering and redundant load elimination","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass14indVarSimplifyFMS0_S0_":{"name":"indVarSimplify","abstract":"<p>Transform induction variables in a program to all use a single canonical","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass20instructionCombiningFMS0_S0_":{"name":"instructionCombining","abstract":"<p>Combine instructions to form fewer, simple instructions. This pass does","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass13jumpThreadingFMS0_S0_":{"name":"jumpThreading","abstract":"<p>Thread control through mult-pred/multi-succ blocks where some preds","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass4licmFMS0_S0_":{"name":"licm","abstract":"<p>This pass is a loop invariant code motion and memory promotion pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass12loopDeletionFMS0_S0_":{"name":"loopDeletion","abstract":"<p>This pass performs DCE of non-infinite loops that it can prove are dead.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass9loopIdiomFMS0_S0_":{"name":"loopIdiom","abstract":"<p>This pass recognizes and replaces idioms in loops.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass10loopRotateFMS0_S0_":{"name":"loopRotate","abstract":"<p>This pass is a simple loop rotating pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass10loopRerollFMS0_S0_":{"name":"loopReroll","abstract":"<p>This pass is a simple loop rerolling pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass10loopUnrollFMS0_S0_":{"name":"loopUnroll","abstract":"<p>This pass is a simple loop unrolling pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass12loopUnswitchFMS0_S0_":{"name":"loopUnswitch","abstract":"<p>This pass is a simple loop unswitching pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass9memCpyOptFMS0_S0_":{"name":"memCpyOpt","abstract":"<p>This pass performs optimizations related to eliminating <code>memcpy</code> calls","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass23partiallyInlineLibCallsFMS0_S0_":{"name":"partiallyInlineLibCalls","abstract":"<p>Tries to inline the fast path of library calls such as sqrt.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass11lowerSwitchFMS0_S0_":{"name":"lowerSwitch","abstract":"<p>This pass converts SwitchInst instructions into a sequence of chained","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass23promoteMemoryToRegisterFMS0_S0_":{"name":"promoteMemoryToRegister","abstract":"<p>This pass is used to promote memory references to","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass11reassociateFMS0_S0_":{"name":"reassociate","abstract":"<p>This pass reassociates commutative expressions in an order that","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass4sccpFMS0_S0_":{"name":"sccp","abstract":"<p>Sparse conditional constant propagation.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass20scalarReplAggregatesFMS0_S0_":{"name":"scalarReplAggregates","abstract":"<p>Replace aggregates or pieces of aggregates with scalar SSA values.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass23scalarReplAggregatesSSAFMS0_S0_":{"name":"scalarReplAggregatesSSA","abstract":"<p>Replace aggregates or pieces of aggregates with scalar SSA values.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass16simplifyLibCallsFMS0_S0_":{"name":"simplifyLibCalls","abstract":"<p>Tries to inline the fast path of library calls such as sqrt.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass19tailCallEliminationFMS0_S0_":{"name":"tailCallElimination","abstract":"<p>This pass eliminates call instructions to the current function which occur","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass19constantPropagationFMS0_S0_":{"name":"constantPropagation","abstract":"<p>A worklist driven constant propagation pass.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass22demoteMemoryToRegisterFMS0_S0_":{"name":"demoteMemoryToRegister","abstract":"<p>This pass is used to demote registers to memory references. It basically","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass26correlatedValuePropagationFMS0_S0_":{"name":"correlatedValuePropagation","abstract":"<p>Propagate CFG-derived value information</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass8earlyCSEFMS0_S0_":{"name":"earlyCSE","abstract":"<p>This pass performs a simple and fast CSE pass over the dominator tree.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass20lowerExpectIntrinsicFMS0_S0_":{"name":"lowerExpectIntrinsic","abstract":"<p>Removes <code>llvm.expect</code> intrinsics and creates <q>block_weights</q> metadata.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass22typeBasedAliasAnalysisFMS0_S0_":{"name":"typeBasedAliasAnalysis","abstract":"<p>Adds metadata to LLVM IR types and performs metadata-based TBAA.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass15scopedNoAliasAAFMS0_S0_":{"name":"scopedNoAliasAA","abstract":"<p>Adds metadata to LLVM IR types and performs metadata-based scoped no-alias","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass18basicAliasAnalysisFMS0_S0_":{"name":"basicAliasAnalysis","abstract":"<p>LLVM&rsquo;s primary stateless and local alias analysis.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass8verifierFMS0_S0_":{"name":"verifier","abstract":"<p>Runs the LLVM IR Verifier to sanity check the results of passes.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass13alwaysInlinerFMS0_S0_":{"name":"alwaysInliner","abstract":"<p>A pass to inline and remove functions marked as <q>always_inline</q>.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass17argumentPromotionFMS0_S0_":{"name":"argumentPromotion","abstract":"<p>This pass promotes <q>by reference</q> arguments to be passed by value if the","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass13constantMergeFMS0_S0_":{"name":"constantMerge","abstract":"<p>This function returns a new pass that merges duplicate global constants","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass18deadArgEliminationFMS0_S0_":{"name":"deadArgElimination","abstract":"<p>This pass removes arguments from functions which are not used by the body","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass13functionAttrsFMS0_S0_":{"name":"functionAttrs","abstract":"<p>This pass walks SCCs of the call graph in RPO to deduce and propagate","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass16functionInliningFMS0_S0_":{"name":"functionInlining","abstract":"<p>Uses a heuristic to inline direct function calls to small functions.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass9globalDCEFMS0_S0_":{"name":"globalDCE","abstract":"<p>This transform is designed to eliminate unreachable internal globals","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass15globalOptimizerFMS0_S0_":{"name":"globalOptimizer","abstract":"<p>This function returns a new pass that optimizes non-address taken internal","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass21ipConstantPropagationFMS0_S0_":{"name":"ipConstantPropagation","abstract":"<p>This pass propagates constants from call sites into the bodies of","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass5ipsccFMS0_S0_":{"name":"ipscc","abstract":"<p>This pass propagates constants from call sites into the bodies of","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass7pruneEHFMS0_S0_":{"name":"pruneEH","abstract":"<p>Return a new pass object which transforms invoke instructions into calls,","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass19stripDeadPrototypesFMS0_S0_":{"name":"stripDeadPrototypes","abstract":"<p>This pass removes any function declarations (prototypes) that are not used.</p>","parent_name":"FunctionPass"},"Enums/FunctionPass.html#/s:FO4LLVM12FunctionPass12stripSymbolsFMS0_S0_":{"name":"stripSymbols","abstract":"<p>These functions removes symbols from functions and modules without","parent_name":"FunctionPass"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast5truncFMS1_S1_":{"name":"trunc","abstract":"<p>The <code>trunc</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast4zextFMS1_S1_":{"name":"zext","abstract":"<p>The <code>zext</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast4sextFMS1_S1_":{"name":"sext","abstract":"<p>The <code>sext</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast6fpToUIFMS1_S1_":{"name":"fpToUI","abstract":"<p>The <code>fpToUI</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast6fpToSIFMS1_S1_":{"name":"fpToSI","abstract":"<p>The <code>fpToSI</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast6uiToFPFMS1_S1_":{"name":"uiToFP","abstract":"<p>The <code>uiToFP</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast6siToFPFMS1_S1_":{"name":"siToFP","abstract":"<p>The <code>siToFP</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast7fpTruncFMS1_S1_":{"name":"fpTrunc","abstract":"<p>The <code>fpTrunc</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast5fpextFMS1_S1_":{"name":"fpext","abstract":"<p>The <code>fpext</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast8ptrToIntFMS1_S1_":{"name":"ptrToInt","abstract":"<p>The <code>ptrToInt</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast8intToPtrFMS1_S1_":{"name":"intToPtr","abstract":"<p>The <code>intToPtr</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast7bitCastFMS1_S1_":{"name":"bitCast","abstract":"<p>The <code>bitCast</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:FOO4LLVM6OpCode4Cast13addrSpaceCastFMS1_S1_":{"name":"addrSpaceCast","abstract":"<p>The <code>addrSpaceCast</code> instruction.</p>","parent_name":"Cast"},"Enums/OpCode/Cast.html#/s:vOO4LLVM6OpCode4Cast4llvmVSC10LLVMOpcode":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMOpcode</code>.</p>","parent_name":"Cast"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary3addFMS1_S1_":{"name":"add","abstract":"<p>The <code>add</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4faddFMS1_S1_":{"name":"fadd","abstract":"<p>The <code>fadd</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary3subFMS1_S1_":{"name":"sub","abstract":"<p>The <code>sub</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4fsubFMS1_S1_":{"name":"fsub","abstract":"<p>The <code>fsub</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary3mulFMS1_S1_":{"name":"mul","abstract":"<p>The <code>mul</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4fmulFMS1_S1_":{"name":"fmul","abstract":"<p>The <code>fmul</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4udivFMS1_S1_":{"name":"udiv","abstract":"<p>The <code>udiv</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4sdivFMS1_S1_":{"name":"sdiv","abstract":"<p>The <code>sdiv</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4fdivFMS1_S1_":{"name":"fdiv","abstract":"<p>The <code>fdiv</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4uremFMS1_S1_":{"name":"urem","abstract":"<p>The <code>urem</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4sremFMS1_S1_":{"name":"srem","abstract":"<p>The <code>srem</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4fremFMS1_S1_":{"name":"frem","abstract":"<p>The <code>frem</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary3shlFMS1_S1_":{"name":"shl","abstract":"<p>The <code>shl</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4lshrFMS1_S1_":{"name":"lshr","abstract":"<p>The <code>lshr</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary4ashrFMS1_S1_":{"name":"ashr","abstract":"<p>The <code>ashr</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary3andFMS1_S1_":{"name":"and","abstract":"<p>The <code>and</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary2orFMS1_S1_":{"name":"or","abstract":"<p>The <code>or</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:FOO4LLVM6OpCode6Binary3xorFMS1_S1_":{"name":"xor","abstract":"<p>The <code>xor</code> instruction.</p>","parent_name":"Binary"},"Enums/OpCode/Binary.html#/s:vOO4LLVM6OpCode6Binary4llvmVSC10LLVMOpcode":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMOpcode</code>.</p>","parent_name":"Binary"},"Enums/OpCode.html#/s:FO4LLVM6OpCode3retFMS0_S0_":{"name":"ret","abstract":"<p>The opcode for the <code>ret</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode2brFMS0_S0_":{"name":"br","abstract":"<p>The opcode for the <code>br</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6switchFMS0_S0_":{"name":"switch","abstract":"<p>The opcode for the <code>switch</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode10indirectBrFMS0_S0_":{"name":"indirectBr","abstract":"<p>The opcode for the <code>indirectBr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6invokeFMS0_S0_":{"name":"invoke","abstract":"<p>The opcode for the <code>invoke</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode11unreachableFMS0_S0_":{"name":"unreachable","abstract":"<p>The opcode for the <code>unreachable</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode3addFMS0_S0_":{"name":"add","abstract":"<p>The opcode for the <code>add</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4faddFMS0_S0_":{"name":"fadd","abstract":"<p>The opcode for the <code>fadd</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode3subFMS0_S0_":{"name":"sub","abstract":"<p>The opcode for the <code>sub</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4fsubFMS0_S0_":{"name":"fsub","abstract":"<p>The opcode for the <code>fsub</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode3mulFMS0_S0_":{"name":"mul","abstract":"<p>The opcode for the <code>mul</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4fmulFMS0_S0_":{"name":"fmul","abstract":"<p>The opcode for the <code>fmul</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4udivFMS0_S0_":{"name":"udiv","abstract":"<p>The opcode for the <code>udiv</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4sdivFMS0_S0_":{"name":"sdiv","abstract":"<p>The opcode for the <code>sdiv</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4fdivFMS0_S0_":{"name":"fdiv","abstract":"<p>The opcode for the <code>fdiv</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4uremFMS0_S0_":{"name":"urem","abstract":"<p>The opcode for the <code>urem</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4sremFMS0_S0_":{"name":"srem","abstract":"<p>The opcode for the <code>srem</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4fremFMS0_S0_":{"name":"frem","abstract":"<p>The opcode for the <code>frem</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode3shlFMS0_S0_":{"name":"shl","abstract":"<p>The opcode for the <code>shl</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4lshrFMS0_S0_":{"name":"lshr","abstract":"<p>The opcode for the <code>lshr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4ashrFMS0_S0_":{"name":"ashr","abstract":"<p>The opcode for the <code>ashr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode3andFMS0_S0_":{"name":"and","abstract":"<p>The opcode for the <code>and</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode2orFMS0_S0_":{"name":"or","abstract":"<p>The opcode for the <code>or</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode3xorFMS0_S0_":{"name":"xor","abstract":"<p>The opcode for the <code>xor</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6allocaFMS0_S0_":{"name":"alloca","abstract":"<p>The opcode for the <code>alloca</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4loadFMS0_S0_":{"name":"load","abstract":"<p>The opcode for the <code>load</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode5storeFMS0_S0_":{"name":"store","abstract":"<p>The opcode for the <code>store</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode13getElementPtrFMS0_S0_":{"name":"getElementPtr","abstract":"<p>The opcode for the <code>getElementPtr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode5truncFMS0_S0_":{"name":"trunc","abstract":"<p>The opcode for the <code>trunc</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4zextFMS0_S0_":{"name":"zext","abstract":"<p>The opcode for the <code>zext</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4sextFMS0_S0_":{"name":"sext","abstract":"<p>The opcode for the <code>sext</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6fpToUIFMS0_S0_":{"name":"fpToUI","abstract":"<p>The opcode for the <code>fpToUI</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6fpToSIFMS0_S0_":{"name":"fpToSI","abstract":"<p>The opcode for the <code>fpToSI</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6uiToFPFMS0_S0_":{"name":"uiToFP","abstract":"<p>The opcode for the <code>uiToFP</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6siToFPFMS0_S0_":{"name":"siToFP","abstract":"<p>The opcode for the <code>siToFP</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode7fpTruncFMS0_S0_":{"name":"fpTrunc","abstract":"<p>The opcode for the <code>fpTrunc</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode5fpExtFMS0_S0_":{"name":"fpExt","abstract":"<p>The opcode for the <code>fpExt</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode8ptrToIntFMS0_S0_":{"name":"ptrToInt","abstract":"<p>The opcode for the <code>ptrToInt</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode8intToPtrFMS0_S0_":{"name":"intToPtr","abstract":"<p>The opcode for the <code>intToPtr</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode7bitCastFMS0_S0_":{"name":"bitCast","abstract":"<p>The opcode for the <code>bitCast</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode13addrSpaceCastFMS0_S0_":{"name":"addrSpaceCast","abstract":"<p>The opcode for the <code>addrSpaceCast</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4icmpFMS0_S0_":{"name":"icmp","abstract":"<p>The opcode for the <code>icmp</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4fcmpFMS0_S0_":{"name":"fcmp","abstract":"<p>The opcode for the <code>fcmp</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode3phiFMS0_S0_":{"name":"phi","abstract":"<p>The opcode for the <code>PHI</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode4callFMS0_S0_":{"name":"call","abstract":"<p>The opcode for the <code>call</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6selectFMS0_S0_":{"name":"select","abstract":"<p>The opcode for the <code>select</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode7userOp1FMS0_S0_":{"name":"userOp1","abstract":"<p>The opcode for the <code>userOp1</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode7userOp2FMS0_S0_":{"name":"userOp2","abstract":"<p>The opcode for the <code>userOp2</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode5vaArgFMS0_S0_":{"name":"vaArg","abstract":"<p>The opcode for the <code>vaArg</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode14extractElementFMS0_S0_":{"name":"extractElement","abstract":"<p>The opcode for the <code>extractElement</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode13insertElementFMS0_S0_":{"name":"insertElement","abstract":"<p>The opcode for the <code>insertElement</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode13shuffleVectorFMS0_S0_":{"name":"shuffleVector","abstract":"<p>The opcode for the <code>shuffleVector</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode12extractValueFMS0_S0_":{"name":"extractValue","abstract":"<p>The opcode for the <code>extractValue</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode11insertValueFMS0_S0_":{"name":"insertValue","abstract":"<p>The opcode for the <code>insertValue</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode5fenceFMS0_S0_":{"name":"fence","abstract":"<p>The opcode for the <code>fence</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode13atomicCmpXchgFMS0_S0_":{"name":"atomicCmpXchg","abstract":"<p>The opcode for the <code>atomicCmpXchg</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode9atomicRMWFMS0_S0_":{"name":"atomicRMW","abstract":"<p>The opcode for the <code>atomicRMW</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode6resumeFMS0_S0_":{"name":"resume","abstract":"<p>The opcode for the <code>resume</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode10landingPadFMS0_S0_":{"name":"landingPad","abstract":"<p>The opcode for the <code>landingPad</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode10cleanupRetFMS0_S0_":{"name":"cleanupRet","abstract":"<p>The opcode for the <code>cleanupRet</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode8catchRetFMS0_S0_":{"name":"catchRet","abstract":"<p>The opcode for the <code>catchRet</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode8catchPadFMS0_S0_":{"name":"catchPad","abstract":"<p>The opcode for the <code>catchPad</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode10cleanupPadFMS0_S0_":{"name":"cleanupPad","abstract":"<p>The opcode for the <code>cleanupPad</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode.html#/s:FO4LLVM6OpCode11catchSwitchFMS0_S0_":{"name":"catchSwitch","abstract":"<p>The opcode for the <code>catchSwitch</code> instruction.</p>","parent_name":"OpCode"},"Enums/OpCode/Binary.html":{"name":"Binary","abstract":"<p><code>BinaryOperation</code> enumerates the subset of opcodes that are binary operations.</p>","parent_name":"OpCode"},"Enums/OpCode/Cast.html":{"name":"Cast","abstract":"<p><code>CastOperation</code> enumerates the subset of opcodes that are cast operations.</p>","parent_name":"OpCode"},"Enums/ModuleError.html#/s:FO4LLVM11ModuleError22didNotPassVerificationFMS0_FSSS0_":{"name":"didNotPassVerification","abstract":"<p>Thrown when a module does not pass the module verification process.","parent_name":"ModuleError"},"Enums/ModuleError.html#/s:FO4LLVM11ModuleError13couldNotPrintFMS0_FT4pathSS5errorSS_S0_":{"name":"couldNotPrint","abstract":"<p>Thrown when a module cannot be printed at a given path.  Provides the","parent_name":"ModuleError"},"Enums/ModuleError.html#/s:FO4LLVM11ModuleError19couldNotEmitBitCodeFMS0_FT4pathSS_S0_":{"name":"couldNotEmitBitCode","abstract":"<p>Thrown when a module cannot emit bitcode because it contains erroneous","parent_name":"ModuleError"},"Enums/ModuleError.html#/s:vPs23CustomStringConvertible11descriptionSS":{"name":"description","parent_name":"ModuleError"},"Enums/MemoryBufferError.html#/s:FO4LLVM17MemoryBufferError14couldNotCreateFMS0_FSSS0_":{"name":"couldNotCreate","abstract":"<p>The MemoryBuffer failed to be initialized for a specific reason.</p>","parent_name":"MemoryBufferError"},"Enums/StorageClass.html#/s:FO4LLVM12StorageClass7defaultFMS0_S0_":{"name":"default","abstract":"<p>The default storage class for declarations is neither imported nor","parent_name":"StorageClass"},"Enums/StorageClass.html#/s:FO4LLVM12StorageClass9dllImportFMS0_S0_":{"name":"dllImport","abstract":"<p>The storage class that guarantees the existence of a function in a DLL.  </p>","parent_name":"StorageClass"},"Enums/StorageClass.html#/s:FO4LLVM12StorageClass9dllExportFMS0_S0_":{"name":"dllExport","abstract":"<p>The storage class for symbols that should be exposed outside of this DLL.</p>","parent_name":"StorageClass"},"Enums/StorageClass.html#/s:vO4LLVM12StorageClass4llvmVSC19LLVMDLLStorageClass":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMDLLStorageClass</code>.</p>","parent_name":"StorageClass"},"Enums/Linkage.html#/s:FO4LLVM7Linkage8externalFMS0_S0_":{"name":"external","abstract":"<p>Externally visible function.  This is the default linkage.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage19availableExternallyFMS0_S0_":{"name":"availableExternally","abstract":"<p>Available for inspection, not emission.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage11linkOnceAnyFMS0_S0_":{"name":"linkOnceAny","abstract":"<p>Keep one copy of function when linking.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage11linkOnceODRFMS0_S0_":{"name":"linkOnceODR","abstract":"<p>Keep one copy of function when linking but enable inlining and","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage7weakAnyFMS0_S0_":{"name":"weakAny","abstract":"<p>Keep one copy of function when linking (weak).</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage7weakODRFMS0_S0_":{"name":"weakODR","abstract":"<p>Keep one copy of function when linking but apply <q>One Definition Rule</q>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage9appendingFMS0_S0_":{"name":"appending","abstract":"<p>Special purpose, only applies to global arrays.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage8internalFMS0_S0_":{"name":"internal","abstract":"<p>Rename collisions when linking (static functions).</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage7privateFMS0_S0_":{"name":"private","abstract":"<p>Like <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/Linkage.html#/s:FO4LLVM7Linkage8internalFMS0_S0_\">.internal</a></code>, but omit from symbol table.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage12externalWeakFMS0_S0_":{"name":"externalWeak","abstract":"<p>Keep one copy of the function when linking, but apply ELF semantics.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:FO4LLVM7Linkage6commonFMS0_S0_":{"name":"common","abstract":"<p>Tentative definitions.</p>","parent_name":"Linkage"},"Enums/Linkage.html#/s:vO4LLVM7Linkage4llvmVSC11LLVMLinkage":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMLinkage</code>.</p>","parent_name":"Linkage"},"Enums/Visibility.html#/s:FO4LLVM10Visibility7defaultFMS0_S0_":{"name":"default","abstract":"<p>On targets that use the ELF object file format, default visibility means","parent_name":"Visibility"},"Enums/Visibility.html#/s:FO4LLVM10Visibility6hiddenFMS0_S0_":{"name":"hidden","abstract":"<p>Two declarations of an object with hidden visibility refer to the same","parent_name":"Visibility"},"Enums/Visibility.html#/s:FO4LLVM10Visibility9protectedFMS0_S0_":{"name":"protected","abstract":"<p>On ELF, protected visibility indicates that the symbol will be placed in","parent_name":"Visibility"},"Enums/Visibility.html#/s:vO4LLVM10Visibility4llvmVSC14LLVMVisibility":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMLinkage</code>.</p>","parent_name":"Visibility"},"Enums/JITError.html#/s:FO4LLVM8JITError18couldNotInitializeFMS0_FSSS0_":{"name":"couldNotInitialize","abstract":"<p>The JIT was unable to be initialized. A message is provided explaining","parent_name":"JITError"},"Enums/JITError.html#/s:FO4LLVM8JITError20couldNotRemoveModuleFMS0_FTCS_6ModuleSS_S0_":{"name":"couldNotRemoveModule","abstract":"<p>The JIT was unable to remove the provided module. A message is provided","parent_name":"JITError"},"Enums/JITError.html#/s:vO4LLVM8JITError11descriptionSS":{"name":"description","abstract":"<p>A human-readable description of the error.</p>","parent_name":"JITError"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation4xchgFMS0_S0_":{"name":"xchg","abstract":"<p>Set the new value and return the one old</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation3addFMS0_S0_":{"name":"add","abstract":"<p>Add a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation3subFMS0_S0_":{"name":"sub","abstract":"<p>Subtract a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation3andFMS0_S0_":{"name":"and","abstract":"<p>And a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation4nandFMS0_S0_":{"name":"nand","abstract":"<p>Not-And a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation2orFMS0_S0_":{"name":"or","abstract":"<p>OR a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation3xorFMS0_S0_":{"name":"xor","abstract":"<p>Xor a value and return the old one</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation3maxFMS0_S0_":{"name":"max","abstract":"<p>Sets the value if it&rsquo;s greater than the original using a signed comparison","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation3minFMS0_S0_":{"name":"min","abstract":"<p>Sets the value if it&rsquo;s Smaller than the original using a signed comparison","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation4umaxFMS0_S0_":{"name":"umax","abstract":"<p>Sets the value if it&rsquo;s greater than the original using an unsigned","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:FO4LLVM30AtomicReadModifyWriteOperation4uminFMS0_S0_":{"name":"umin","abstract":"<p>Sets the value if it&rsquo;s greater than the original using an unsigned","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicReadModifyWriteOperation.html#/s:vO4LLVM30AtomicReadModifyWriteOperation4llvmVSC18LLVMAtomicRMWBinOp":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMAtomicRMWBinOp</code>.</p>","parent_name":"AtomicReadModifyWriteOperation"},"Enums/AtomicOrdering.html#/s:FO4LLVM14AtomicOrdering9notAtomicFMS0_S0_":{"name":"notAtomic","abstract":"<p>A load or store which is not atomic</p>","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:FO4LLVM14AtomicOrdering9unorderedFMS0_S0_":{"name":"unordered","abstract":"<p>Lowest level of atomicity, guarantees somewhat sane results, lock free.</p>","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:FO4LLVM14AtomicOrdering9monotonicFMS0_S0_":{"name":"monotonic","abstract":"<p>Guarantees that if you take all the operations affecting a specific","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:FO4LLVM14AtomicOrdering7acquireFMS0_S0_":{"name":"acquire","abstract":"<p>Acquire provides a barrier of the sort necessary to acquire a lock to","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:FO4LLVM14AtomicOrdering7releaseFMS0_S0_":{"name":"release","abstract":"<p>Release is similar to Acquire, but with a barrier of the sort necessary to","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:FO4LLVM14AtomicOrdering14acquireReleaseFMS0_S0_":{"name":"acquireRelease","abstract":"<p>provides both an Acquire and a Release barrier (for fences and operations","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:FO4LLVM14AtomicOrdering22sequentiallyConsistentFMS0_S0_":{"name":"sequentiallyConsistent","abstract":"<p>Provides Acquire semantics for loads and Release semantics for stores.</p>","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:ZFPs9Equatableoi2eeFTxx_Sb":{"name":"==(_:_:)","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:ZFPs10Comparableoi1lFTxx_Sb":{"name":"<(_:_:)","parent_name":"AtomicOrdering"},"Enums/AtomicOrdering.html#/s:vO4LLVM14AtomicOrdering4llvmVSC18LLVMAtomicOrdering":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMAtomicOrdering</code>.</p>","parent_name":"AtomicOrdering"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate5falseFMS0_S0_":{"name":"false","abstract":"<p>No comparison, always returns <code>false</code>.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate12orderedEqualFMS0_S0_":{"name":"orderedEqual","abstract":"<p>Ordered and equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate18orderedGreaterThanFMS0_S0_":{"name":"orderedGreaterThan","abstract":"<p>Ordered greater than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate25orderedGreaterThanOrEqualFMS0_S0_":{"name":"orderedGreaterThanOrEqual","abstract":"<p>Ordered greater than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate15orderedLessThanFMS0_S0_":{"name":"orderedLessThan","abstract":"<p>Ordered less than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate22orderedLessThanOrEqualFMS0_S0_":{"name":"orderedLessThanOrEqual","abstract":"<p>Ordered less than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate15orderedNotEqualFMS0_S0_":{"name":"orderedNotEqual","abstract":"<p>Ordered and not equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate7orderedFMS0_S0_":{"name":"ordered","abstract":"<p>Ordered (no nans).</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate9unorderedFMS0_S0_":{"name":"unordered","abstract":"<p>Unordered (either nans).</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate14unorderedEqualFMS0_S0_":{"name":"unorderedEqual","abstract":"<p>Unordered or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate20unorderedGreaterThanFMS0_S0_":{"name":"unorderedGreaterThan","abstract":"<p>Unordered or greater than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate27unorderedGreaterThanOrEqualFMS0_S0_":{"name":"unorderedGreaterThanOrEqual","abstract":"<p>Unordered or greater than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate17unorderedLessThanFMS0_S0_":{"name":"unorderedLessThan","abstract":"<p>Unordered or less than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate24unorderedLessThanOrEqualFMS0_S0_":{"name":"unorderedLessThanOrEqual","abstract":"<p>Unordered or less than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate17unorderedNotEqualFMS0_S0_":{"name":"unorderedNotEqual","abstract":"<p>Unordered or not equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:FO4LLVM13RealPredicate4trueFMS0_S0_":{"name":"true","abstract":"<p>No comparison, always returns <code>true</code>.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:vO4LLVM13RealPredicate4llvmVSC17LLVMRealPredicate":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMRealPredicate</code>.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3oeqS0_":{"name":"oeq","abstract":"<p>Ordered and equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3ogtS0_":{"name":"ogt","abstract":"<p>Ordered greater than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3ogeS0_":{"name":"oge","abstract":"<p>Ordered greater than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3oltS0_":{"name":"olt","abstract":"<p>Ordered less than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3oleS0_":{"name":"ole","abstract":"<p>Ordered less than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3oneS0_":{"name":"one","abstract":"<p>Ordered and not equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3ordS0_":{"name":"ord","abstract":"<p>Ordered (no nans).</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3unoS0_":{"name":"uno","abstract":"<p>Unordered (either nans).</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3ueqS0_":{"name":"ueq","abstract":"<p>Unordered or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3ugtS0_":{"name":"ugt","abstract":"<p>Unordered or greater than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3ugeS0_":{"name":"uge","abstract":"<p>Unordered or greater than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3ultS0_":{"name":"ult","abstract":"<p>Unordered or less than.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3uleS0_":{"name":"ule","abstract":"<p>Unordered or less than or equal.</p>","parent_name":"RealPredicate"},"Enums/RealPredicate.html#/s:ZvO4LLVM13RealPredicate3uneS0_":{"name":"une","abstract":"<p>Unordered or not equal.</p>","parent_name":"RealPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate5equalFMS0_S0_":{"name":"equal","abstract":"<p>Yields <code>true</code> if the operands are equal, false otherwise without sign","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate8notEqualFMS0_S0_":{"name":"notEqual","abstract":"<p>Yields <code>true</code> if the operands are unequal, false otherwise without sign","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate19unsignedGreaterThanFMS0_S0_":{"name":"unsignedGreaterThan","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate26unsignedGreaterThanOrEqualFMS0_S0_":{"name":"unsignedGreaterThanOrEqual","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate16unsignedLessThanFMS0_S0_":{"name":"unsignedLessThan","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate23unsignedLessThanOrEqualFMS0_S0_":{"name":"unsignedLessThanOrEqual","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate17signedGreaterThanFMS0_S0_":{"name":"signedGreaterThan","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate24signedGreaterThanOrEqualFMS0_S0_":{"name":"signedGreaterThanOrEqual","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate14signedLessThanFMS0_S0_":{"name":"signedLessThan","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:FO4LLVM12IntPredicate21signedLessThanOrEqualFMS0_S0_":{"name":"signedLessThanOrEqual","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:vO4LLVM12IntPredicate4llvmVSC16LLVMIntPredicate":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMIntPredicate</code>.</p>","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate2eqS0_":{"name":"eq","abstract":"<p>Yields <code>true</code> if the operands are equal, false otherwise without sign","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate2neS0_":{"name":"ne","abstract":"<p>Yields <code>true</code> if the operands are unequal, false otherwise without sign","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate3ugtS0_":{"name":"ugt","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate3ugeS0_":{"name":"uge","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate3ultS0_":{"name":"ult","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate3uleS0_":{"name":"ule","abstract":"<p>Interprets the operands as unsigned values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate3sgtS0_":{"name":"sgt","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate3sgeS0_":{"name":"sge","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate3sltS0_":{"name":"slt","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/IntPredicate.html#/s:ZvO4LLVM12IntPredicate3sleS0_":{"name":"sle","abstract":"<p>Interprets the operands as signed values and yields true if the first is","parent_name":"IntPredicate"},"Enums/OverflowBehavior.html#/s:FO4LLVM16OverflowBehavior7defaultFMS0_S0_":{"name":"default","abstract":"<p>The result value of the operator is the mathematical result modulo <code>2^n</code>,","parent_name":"OverflowBehavior"},"Enums/OverflowBehavior.html#/s:FO4LLVM16OverflowBehavior12noSignedWrapFMS0_S0_":{"name":"noSignedWrap","abstract":"<p>The result value of the operator is a poison value if signed overflow","parent_name":"OverflowBehavior"},"Enums/OverflowBehavior.html#/s:FO4LLVM16OverflowBehavior14noUnsignedWrapFMS0_S0_":{"name":"noUnsignedWrap","abstract":"<p>The result value of the operator is a poison value if unsigned overflow","parent_name":"OverflowBehavior"},"Enums/ThreadLocalModel.html#/s:FO4LLVM16ThreadLocalModel14notThreadLocalFMS0_S0_":{"name":"notThreadLocal","abstract":"<p>The variable is not thread local and hence has no associated model.</p>","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:FO4LLVM16ThreadLocalModel14generalDynamicFMS0_S0_":{"name":"generalDynamic","abstract":"<p>Allows reference of all thread-local variables, from either a shared","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:FO4LLVM16ThreadLocalModel12localDynamicFMS0_S0_":{"name":"localDynamic","abstract":"<p>This model is an optimization of the General Dynamic model. The compiler","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:FO4LLVM16ThreadLocalModel11initialExecFMS0_S0_":{"name":"initialExec","abstract":"<p>This model can only reference thread-local variables which are available","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:FO4LLVM16ThreadLocalModel9localExecFMS0_S0_":{"name":"localExec","abstract":"<p>This model can only reference thread-local variables which are part of the","parent_name":"ThreadLocalModel"},"Enums/ThreadLocalModel.html#/s:vO4LLVM16ThreadLocalModel4llvmVSC19LLVMThreadLocalMode":{"name":"llvm","abstract":"<p>Retrieves the corresponding <code>LLVMThreadLocalMode</code>.</p>","parent_name":"ThreadLocalModel"},"Enums/CallingConvention.html#/s:FO4LLVM17CallingConvention1cFMS0_S0_":{"name":"c","abstract":"<p>The default LLVM calling convention, compatible with C.</p>","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:FO4LLVM17CallingConvention4fastFMS0_S0_":{"name":"fast","abstract":"<p>This calling convention attempts to make calls as fast as possible","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:FO4LLVM17CallingConvention4coldFMS0_S0_":{"name":"cold","abstract":"<p>This calling convention attempts to make code in the caller as efficient","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:FO4LLVM17CallingConvention8webKitJSFMS0_S0_":{"name":"webKitJS","abstract":"<p>Calling convention for stack based JavaScript calls.</p>","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:FO4LLVM17CallingConvention6anyRegFMS0_S0_":{"name":"anyReg","abstract":"<p>Calling convention for dynamic register based calls","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:FO4LLVM17CallingConvention10x86StdcallFMS0_S0_":{"name":"x86Stdcall","abstract":"<p>The calling conventions mostly used by the Win32 API.</p>","parent_name":"CallingConvention"},"Enums/CallingConvention.html#/s:FO4LLVM17CallingConvention11x86FastcallFMS0_S0_":{"name":"x86Fastcall","abstract":"<p><q>Fast</q> analog of <code><a href=\"36f8f5912051ae747ef441d6511ca4cbEnums/CallingConvention.html#/s:FO4LLVM17CallingConvention10x86StdcallFMS0_S0_\">x86Stdcall</a></code>.</p>","parent_name":"CallingConvention"},"Enums/FloatType.html#/s:FO4LLVM9FloatType4halfFMS0_S0_":{"name":"half","abstract":"<p>16-bit floating point value</p>","parent_name":"FloatType"},"Enums/FloatType.html#/s:FO4LLVM9FloatType5floatFMS0_S0_":{"name":"float","abstract":"<p>32-bit floating point value</p>","parent_name":"FloatType"},"Enums/FloatType.html#/s:FO4LLVM9FloatType6doubleFMS0_S0_":{"name":"double","abstract":"<p>64-bit floating point value</p>","parent_name":"FloatType"},"Enums/FloatType.html#/s:FO4LLVM9FloatType7x86FP80FMS0_S0_":{"name":"x86FP80","abstract":"<p>80-bit floating point value (X87)</p>","parent_name":"FloatType"},"Enums/FloatType.html#/s:FO4LLVM9FloatType5fp128FMS0_S0_":{"name":"fp128","abstract":"<p>128-bit floating point value (112-bit mantissa)</p>","parent_name":"FloatType"},"Enums/FloatType.html#/s:FO4LLVM9FloatType8ppcFP128FMS0_S0_":{"name":"ppcFP128","abstract":"<p>128-bit floating point value (two 64-bits)</p>","parent_name":"FloatType"},"Enums/FloatType.html#/s:FO4LLVM9FloatType8constantFSdGVS_8ConstantOS_8Floating_":{"name":"constant(_:)","abstract":"<p>Creates a constant floating value of this type from a Swift <code>Double</code> value.</p>","parent_name":"FloatType"},"Enums/FloatType.html#/s:FO4LLVM9FloatType6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM type object.</p>","parent_name":"FloatType"},"Enums/LandingPadClause.html#/s:FO4LLVM16LandingPadClause5catchFMS0_FPS_8IRGlobal_S0_":{"name":"catch","abstract":"<p>This clause means that the landingpad block should be entered if the","parent_name":"LandingPadClause"},"Enums/LandingPadClause.html#/s:FO4LLVM16LandingPadClause6filterFMS0_FTPS_6IRType_GSaPS_8IRGlobal___S0_":{"name":"filter","abstract":"<p>This clause means that the landing pad should be entered if the exception","parent_name":"LandingPadClause"},"Enums/LandingPadClause.html#/s:FP4LLVM7IRValue6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","parent_name":"LandingPadClause"},"Enums/LandingPadClause.html":{"name":"LandingPadClause","abstract":"<p>Enumerates the supported kind of clauses.</p>"},"Enums.html#/s:O4LLVM8Unsigned":{"name":"Unsigned","abstract":"<p>Represents unsigned integral types and operations.</p>"},"Enums.html#/s:O4LLVM6Signed":{"name":"Signed","abstract":"<p>Represents signed integral types and operations.</p>"},"Enums.html#/s:O4LLVM8Floating":{"name":"Floating","abstract":"<p>Represents floating types and operations.</p>"},"Enums/FloatType.html":{"name":"FloatType","abstract":"<p><code>FloatType</code> enumerates representations of a floating value of a particular"},"Enums/CallingConvention.html":{"name":"CallingConvention","abstract":"<p>Enumerates the calling conventions supported by LLVM.</p>"},"Enums/ThreadLocalModel.html":{"name":"ThreadLocalModel","abstract":"<p>Enumerates the supported models of reference of thread-local variables. </p>"},"Enums/OverflowBehavior.html":{"name":"OverflowBehavior","abstract":"<p>Species the behavior that should occur on overflow during mathematical"},"Enums/IntPredicate.html":{"name":"IntPredicate","abstract":"<p>The condition codes available for integer comparison instructions.</p>"},"Enums/RealPredicate.html":{"name":"RealPredicate","abstract":"<p>The condition codes available for floating comparison instructions.</p>"},"Enums/AtomicOrdering.html":{"name":"AtomicOrdering","abstract":"<p><code>AtomicOrdering</code> enumerates available memory ordering semantics.</p>"},"Enums/AtomicReadModifyWriteOperation.html":{"name":"AtomicReadModifyWriteOperation","abstract":"<p><code>AtomicReadModifyWriteOperation</code> enumerates the kinds of supported atomic"},"Enums/JITError.html":{"name":"JITError","abstract":"<p>JITError represents the different kinds of errors the JIT compiler can"},"Enums/Visibility.html":{"name":"Visibility","abstract":"<p><code>Visibility</code> enumerates available visibility styles.</p>"},"Enums/Linkage.html":{"name":"Linkage","abstract":"<p><code>Linkage</code> enumerates the supported kinds of linkage for global values.  All"},"Enums/StorageClass.html":{"name":"StorageClass","abstract":"<p><code>StorageClass</code> enumerates the storage classes for globals in a Portable"},"Enums/MemoryBufferError.html":{"name":"MemoryBufferError","abstract":"<p>Enumerates the possible failures that can be thrown initializing"},"Enums/ModuleError.html":{"name":"ModuleError","abstract":"<p>Represents the possible errors that can be thrown while interacting with a"},"Enums/OpCode.html":{"name":"OpCode","abstract":"<p>Enumerates the opcodes of instructions available in the LLVM IR language.</p>"},"Enums/FunctionPass.html":{"name":"FunctionPass","abstract":"<p>A subset of supported LLVM IR optimizer passes.</p>"},"Enums/ByteOrder.html":{"name":"ByteOrder","abstract":"<p><code>ByteOrder</code> enumerates the ordering semantics of sequences of bytes on a"},"Enums/CodeGenOptLevel.html":{"name":"CodeGenOptLevel","abstract":"<p>LLVM-provided high-level optimization levels.</p>"},"Enums/RelocMode.html":{"name":"RelocMode","abstract":"<p>The relocation model types supported by LLVM.</p>"},"Enums/CodeModel.html":{"name":"CodeModel","abstract":"<p>The model that generated code should follow.  Code Models enables particular"},"Enums/CodegenFileType.html":{"name":"CodegenFileType","abstract":"<p>The supported types of files codegen can produce.</p>"},"Enums/TargetMachineError.html":{"name":"TargetMachineError","abstract":"<p>Represents one of a few errors that can be thrown by a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/TargetMachine.html\">TargetMachine</a></code></p>"},"Classes/TargetMachine.html#/s:vC4LLVM13TargetMachine6targetCS_6Target":{"name":"target","abstract":"<p>The target information associated with this target machine.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:vC4LLVM13TargetMachine10dataLayoutCS_10TargetData":{"name":"dataLayout","abstract":"<p>The data layout semantics associated with this target machine.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:vC4LLVM13TargetMachine6tripleSS":{"name":"triple","abstract":"<p>A string representing the target triple for this target machine.  In the","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:vC4LLVM13TargetMachine3cpuSS":{"name":"cpu","abstract":"<p>The CPU associated with this target machine.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:vC4LLVM13TargetMachine8featuresSS":{"name":"features","abstract":"<p>The feature string associated with this target machine.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:FC4LLVM13TargetMachinecFzT6tripleGSqSS_3cpuSS8featuresSS8optLevelOS_15CodeGenOptLevel9relocModeOS_9RelocMode9codeModelOS_9CodeModel_S0_":{"name":"init(triple:cpu:features:optLevel:relocMode:codeModel:)","abstract":"<p>Creates a Target Machine with information about its target environment.</p>","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:FC4LLVM13TargetMachine10emitToFileFzT6moduleCS_6Module4typeOS_15CodegenFileType4pathSS_T_":{"name":"emitToFile(module:type:path:)","abstract":"<p>Emits an LLVM Bitcode, ASM, or object file for the given module to the","parent_name":"TargetMachine"},"Classes/TargetMachine.html#/s:FC4LLVM13TargetMachine18emitToMemoryBufferFzT6moduleCS_6Module4typeOS_15CodegenFileType_CS_12MemoryBuffer":{"name":"emitToMemoryBuffer(module:type:)","abstract":"<p>Emits an LLVM Bitcode, ASM, or object file for the given module to a new","parent_name":"TargetMachine"},"Classes/Target.html#/s:FC4LLVM6TargetcFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Creates a <code>Target</code> object from an LLVM target object.</p>","parent_name":"Target"},"Classes/TargetData.html#/s:FC4LLVM10TargetDatacFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Creates a Target Data object from an <code>LLVMTargetDataRef</code> object.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData15offsetOfElementFT2atSi4typeVS_10StructType_Si":{"name":"offsetOfElement(at:type:)","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData15elementAtOffsetFTSi4typeVS_10StructType_Si":{"name":"elementAtOffset(_:type:)","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData16sizeOfTypeInBitsFPS_6IRType_Si":{"name":"sizeOfTypeInBits(_:)","abstract":"<p>Computes the number of bits necessary to hold a value of the given type","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData13abiSizeOfTypeFPS_6IRType_Si":{"name":"abiSizeOfType(_:)","abstract":"<p>Computes the minimum ABI-required number of bits necessary to hold a value","parent_name":"TargetData"},"Classes/TargetData.html#/s:vC4LLVM10TargetData9byteOrderOS_9ByteOrder":{"name":"byteOrder","abstract":"<p>The current platform byte order, either big or little endian.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:vC4LLVM10TargetData12layoutStringSS":{"name":"layoutString","abstract":"<p>Creates a string representation of the target data.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData14intPointerTypeFT7contextGSqCS_7Context_12addressSpaceGSqSi__VS_7IntType":{"name":"intPointerType(context:addressSpace:)","abstract":"<p>The integer type that is the same size as a pointer on this target.","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData18preferredAlignmentFT2ofVS_6Global_Si":{"name":"preferredAlignment(of:)","abstract":"<p>Computes the preferred alignment of the given global for this target</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData18preferredAlignmentFT2ofPS_6IRType__Si":{"name":"preferredAlignment(of:)","abstract":"<p>Computes the preferred alignment of the given type for this target</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData12abiAlignmentFT2ofPS_6IRType__Si":{"name":"abiAlignment(of:)","abstract":"<p>Computes the minimum ABI-required alignment for the specified type.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData18callFrameAlignmentFT2ofPS_6IRType__Si":{"name":"callFrameAlignment(of:)","abstract":"<p>Computes the minimum ABI-required alignment for the specified type.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData7abiSizeFT2ofPS_6IRType__Si":{"name":"abiSize(of:)","abstract":"<p>Computes the ABI size of a type in bytes for a target.</p>","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData9storeSizeFT2ofPS_6IRType__Si":{"name":"storeSize(of:)","abstract":"<p>Computes the maximum number of bytes that may be overwritten by","parent_name":"TargetData"},"Classes/TargetData.html#/s:FC4LLVM10TargetData11pointerSizeFT12addressSpaceGSqSi__Si":{"name":"pointerSize(addressSpace:)","abstract":"<p>Computes the pointer size for the platform, optionally in a given","parent_name":"TargetData"},"Classes/FunctionPassManager.html#/s:FC4LLVM19FunctionPassManagercFT6moduleCS_6Module_S0_":{"name":"init(module:)","abstract":"<p>Creates a <code>FunctionPassManager</code> bound to the given module&rsquo;s IR.</p>","parent_name":"FunctionPassManager"},"Classes/FunctionPassManager.html#/s:FC4LLVM19FunctionPassManager3addFtGSaOS_12FunctionPass__T_":{"name":"add(_:)","abstract":"<p>Adds the given passes to the pass manager.</p>","parent_name":"FunctionPassManager"},"Classes/FunctionPassManager.html#/s:FC4LLVM19FunctionPassManager3runFT2onCS_8Function_T_":{"name":"run(on:)","abstract":"<p>Runs all listed functions in the pass manager on the given function.</p>","parent_name":"FunctionPassManager"},"Classes/SymbolSequence.html#/s:FC4LLVM14SymbolSequence12makeIteratorFT_GVs11AnyIteratorVS_6Symbol_":{"name":"makeIterator()","abstract":"<p>Creates an iterator that will iterate over all symbols in an object","parent_name":"SymbolSequence"},"Classes/RelocationSequence.html#/s:FC4LLVM18RelocationSequence12makeIteratorFT_GVs11AnyIteratorVS_10Relocation_":{"name":"makeIterator()","abstract":"<p>Creates an iterator that will iterate over all relocations in an object","parent_name":"RelocationSequence"},"Classes/SectionSequence.html#/s:FC4LLVM15SectionSequence12makeIteratorFT_GVs11AnyIteratorVS_7Section_":{"name":"makeIterator()","abstract":"<p>Makes an iterator that iterates over the sections in an object file.</p>","parent_name":"SectionSequence"},"Classes/ObjectFile.html#/s:FC4LLVM10ObjectFilecFT12memoryBufferCS_12MemoryBuffer_GSqS0__":{"name":"init(memoryBuffer:)","abstract":"<p>Creates an <code>ObjectFile</code> with the contents of a provided memory buffer.</p>","parent_name":"ObjectFile"},"Classes/ObjectFile.html#/s:FC4LLVM10ObjectFilecFT4pathSS_GSqS0__":{"name":"init(path:)","abstract":"<p>Creates an <code>ObjectFile</code> with the contents of the object file at","parent_name":"ObjectFile"},"Classes/ObjectFile.html#/s:vC4LLVM10ObjectFile8sectionsCS_15SectionSequence":{"name":"sections","abstract":"<p>Returns a sequence of all the sections in this object file.</p>","parent_name":"ObjectFile"},"Classes/ObjectFile.html#/s:vC4LLVM10ObjectFile7symbolsCS_14SymbolSequence":{"name":"symbols","abstract":"<p>Returns a sequence of all the symbols in this object file.</p>","parent_name":"ObjectFile"},"Classes/Context.html#/s:ZvC4LLVM7Context6globalS0_":{"name":"global","abstract":"<p>Retrieves the global context instance.</p>","parent_name":"Context"},"Classes/Context.html#/s:FC4LLVM7ContextcFT4llvmVs13OpaquePointer_S0_":{"name":"init(llvm:)","abstract":"<p>Creates a <code>Context</code> object from an <code>LLVMContextRef</code> object.</p>","parent_name":"Context"},"Classes/MemoryBuffer.html#/s:ZFC4LLVM12MemoryBuffer9fromStdinFzT_S0_":{"name":"fromStdin()","abstract":"<p>Creates a <code>MemoryBuffer</code> with the contents of <code>stdin</code>, stopping once","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:FC4LLVM12MemoryBuffercFT6bufferGSRVs4Int8_4nameSS22requiresNullTerminatorSb_S0_":{"name":"init(buffer:name:requiresNullTerminator:)","abstract":"<p>Creates a <code>MemoryBuffer</code> that points to a specified","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:FC4LLVM12MemoryBuffercFT13copyingBufferGSRVs4Int8_4nameSS_S0_":{"name":"init(copyingBuffer:name:)","abstract":"<p>Creates a <code>MemoryBuffer</code> by copying the data within a specified","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:FC4LLVM12MemoryBuffercFzT10contentsOfSS_S0_":{"name":"init(contentsOf:)","abstract":"<p>Creates a <code>MemoryBuffer</code> with the contents of the file at the provided","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:vC4LLVM12MemoryBuffer5startGSPVs4Int8_":{"name":"start","abstract":"<p>Retrieves the start address of this buffer.</p>","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:vC4LLVM12MemoryBuffer4sizeSi":{"name":"size","abstract":"<p>Retrieves the size in bytes of this buffer.</p>","parent_name":"MemoryBuffer"},"Classes/MemoryBuffer.html#/s:FC4LLVM12MemoryBuffer12makeIteratorFT_GVs27UnsafeBufferPointerIteratorVs4Int8_":{"name":"makeIterator()","abstract":"<p>Makes an iterator so this buffer can be traversed in a <code>for</code> loop.</p>","parent_name":"MemoryBuffer"},"Classes/JIT.html#/s:FC4LLVM3JITcFzT6moduleCS_6Module7machineCS_13TargetMachine_S0_":{"name":"init(module:machine:)","abstract":"<p>Creates a Just In Time compiler that will compile the code in the","parent_name":"JIT"},"Classes/JIT.html#/s:FC4LLVM3JIT11runFunctionFTCS_8Function4argsGSaPS_7IRValue___PS2__":{"name":"runFunction(_:args:)","abstract":"<p>Runs the specified function with the provided arguments by compiling","parent_name":"JIT"},"Classes/JIT.html#/s:FC4LLVM3JIT17addressOfFunctionFT4nameSS_GSqVs13OpaquePointer_":{"name":"addressOfFunction(name:)","abstract":"<p>Retrieves a pointer to the function compiled by this JIT.</p>","parent_name":"JIT"},"Classes/JIT.html#/s:FC4LLVM3JIT9addModuleFCS_6ModuleT_":{"name":"addModule(_:)","abstract":"<p>Adds the provided module, and all top-level declarations into this JIT.</p>","parent_name":"JIT"},"Classes/JIT.html#/s:FC4LLVM3JIT12removeModuleFzCS_6ModuleT_":{"name":"removeModule(_:)","abstract":"<p>Removes the provided module, and all top-level declarations, from this","parent_name":"JIT"},"Classes/JIT.html#/s:FC4LLVM3JIT17runFunctionAsMainFTCS_8Function4argsGSaSS__Si":{"name":"runFunctionAsMain(_:args:)","abstract":"<p>Runs the specified function as if it were the <code>main</code> function in an","parent_name":"JIT"},"Classes/IRBuilder.html#/s:vC4LLVM9IRBuilder6moduleCS_6Module":{"name":"module","abstract":"<p>The module this <code>IRBuilder</code> is associated with.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuildercFT6moduleCS_6Module_S0_":{"name":"init(module:)","abstract":"<p>Creates an <code>IRBuilder</code> object with the given module.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder13positionAtEndFT2ofVS_10BasicBlock_T_":{"name":"positionAtEnd(of:)","abstract":"<p>Repositions the IR Builder at the end of the given basic block.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder14positionBeforeFPS_7IRValue_T_":{"name":"positionBefore(_:)","abstract":"<p>Repositions the IR Builder before the start of the given instruction.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8positionFTPS_7IRValue_5blockVS_10BasicBlock_T_":{"name":"position(_:block:)","abstract":"<p>Repositions the IR Builder at the point specified by the given instruction","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder22clearInsertionPositionFT_T_":{"name":"clearInsertionPosition()","abstract":"<p>Clears the insertion point.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:vC4LLVM9IRBuilder11insertBlockGSqVS_10BasicBlock_":{"name":"insertBlock","abstract":"<p>Gets the basic block built instructions will be inserted into.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:vC4LLVM9IRBuilder15currentFunctionGSqCS_8Function_":{"name":"currentFunction","abstract":"<p>Gets the function this builder is building into.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder6insertFTPS_7IRValue_4nameGSqSS__T_":{"name":"insert(_:name:)","abstract":"<p>Inserts the given instruction into the IR Builder.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder20buildBinaryOperationFTOOS_6OpCode6BinaryPS_7IRValue_PS3__4nameSS_PS3__":{"name":"buildBinaryOperation(_:_:_:name:)","abstract":"<p>Builds the specified binary operation instruction with the given arguments.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9buildCastFTOOS_6OpCode4Cast5valuePS_7IRValue_4typePS_6IRType_4nameSS_PS3__":{"name":"buildCast(_:value:type:name:)","abstract":"<p>Builds the specified cast operation instruction with the given value and","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildNegFTPS_7IRValue_16overflowBehaviorOS_16OverflowBehavior4nameSS_PS1__":{"name":"buildNeg(_:overflowBehavior:name:)","abstract":"<p>Builds a negation instruction with the given value as an operand.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildAddFTPS_7IRValue_PS1__16overflowBehaviorOS_16OverflowBehavior4nameSS_PS1__":{"name":"buildAdd(_:_:overflowBehavior:name:)","abstract":"<p>Builds an add instruction with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildSubFTPS_7IRValue_PS1__16overflowBehaviorOS_16OverflowBehavior4nameSS_PS1__":{"name":"buildSub(_:_:overflowBehavior:name:)","abstract":"<p>Builds a subtract instruction with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildMulFTPS_7IRValue_PS1__16overflowBehaviorOS_16OverflowBehavior4nameSS_PS1__":{"name":"buildMul(_:_:overflowBehavior:name:)","abstract":"<p>Builds a multiply instruction with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildRemFTPS_7IRValue_PS1__6signedSb4nameSS_PS1__":{"name":"buildRem(_:_:signed:name:)","abstract":"<p>Build a remainder instruction that provides the remainder after divison of","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildDivFTPS_7IRValue_PS1__6signedSb5exactSb4nameSS_PS1__":{"name":"buildDiv(_:_:signed:exact:name:)","abstract":"<p>Build a division instruction that divides the first value by the second","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9buildICmpFTPS_7IRValue_PS1__OS_12IntPredicate4nameSS_PS1__":{"name":"buildICmp(_:_:_:name:)","abstract":"<p>Build an integer comparison between the two provided values using the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9buildFCmpFTPS_7IRValue_PS1__OS_13RealPredicate4nameSS_PS1__":{"name":"buildFCmp(_:_:_:name:)","abstract":"<p>Build a floating comparison between the two provided values using the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildNotFTPS_7IRValue_4nameSS_PS1__":{"name":"buildNot(_:name:)","abstract":"<p>Builds a bitwise logical not with the given value as an operand.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildXorFTPS_7IRValue_PS1__4nameSS_PS1__":{"name":"buildXor(_:_:name:)","abstract":"<p>Builds a bitwise logical exclusive OR with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder7buildOrFTPS_7IRValue_PS1__4nameSS_PS1__":{"name":"buildOr(_:_:name:)","abstract":"<p>Builds a bitwise logical OR with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildAndFTPS_7IRValue_PS1__4nameSS_PS1__":{"name":"buildAnd(_:_:name:)","abstract":"<p>Builds a bitwise logical AND with the given values as operands.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildShlFTPS_7IRValue_PS1__4nameSS_PS1__":{"name":"buildShl(_:_:name:)","abstract":"<p>Builds a left-shift instruction of the first value by an amount in the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildShrFTPS_7IRValue_PS1__12isArithmeticSb4nameSS_PS1__":{"name":"buildShr(_:_:isArithmetic:name:)","abstract":"<p>Builds a right-shift instruction of the first value by an amount in the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildPhiFTPS_6IRType_4nameSS_VS_7PhiNode":{"name":"buildPhi(_:name:)","abstract":"<p>Build a phi node with the given type acting as the result of any incoming","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildSelectFTPS_7IRValue_4thenPS1__4elsePS1__4nameSS_PS1__":{"name":"buildSelect(_:then:else:name:)","abstract":"<p>Build a select instruction to choose a value based on a condition without","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildSwitchFTPS_7IRValue_4elseVS_10BasicBlock9caseCountSi_VS_6Switch":{"name":"buildSwitch(_:else:caseCount:)","abstract":"<p>Build a branch table that branches on the given value with the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11addFunctionFTSS4typeVS_12FunctionType_CS_8Function":{"name":"addFunction(_:type:)","abstract":"<p>Build a named function body with the given type.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder12createStructFT4nameSS5typesGSqGSaPS_6IRType___8isPackedSb_VS_10StructType":{"name":"createStruct(name:types:isPacked:)","abstract":"<p>Build a named structure definition.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder7buildBrFVS_10BasicBlockPS_7IRValue_":{"name":"buildBr(_:)","abstract":"<p>Build an unconditional branch to the given basic block.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildCondBrFT9conditionPS_7IRValue_4thenVS_10BasicBlock4elseS2__PS1__":{"name":"buildCondBr(condition:then:else:)","abstract":"<p>Build a condition branch that branches to the first basic block if the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder15buildIndirectBrFT7addressVVS_10BasicBlock7Address12destinationsGSaS1___PS_7IRValue_":{"name":"buildIndirectBr(address:destinations:)","abstract":"<p>Build an indirect branch to a label within the current function.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildRetFPS_7IRValue_PS1__":{"name":"buildRet(_:)","abstract":"<p>Builds a return from the current function back to the calling function","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder12buildRetVoidFT_PS_7IRValue_":{"name":"buildRetVoid()","abstract":"<p>Builds a void return from the current function.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder16buildUnreachableFT_PS_7IRValue_":{"name":"buildUnreachable()","abstract":"<p>Builds an unreachable instruction in the current function.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder17buildRetAggregateFT2ofGSaPS_7IRValue___PS1__":{"name":"buildRetAggregate(of:)","abstract":"<p>Build a return from the current function back to the calling function with","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9buildCallFTPS_7IRValue_4argsGSaPS1___4nameSS_VS_4Call":{"name":"buildCall(_:args:name:)","abstract":"<p>Build a call to the given function with the given arguments to transfer","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildInvokeFTPS_7IRValue_4argsGSaPS1___4nextVS_10BasicBlock5catchS2_4nameSS_VS_6Invoke":{"name":"buildInvoke(_:args:next:catch:name:)","abstract":"<p>Build a call to the given function with the given arguments with the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder15buildLandingPadFT9returningPS_6IRType_13personalityFnGSqCS_8Function_7clausesGSaOS_16LandingPadClause_7cleanupSb4nameSS_PS_7IRValue_":{"name":"buildLandingPad(returning:personalityFn:clauses:cleanup:name:)","abstract":"<p>Build a landing pad to specify that a basic block is where an exception","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildResumeFPS_7IRValue_PS1__":{"name":"buildResume(_:)","abstract":"<p>Build a resume instruction to resume propagation of an existing","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder10buildVAArgFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildVAArg(_:type:name:)","abstract":"<p>Build a <code>va_arg</code> instruction to access arguments passed through the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildAllocaFT4typePS_6IRType_4nameSS_PS_7IRValue_":{"name":"buildAlloca(type:name:)","abstract":"<p>Build an <code>alloca</code> to allocate stack memory to hold a value of the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder10buildStoreFTPS_7IRValue_2toPS1___PS1__":{"name":"buildStore(_:to:)","abstract":"<p>Build a store instruction that stores the first value into the location","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9buildLoadFTPS_7IRValue_4nameSS_PS1__":{"name":"buildLoad(_:name:)","abstract":"<p>Builds a load instruction that loads a value from the location in the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder16buildInBoundsGEPFTPS_7IRValue_7indicesGSaPS1___4nameSS_PS1__":{"name":"buildInBoundsGEP(_:indices:name:)","abstract":"<p>Builds a <code>GEP</code> (Get Element Pointer) instruction with a resultant value","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8buildGEPFTPS_7IRValue_7indicesGSaPS1___4nameSS_PS1__":{"name":"buildGEP(_:indices:name:)","abstract":"<p>Builds a GEP (Get Element Pointer) instruction.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder14buildStructGEPFTPS_7IRValue_5indexSi4nameSS_PS1__":{"name":"buildStructGEP(_:index:name:)","abstract":"<p>Builds a GEP (Get Element Pointer) instruction suitable for indexing into","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder17buildExtractValueFTPS_7IRValue_5indexSi4nameSS_PS1__":{"name":"buildExtractValue(_:index:name:)","abstract":"<p>Builds an ExtractValue instruction to retrieve an indexed value from a","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildIsNullFTPS_7IRValue_4nameSS_PS1__":{"name":"buildIsNull(_:name:)","abstract":"<p>Builds a comparision instruction that returns whether the given operand is","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder14buildIsNotNullFTPS_7IRValue_4nameSS_PS1__":{"name":"buildIsNotNull(_:name:)","abstract":"<p>Builds a comparision instruction that returns whether the given operand is","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder19buildTruncOrBitCastFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildTruncOrBitCast(_:type:name:)","abstract":"<p>Builds an instruction that either performs a truncation or a bitcast of","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder18buildZExtOrBitCastFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildZExtOrBitCast(_:type:name:)","abstract":"<p>Builds an instruction that either performs a zero extension or a bitcast of","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder12buildBitCastFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildBitCast(_:type:name:)","abstract":"<p>Builds a bitcast instruction to convert the given value to a value of the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildFPCastFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildFPCast(_:type:name:)","abstract":"<p>Builds a cast instruction to convert the given floating-point value to a","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder18buildAddrSpaceCastFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildAddrSpaceCast(_:type:name:)","abstract":"<p>Builds an address space cast instruction that converts a pointer value","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder10buildTruncFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildTrunc(_:type:name:)","abstract":"<p>Builds a truncate instruction to truncate the given value to the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9buildSExtFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildSExt(_:type:name:)","abstract":"<p>Builds a sign extension instruction to sign extend the given value to","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9buildZExtFTPS_7IRValue_4typePS_6IRType_4nameSS_PS1__":{"name":"buildZExt(_:type:name:)","abstract":"<p>Builds a zero extension instruction to zero extend the given value to the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder13buildIntToPtrFTPS_7IRValue_4typeVS_11PointerType4nameSS_PS1__":{"name":"buildIntToPtr(_:type:name:)","abstract":"<p>Builds an integer-to-pointer instruction to convert the given value to the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder13buildPtrToIntFTPS_7IRValue_4typeVS_7IntType4nameSS_PS1__":{"name":"buildPtrToInt(_:type:name:)","abstract":"<p>Builds a pointer-to-integer instruction to convert the given pointer value","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder12buildIntToFPFTPS_7IRValue_4typeOS_9FloatType6signedSb4nameSS_PS1__":{"name":"buildIntToFP(_:type:signed:name:)","abstract":"<p>Builds an integer-to-floating instruction to convert the given integer","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder12buildFPToIntFTPS_7IRValue_4typeVS_7IntType6signedSb4nameSS_PS1__":{"name":"buildFPToInt(_:type:signed:name:)","abstract":"<p>Builds a floating-to-integer instruction to convert the given floating","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder12buildAlignOfFPS_6IRType_PS_7IRValue_":{"name":"buildAlignOf(_:)","abstract":"<p>Builds a constant expression that returns the alignment of the given type","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildSizeOfFPS_6IRType_PS_7IRValue_":{"name":"buildSizeOf(_:)","abstract":"<p>Builds a constant expression that returns the size of the given type in","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder22buildPointerDifferenceFTPS_7IRValue_PS1__4nameSS_PS1__":{"name":"buildPointerDifference(_:_:name:)","abstract":"<p>Builds an expression that returns the difference between two pointer","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder10buildFenceFT8orderingOS_14AtomicOrdering14singleThreadedSb4nameSS_PS_7IRValue_":{"name":"buildFence(ordering:singleThreaded:name:)","abstract":"<p>Builds a fence instruction that introduces <q>happens-before</q> edges between","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder18buildAtomicCmpXchgFT3ptrPS_7IRValue_2ofPS1__2toPS1__15successOrderingOS_14AtomicOrdering15failureOrderingS2_14singleThreadedSb_PS1__":{"name":"buildAtomicCmpXchg(ptr:of:to:successOrdering:failureOrdering:singleThreaded:)","abstract":"<p>Builds an atomic compare-and-exchange instruction to atomically modify","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder14buildAtomicRMWFT8atomicOpOS_30AtomicReadModifyWriteOperation3ptrPS_7IRValue_5valuePS2__8orderingOS_14AtomicOrdering14singleThreadedSb_PS2__":{"name":"buildAtomicRMW(atomicOp:ptr:value:ordering:singleThreaded:)","abstract":"<p>Builds an atomic read-modify-write instruction to atomically modify memory.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder11buildMallocFTPS_6IRType_5countGSqPS_7IRValue__4nameSS_PS2__":{"name":"buildMalloc(_:count:name:)","abstract":"<p>Builds a call to the C standard library <code>malloc</code> instruction.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9buildFreeFPS_7IRValue_PS1__":{"name":"buildFree(_:)","abstract":"<p>Builds a call to the C standard library <code>free</code> function, with the provided","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder16buildInsertValueFT9aggregatePS_7IRValue_7elementPS1__5indexSi4nameSS_PS1__":{"name":"buildInsertValue(aggregate:element:index:name:)","abstract":"<p>Builds an instruction to insert a value into a member field in an","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder18buildInsertElementFT6vectorPS_7IRValue_7elementPS1__5indexPS1__4nameSS_PS1__":{"name":"buildInsertElement(vector:element:index:name:)","abstract":"<p>Builds a vector insert instruction to nondestructively insert the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder19buildExtractElementFT6vectorPS_7IRValue_5indexPS1__4nameSS_PS1__":{"name":"buildExtractElement(vector:index:name:)","abstract":"<p>Builds an instruction to extract a single scalar element from a vector at","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder18buildShuffleVectorFTPS_7IRValue_3andPS1__4maskPS1__4nameSS_PS1__":{"name":"buildShuffleVector(_:and:mask:name:)","abstract":"<p>Builds a vector shuffle instruction to construct a permutation of elements","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9addGlobalFTSS4typePS_6IRType_12addressSpaceGSqSi__VS_6Global":{"name":"addGlobal(_:type:addressSpace:)","abstract":"<p>Build a named global of the given type.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder9addGlobalFTSS11initializerPS_7IRValue_12addressSpaceGSqSi__VS_6Global":{"name":"addGlobal(_:initializer:addressSpace:)","abstract":"<p>Build a named global of the given type.</p>","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder15addGlobalStringFT4nameSS5valueSS_VS_6Global":{"name":"addGlobalString(name:value:)","abstract":"<p>Build a named global string consisting of an array of <code>i8</code> type filled in","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder17buildGlobalStringFTSS4nameSS_VS_6Global":{"name":"buildGlobalString(_:name:)","abstract":"<p>Builds a named global variable containing the characters of the given","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder20buildGlobalStringPtrFTSS4nameSS_PS_7IRValue_":{"name":"buildGlobalStringPtr(_:name:)","abstract":"<p>Builds a named global variable containing a pointer to the contents of the","parent_name":"IRBuilder"},"Classes/IRBuilder.html#/s:FC4LLVM9IRBuilder8addAliasFT4nameSS2toPS_8IRGlobal_4typePS_6IRType__VS_5Alias":{"name":"addAlias(name:to:type:)","abstract":"<p>Builds a named alias to a global value or a constant expression.</p>","parent_name":"IRBuilder"},"Classes/Module.html#/s:FC4LLVM6ModulecFT4nameSS7contextGSqCS_7Context__S0_":{"name":"init(name:context:)","abstract":"<p>Creates a <code>Module</code> with the given name.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module7contextCS_7Context":{"name":"context","abstract":"<p>Returns the context associated with this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module10dataLayoutCS_10TargetData":{"name":"dataLayout","abstract":"<p>Obtain the data layout for this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module4nameSS":{"name":"name","abstract":"<p>The identifier of this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:FC4LLVM6Module5printFzT2toSS_T_":{"name":"print(to:)","abstract":"<p>Print a representation of a module to a file at the given path.</p>","parent_name":"Module"},"Classes/Module.html#/s:FC4LLVM6Module11emitBitCodeFzT2toSS_T_":{"name":"emitBitCode(to:)","abstract":"<p>Writes the bitcode of elements in this module to a file at the given path.</p>","parent_name":"Module"},"Classes/Module.html#/s:FC4LLVM6Module6verifyFzT_T_":{"name":"verify()","abstract":"<p>Verifies that this module is valid, taking the specified action if not.","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module9functionsGVs11AnySequenceCS_8Function_":{"name":"functions","abstract":"<p>Retrieves the sequence of functions that make up this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module13firstFunctionGSqCS_8Function_":{"name":"firstFunction","abstract":"<p>Retrieves the first function in this module, if there are any functions.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module12lastFunctionGSqCS_8Function_":{"name":"lastFunction","abstract":"<p>Retrieves the last function in this module, if there are any functions.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module11firstGlobalGSqVS_6Global_":{"name":"firstGlobal","abstract":"<p>Retrieves the first global in this module, if there are any globals.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module10lastGlobalGSqVS_6Global_":{"name":"lastGlobal","abstract":"<p>Retrieves the last global in this module, if there are any globals.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module7globalsGVs11AnySequenceVS_6Global_":{"name":"globals","abstract":"<p>Retrieves the sequence of functions that make up this module.</p>","parent_name":"Module"},"Classes/Module.html#/s:FC4LLVM6Module4dumpFT_T_":{"name":"dump()","abstract":"<p>Dump a representation of this module to stderr.</p>","parent_name":"Module"},"Classes/Module.html#/s:vC4LLVM6Module11descriptionSS":{"name":"description","abstract":"<p>The full text IR of this module</p>","parent_name":"Module"},"Classes/Module.html#/s:FC4LLVM6Module6globalFT5namedSS_GSqVS_6Global_":{"name":"global(named:)","abstract":"<p>Searches for and retrieves a global variable with the given name in this","parent_name":"Module"},"Classes/Module.html#/s:FC4LLVM6Module4typeFT5namedSS_GSqPS_6IRType__":{"name":"type(named:)","abstract":"<p>Searches for and retrieves a type with the given name in this module if","parent_name":"Module"},"Classes/Module.html#/s:FC4LLVM6Module8functionFT5namedSS_GSqCS_8Function_":{"name":"function(named:)","abstract":"<p>Searches for and retrieves a function with the given name in this module","parent_name":"Module"},"Classes/Function.html#/s:vC4LLVM8Function17callingConventionOS_17CallingConvention":{"name":"callingConvention","abstract":"<p>Accesses the calling convention for this function.</p>","parent_name":"Function"},"Classes/Function.html#/s:vC4LLVM8Function10entryBlockGSqVS_10BasicBlock_":{"name":"entryBlock","abstract":"<p>Retrieves the entry block of this function.</p>","parent_name":"Function"},"Classes/Function.html#/s:vC4LLVM8Function10firstBlockGSqVS_10BasicBlock_":{"name":"firstBlock","abstract":"<p>Retrieves the first basic block in this function&rsquo;s body.</p>","parent_name":"Function"},"Classes/Function.html#/s:vC4LLVM8Function9lastBlockGSqVS_10BasicBlock_":{"name":"lastBlock","abstract":"<p>Retrieves the last basic block in this function&rsquo;s body.</p>","parent_name":"Function"},"Classes/Function.html#/s:vC4LLVM8Function11basicBlocksGVs11AnySequenceVS_10BasicBlock_":{"name":"basicBlocks","abstract":"<p>Retrieves the sequence of basic blocks that make up this function&rsquo;s body.</p>","parent_name":"Function"},"Classes/Function.html#/s:FC4LLVM8Function7addressFT2ofVS_10BasicBlock_GSqVS1_7Address_":{"name":"address(of:)","abstract":"<p>Computes the address of the specified basic block in this function.</p>","parent_name":"Function"},"Classes/Function.html#/s:FC4LLVM8Function8previousFT_GSqS0__":{"name":"previous()","abstract":"<p>Retrieves the previous function in the module, if there is one.</p>","parent_name":"Function"},"Classes/Function.html#/s:FC4LLVM8Function4nextFT_GSqS0__":{"name":"next()","abstract":"<p>Retrieves the next function in the module, if there is one.</p>","parent_name":"Function"},"Classes/Function.html#/s:FC4LLVM8Function9parameterFT2atSi_GSqVS_9Parameter_":{"name":"parameter(at:)","abstract":"<p>Retrieves a parameter at the given index, if it exists.</p>","parent_name":"Function"},"Classes/Function.html#/s:vC4LLVM8Function14firstParameterGSqVS_9Parameter_":{"name":"firstParameter","abstract":"<p>Retrieves a parameter at the first index, if it exists.</p>","parent_name":"Function"},"Classes/Function.html#/s:vC4LLVM8Function13lastParameterGSqVS_9Parameter_":{"name":"lastParameter","abstract":"<p>Retrieves a parameter at the last index, if it exists.</p>","parent_name":"Function"},"Classes/Function.html#/s:vC4LLVM8Function10parametersGSaPS_7IRValue__":{"name":"parameters","abstract":"<p>Retrieves the list of all parameters for this function, in order.</p>","parent_name":"Function"},"Classes/Function.html#/s:FC4LLVM8Function16appendBasicBlockFT5namedSS2inGSqCS_7Context__VS_10BasicBlock":{"name":"appendBasicBlock(named:in:)","abstract":"<p>Appends the named basic block to the body of this function.</p>","parent_name":"Function"},"Classes/Function.html#/s:FC4LLVM8Function6deleteFT_T_":{"name":"delete()","abstract":"<p>Deletes the function from its containing module.</p>","parent_name":"Function"},"Classes/Function.html#/s:FC4LLVM8Function6asLLVMFT_Vs13OpaquePointer":{"name":"asLLVM()","abstract":"<p>Retrieves the underlying LLVM value object.</p>","parent_name":"Function"},"Classes/Function.html":{"name":"Function","abstract":"<p>A <code>Function</code> represents a named function body in LLVM IR source.  Functions"},"Classes/Module.html":{"name":"Module","abstract":"<p>A <code>Module</code> represents the top-level structure of an LLVM program. An LLVM"},"Classes/IRBuilder.html":{"name":"IRBuilder","abstract":"<p>An <code>IRBuilder</code> is a helper object that generates LLVM instructions.  IR"},"Classes/JIT.html":{"name":"JIT","abstract":"<p>A <code>JIT</code> is a Just-In-Time compiler that will compile and execute LLVM IR"},"Classes/MemoryBuffer.html":{"name":"MemoryBuffer","abstract":"<p><code>MemoryBuffer</code> provides simple read-only access to a block of memory, and"},"Classes/Context.html":{"name":"Context","abstract":"<p>A <code>Context</code> represents execution states for the core LLVM IR system.</p>"},"Classes/ObjectFile.html":{"name":"ObjectFile","abstract":"<p>An in-memory representation of a format-independent object file.</p>"},"Classes/SectionSequence.html":{"name":"SectionSequence","abstract":"<p>A sequence for iterating over the sections in an object file.</p>"},"Classes/RelocationSequence.html":{"name":"RelocationSequence","abstract":"<p>A sequence for iterating over the relocations in an object file.</p>"},"Classes/SymbolSequence.html":{"name":"SymbolSequence","abstract":"<p>A sequence for iterating over the symbols in an object file.</p>"},"Classes/FunctionPassManager.html":{"name":"FunctionPassManager","abstract":"<p>A <code>FunctionPassManager</code> is an object that collects a sequence of passes"},"Classes/TargetData.html":{"name":"TargetData","abstract":"<p>A <code>TargetData</code> encapsulates information about the data requirements of a"},"Classes/Target.html":{"name":"Target","abstract":"<p>A <code>Target</code> object represents an object that encapsulates information about"},"Classes/TargetMachine.html":{"name":"TargetMachine","abstract":"<p>A <code>TargetMachine</code> object represents an object that encapsulates information"},"Classes.html":{"name":"Classes","abstract":"<p>The following classes are available globally.</p>"},"Enums.html":{"name":"Enums","abstract":"<p>The following enums are available globally.</p>"},"Extensions.html":{"name":"Extensions","abstract":"<p>The following extensions are available globally.</p>"},"Functions.html":{"name":"Functions","abstract":"<p>The following functions are available globally.</p>"},"Protocols.html":{"name":"Protocols","abstract":"<p>The following protocols are available globally.</p>"},"Structs.html":{"name":"Structs","abstract":"<p>The following structs are available globally.</p>"}}